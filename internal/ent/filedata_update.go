// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/internal/ent/file"
	"github.com/jvllmr/frans/internal/ent/filedata"
	"github.com/jvllmr/frans/internal/ent/predicate"
	"github.com/jvllmr/frans/internal/ent/user"
)

// FileDataUpdate is the builder for updating FileData entities.
type FileDataUpdate struct {
	config
	hooks    []Hook
	mutation *FileDataMutation
}

// Where appends a list predicates to the FileDataUpdate builder.
func (_u *FileDataUpdate) Where(ps ...predicate.FileData) *FileDataUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSize sets the "size" field.
func (_u *FileDataUpdate) SetSize(v uint64) *FileDataUpdate {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *FileDataUpdate) SetNillableSize(v *uint64) *FileDataUpdate {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *FileDataUpdate) AddSize(v int64) *FileDataUpdate {
	_u.mutation.AddSize(v)
	return _u
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *FileDataUpdate) AddUserIDs(ids ...uuid.UUID) *FileDataUpdate {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *FileDataUpdate) AddUsers(v ...*User) *FileDataUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *FileDataUpdate) AddFileIDs(ids ...uuid.UUID) *FileDataUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *FileDataUpdate) AddFiles(v ...*File) *FileDataUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the FileDataMutation object of the builder.
func (_u *FileDataUpdate) Mutation() *FileDataMutation {
	return _u.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *FileDataUpdate) ClearUsers() *FileDataUpdate {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *FileDataUpdate) RemoveUserIDs(ids ...uuid.UUID) *FileDataUpdate {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *FileDataUpdate) RemoveUsers(v ...*User) *FileDataUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *FileDataUpdate) ClearFiles() *FileDataUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *FileDataUpdate) RemoveFileIDs(ids ...uuid.UUID) *FileDataUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *FileDataUpdate) RemoveFiles(v ...*File) *FileDataUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FileDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileDataUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FileDataUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileDataUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *FileDataUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(filedata.Table, filedata.Columns, sqlgraph.NewFieldSpec(filedata.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(filedata.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(filedata.FieldSize, field.TypeUint64, value)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filedata.UsersTable,
			Columns: filedata.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filedata.UsersTable,
			Columns: filedata.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filedata.UsersTable,
			Columns: filedata.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   filedata.FilesTable,
			Columns: []string{filedata.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   filedata.FilesTable,
			Columns: []string{filedata.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   filedata.FilesTable,
			Columns: []string{filedata.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FileDataUpdateOne is the builder for updating a single FileData entity.
type FileDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileDataMutation
}

// SetSize sets the "size" field.
func (_u *FileDataUpdateOne) SetSize(v uint64) *FileDataUpdateOne {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *FileDataUpdateOne) SetNillableSize(v *uint64) *FileDataUpdateOne {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *FileDataUpdateOne) AddSize(v int64) *FileDataUpdateOne {
	_u.mutation.AddSize(v)
	return _u
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *FileDataUpdateOne) AddUserIDs(ids ...uuid.UUID) *FileDataUpdateOne {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *FileDataUpdateOne) AddUsers(v ...*User) *FileDataUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *FileDataUpdateOne) AddFileIDs(ids ...uuid.UUID) *FileDataUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *FileDataUpdateOne) AddFiles(v ...*File) *FileDataUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the FileDataMutation object of the builder.
func (_u *FileDataUpdateOne) Mutation() *FileDataMutation {
	return _u.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *FileDataUpdateOne) ClearUsers() *FileDataUpdateOne {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *FileDataUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *FileDataUpdateOne {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *FileDataUpdateOne) RemoveUsers(v ...*User) *FileDataUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *FileDataUpdateOne) ClearFiles() *FileDataUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *FileDataUpdateOne) RemoveFileIDs(ids ...uuid.UUID) *FileDataUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *FileDataUpdateOne) RemoveFiles(v ...*File) *FileDataUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the FileDataUpdate builder.
func (_u *FileDataUpdateOne) Where(ps ...predicate.FileData) *FileDataUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FileDataUpdateOne) Select(field string, fields ...string) *FileDataUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated FileData entity.
func (_u *FileDataUpdateOne) Save(ctx context.Context) (*FileData, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileDataUpdateOne) SaveX(ctx context.Context) *FileData {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FileDataUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileDataUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *FileDataUpdateOne) sqlSave(ctx context.Context) (_node *FileData, err error) {
	_spec := sqlgraph.NewUpdateSpec(filedata.Table, filedata.Columns, sqlgraph.NewFieldSpec(filedata.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filedata.FieldID)
		for _, f := range fields {
			if !filedata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filedata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(filedata.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(filedata.FieldSize, field.TypeUint64, value)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filedata.UsersTable,
			Columns: filedata.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filedata.UsersTable,
			Columns: filedata.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   filedata.UsersTable,
			Columns: filedata.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   filedata.FilesTable,
			Columns: []string{filedata.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   filedata.FilesTable,
			Columns: []string{filedata.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   filedata.FilesTable,
			Columns: []string{filedata.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FileData{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
