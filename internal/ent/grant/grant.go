// Code generated by ent, DO NOT EDIT.

package grant

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the grant type in the database.
	Label = "grant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldExpiryType holds the string denoting the expiry_type field in the database.
	FieldExpiryType = "expiry_type"
	// FieldHashedPassword holds the string denoting the hashed_password field in the database.
	FieldHashedPassword = "hashed_password"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldExpiryTotalDays holds the string denoting the expiry_total_days field in the database.
	FieldExpiryTotalDays = "expiry_total_days"
	// FieldExpiryDaysSinceLastUpload holds the string denoting the expiry_days_since_last_upload field in the database.
	FieldExpiryDaysSinceLastUpload = "expiry_days_since_last_upload"
	// FieldExpiryTotalUploads holds the string denoting the expiry_total_uploads field in the database.
	FieldExpiryTotalUploads = "expiry_total_uploads"
	// FieldFileExpiryType holds the string denoting the file_expiry_type field in the database.
	FieldFileExpiryType = "file_expiry_type"
	// FieldFileExpiryTotalDays holds the string denoting the file_expiry_total_days field in the database.
	FieldFileExpiryTotalDays = "file_expiry_total_days"
	// FieldFileExpiryDaysSinceLastDownload holds the string denoting the file_expiry_days_since_last_download field in the database.
	FieldFileExpiryDaysSinceLastDownload = "file_expiry_days_since_last_download"
	// FieldFileExpiryTotalDownloads holds the string denoting the file_expiry_total_downloads field in the database.
	FieldFileExpiryTotalDownloads = "file_expiry_total_downloads"
	// FieldLastUpload holds the string denoting the last_upload field in the database.
	FieldLastUpload = "last_upload"
	// FieldTimesUploaded holds the string denoting the times_uploaded field in the database.
	FieldTimesUploaded = "times_uploaded"
	// FieldEmailOnUpload holds the string denoting the email_on_upload field in the database.
	FieldEmailOnUpload = "email_on_upload"
	// FieldCreatorLang holds the string denoting the creator_lang field in the database.
	FieldCreatorLang = "creator_lang"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeShareaccesstokens holds the string denoting the shareaccesstokens edge name in mutations.
	EdgeShareaccesstokens = "shareaccesstokens"
	// Table holds the table name of the grant in the database.
	Table = "grants"
	// FilesTable is the table that holds the files relation/edge. The primary key declared below.
	FilesTable = "grant_files"
	// FilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FilesInverseTable = "files"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "grants"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_grants"
	// ShareaccesstokensTable is the table that holds the shareaccesstokens relation/edge.
	ShareaccesstokensTable = "share_access_tokens"
	// ShareaccesstokensInverseTable is the table name for the ShareAccessToken entity.
	// It exists in this package in order to avoid circular dependency with the "shareaccesstoken" package.
	ShareaccesstokensInverseTable = "share_access_tokens"
	// ShareaccesstokensColumn is the table column denoting the shareaccesstokens relation/edge.
	ShareaccesstokensColumn = "grant_shareaccesstokens"
)

// Columns holds all SQL columns for grant fields.
var Columns = []string{
	FieldID,
	FieldComment,
	FieldExpiryType,
	FieldHashedPassword,
	FieldSalt,
	FieldCreatedAt,
	FieldExpiryTotalDays,
	FieldExpiryDaysSinceLastUpload,
	FieldExpiryTotalUploads,
	FieldFileExpiryType,
	FieldFileExpiryTotalDays,
	FieldFileExpiryDaysSinceLastDownload,
	FieldFileExpiryTotalDownloads,
	FieldLastUpload,
	FieldTimesUploaded,
	FieldEmailOnUpload,
	FieldCreatorLang,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "grants"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_grants",
}

var (
	// FilesPrimaryKey and FilesColumn2 are the table columns denoting the
	// primary key for the files relation (M2M).
	FilesPrimaryKey = []string{"grant_id", "file_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultTimesUploaded holds the default value on creation for the "times_uploaded" field.
	DefaultTimesUploaded uint64
	// DefaultCreatorLang holds the default value on creation for the "creator_lang" field.
	DefaultCreatorLang string
)

// OrderOption defines the ordering options for the Grant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByExpiryType orders the results by the expiry_type field.
func ByExpiryType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryType, opts...).ToFunc()
}

// ByHashedPassword orders the results by the hashed_password field.
func ByHashedPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHashedPassword, opts...).ToFunc()
}

// BySalt orders the results by the salt field.
func BySalt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByExpiryTotalDays orders the results by the expiry_total_days field.
func ByExpiryTotalDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryTotalDays, opts...).ToFunc()
}

// ByExpiryDaysSinceLastUpload orders the results by the expiry_days_since_last_upload field.
func ByExpiryDaysSinceLastUpload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryDaysSinceLastUpload, opts...).ToFunc()
}

// ByExpiryTotalUploads orders the results by the expiry_total_uploads field.
func ByExpiryTotalUploads(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryTotalUploads, opts...).ToFunc()
}

// ByFileExpiryType orders the results by the file_expiry_type field.
func ByFileExpiryType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileExpiryType, opts...).ToFunc()
}

// ByFileExpiryTotalDays orders the results by the file_expiry_total_days field.
func ByFileExpiryTotalDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileExpiryTotalDays, opts...).ToFunc()
}

// ByFileExpiryDaysSinceLastDownload orders the results by the file_expiry_days_since_last_download field.
func ByFileExpiryDaysSinceLastDownload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileExpiryDaysSinceLastDownload, opts...).ToFunc()
}

// ByFileExpiryTotalDownloads orders the results by the file_expiry_total_downloads field.
func ByFileExpiryTotalDownloads(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileExpiryTotalDownloads, opts...).ToFunc()
}

// ByLastUpload orders the results by the last_upload field.
func ByLastUpload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUpload, opts...).ToFunc()
}

// ByTimesUploaded orders the results by the times_uploaded field.
func ByTimesUploaded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimesUploaded, opts...).ToFunc()
}

// ByEmailOnUpload orders the results by the email_on_upload field.
func ByEmailOnUpload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailOnUpload, opts...).ToFunc()
}

// ByCreatorLang orders the results by the creator_lang field.
func ByCreatorLang(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatorLang, opts...).ToFunc()
}

// ByFilesCount orders the results by files count.
func ByFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilesStep(), opts...)
	}
}

// ByFiles orders the results by files terms.
func ByFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByShareaccesstokensCount orders the results by shareaccesstokens count.
func ByShareaccesstokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newShareaccesstokensStep(), opts...)
	}
}

// ByShareaccesstokens orders the results by shareaccesstokens terms.
func ByShareaccesstokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newShareaccesstokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newShareaccesstokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ShareaccesstokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ShareaccesstokensTable, ShareaccesstokensColumn),
	)
}
