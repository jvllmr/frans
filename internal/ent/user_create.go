// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/internal/ent/grant"
	"github.com/jvllmr/frans/internal/ent/session"
	"github.com/jvllmr/frans/internal/ent/ticket"
	"github.com/jvllmr/frans/internal/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (_c *UserCreate) SetUsername(v string) *UserCreate {
	_c.mutation.SetUsername(v)
	return _c
}

// SetFullName sets the "full_name" field.
func (_c *UserCreate) SetFullName(v string) *UserCreate {
	_c.mutation.SetFullName(v)
	return _c
}

// SetEmail sets the "email" field.
func (_c *UserCreate) SetEmail(v string) *UserCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetGroups sets the "groups" field.
func (_c *UserCreate) SetGroups(v []string) *UserCreate {
	_c.mutation.SetGroups(v)
	return _c
}

// SetIsAdmin sets the "is_admin" field.
func (_c *UserCreate) SetIsAdmin(v bool) *UserCreate {
	_c.mutation.SetIsAdmin(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetSubmittedTickets sets the "submitted_tickets" field.
func (_c *UserCreate) SetSubmittedTickets(v int) *UserCreate {
	_c.mutation.SetSubmittedTickets(v)
	return _c
}

// SetNillableSubmittedTickets sets the "submitted_tickets" field if the given value is not nil.
func (_c *UserCreate) SetNillableSubmittedTickets(v *int) *UserCreate {
	if v != nil {
		_c.SetSubmittedTickets(*v)
	}
	return _c
}

// SetSubmittedGrants sets the "submitted_grants" field.
func (_c *UserCreate) SetSubmittedGrants(v int) *UserCreate {
	_c.mutation.SetSubmittedGrants(v)
	return _c
}

// SetNillableSubmittedGrants sets the "submitted_grants" field if the given value is not nil.
func (_c *UserCreate) SetNillableSubmittedGrants(v *int) *UserCreate {
	if v != nil {
		_c.SetSubmittedGrants(*v)
	}
	return _c
}

// SetTotalDataSize sets the "totalDataSize" field.
func (_c *UserCreate) SetTotalDataSize(v int64) *UserCreate {
	_c.mutation.SetTotalDataSize(v)
	return _c
}

// SetNillableTotalDataSize sets the "totalDataSize" field if the given value is not nil.
func (_c *UserCreate) SetNillableTotalDataSize(v *int64) *UserCreate {
	if v != nil {
		_c.SetTotalDataSize(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *UserCreate) SetID(v uuid.UUID) *UserCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (_c *UserCreate) AddSessionIDs(ids ...int) *UserCreate {
	_c.mutation.AddSessionIDs(ids...)
	return _c
}

// AddSessions adds the "sessions" edges to the Session entity.
func (_c *UserCreate) AddSessions(v ...*Session) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSessionIDs(ids...)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (_c *UserCreate) AddTicketIDs(ids ...uuid.UUID) *UserCreate {
	_c.mutation.AddTicketIDs(ids...)
	return _c
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (_c *UserCreate) AddTickets(v ...*Ticket) *UserCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTicketIDs(ids...)
}

// AddGrantIDs adds the "grants" edge to the Grant entity by IDs.
func (_c *UserCreate) AddGrantIDs(ids ...uuid.UUID) *UserCreate {
	_c.mutation.AddGrantIDs(ids...)
	return _c
}

// AddGrants adds the "grants" edges to the Grant entity.
func (_c *UserCreate) AddGrants(v ...*Grant) *UserCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGrantIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.SubmittedTickets(); !ok {
		v := user.DefaultSubmittedTickets
		_c.mutation.SetSubmittedTickets(v)
	}
	if _, ok := _c.mutation.SubmittedGrants(); !ok {
		v := user.DefaultSubmittedGrants
		_c.mutation.SetSubmittedGrants(v)
	}
	if _, ok := _c.mutation.TotalDataSize(); !ok {
		v := user.DefaultTotalDataSize
		_c.mutation.SetTotalDataSize(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if _, ok := _c.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "User.full_name"`)}
	}
	if _, ok := _c.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := _c.mutation.Groups(); !ok {
		return &ValidationError{Name: "groups", err: errors.New(`ent: missing required field "User.groups"`)}
	}
	if _, ok := _c.mutation.IsAdmin(); !ok {
		return &ValidationError{Name: "is_admin", err: errors.New(`ent: missing required field "User.is_admin"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := _c.mutation.SubmittedTickets(); !ok {
		return &ValidationError{Name: "submitted_tickets", err: errors.New(`ent: missing required field "User.submitted_tickets"`)}
	}
	if _, ok := _c.mutation.SubmittedGrants(); !ok {
		return &ValidationError{Name: "submitted_grants", err: errors.New(`ent: missing required field "User.submitted_grants"`)}
	}
	if _, ok := _c.mutation.TotalDataSize(); !ok {
		return &ValidationError{Name: "totalDataSize", err: errors.New(`ent: missing required field "User.totalDataSize"`)}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := _c.mutation.FullName(); ok {
		_spec.SetField(user.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.Groups(); ok {
		_spec.SetField(user.FieldGroups, field.TypeJSON, value)
		_node.Groups = value
	}
	if value, ok := _c.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
		_node.IsAdmin = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.SubmittedTickets(); ok {
		_spec.SetField(user.FieldSubmittedTickets, field.TypeInt, value)
		_node.SubmittedTickets = value
	}
	if value, ok := _c.mutation.SubmittedGrants(); ok {
		_spec.SetField(user.FieldSubmittedGrants, field.TypeInt, value)
		_node.SubmittedGrants = value
	}
	if value, ok := _c.mutation.TotalDataSize(); ok {
		_spec.SetField(user.FieldTotalDataSize, field.TypeInt64, value)
		_node.TotalDataSize = value
	}
	if nodes := _c.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GrantsTable,
			Columns: []string{user.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
