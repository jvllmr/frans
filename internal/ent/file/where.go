// Code generated by ent, DO NOT EDIT.

package file

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.File {
	return predicate.File(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.File {
	return predicate.File(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldName, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v uint64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSize, v))
}

// Sha512 applies equality check predicate on the "sha512" field. It's identical to Sha512EQ.
func Sha512(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSha512, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedAt, v))
}

// LastDownload applies equality check predicate on the "last_download" field. It's identical to LastDownloadEQ.
func LastDownload(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldLastDownload, v))
}

// TimesDownloaded applies equality check predicate on the "times_downloaded" field. It's identical to TimesDownloadedEQ.
func TimesDownloaded(v uint64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldTimesDownloaded, v))
}

// ExpiryType applies equality check predicate on the "expiry_type" field. It's identical to ExpiryTypeEQ.
func ExpiryType(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldExpiryType, v))
}

// ExpiryTotalDays applies equality check predicate on the "expiry_total_days" field. It's identical to ExpiryTotalDaysEQ.
func ExpiryTotalDays(v uint8) predicate.File {
	return predicate.File(sql.FieldEQ(FieldExpiryTotalDays, v))
}

// ExpiryDaysSinceLastDownload applies equality check predicate on the "expiry_days_since_last_download" field. It's identical to ExpiryDaysSinceLastDownloadEQ.
func ExpiryDaysSinceLastDownload(v uint8) predicate.File {
	return predicate.File(sql.FieldEQ(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryTotalDownloads applies equality check predicate on the "expiry_total_downloads" field. It's identical to ExpiryTotalDownloadsEQ.
func ExpiryTotalDownloads(v uint8) predicate.File {
	return predicate.File(sql.FieldEQ(FieldExpiryTotalDownloads, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldName, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v uint64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v uint64) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...uint64) predicate.File {
	return predicate.File(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...uint64) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v uint64) predicate.File {
	return predicate.File(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v uint64) predicate.File {
	return predicate.File(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v uint64) predicate.File {
	return predicate.File(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v uint64) predicate.File {
	return predicate.File(sql.FieldLTE(FieldSize, v))
}

// Sha512EQ applies the EQ predicate on the "sha512" field.
func Sha512EQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldSha512, v))
}

// Sha512NEQ applies the NEQ predicate on the "sha512" field.
func Sha512NEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldSha512, v))
}

// Sha512In applies the In predicate on the "sha512" field.
func Sha512In(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldSha512, vs...))
}

// Sha512NotIn applies the NotIn predicate on the "sha512" field.
func Sha512NotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldSha512, vs...))
}

// Sha512GT applies the GT predicate on the "sha512" field.
func Sha512GT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldSha512, v))
}

// Sha512GTE applies the GTE predicate on the "sha512" field.
func Sha512GTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldSha512, v))
}

// Sha512LT applies the LT predicate on the "sha512" field.
func Sha512LT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldSha512, v))
}

// Sha512LTE applies the LTE predicate on the "sha512" field.
func Sha512LTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldSha512, v))
}

// Sha512Contains applies the Contains predicate on the "sha512" field.
func Sha512Contains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldSha512, v))
}

// Sha512HasPrefix applies the HasPrefix predicate on the "sha512" field.
func Sha512HasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldSha512, v))
}

// Sha512HasSuffix applies the HasSuffix predicate on the "sha512" field.
func Sha512HasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldSha512, v))
}

// Sha512EqualFold applies the EqualFold predicate on the "sha512" field.
func Sha512EqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldSha512, v))
}

// Sha512ContainsFold applies the ContainsFold predicate on the "sha512" field.
func Sha512ContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldSha512, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCreatedAt, v))
}

// LastDownloadEQ applies the EQ predicate on the "last_download" field.
func LastDownloadEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldLastDownload, v))
}

// LastDownloadNEQ applies the NEQ predicate on the "last_download" field.
func LastDownloadNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldLastDownload, v))
}

// LastDownloadIn applies the In predicate on the "last_download" field.
func LastDownloadIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldLastDownload, vs...))
}

// LastDownloadNotIn applies the NotIn predicate on the "last_download" field.
func LastDownloadNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldLastDownload, vs...))
}

// LastDownloadGT applies the GT predicate on the "last_download" field.
func LastDownloadGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldLastDownload, v))
}

// LastDownloadGTE applies the GTE predicate on the "last_download" field.
func LastDownloadGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldLastDownload, v))
}

// LastDownloadLT applies the LT predicate on the "last_download" field.
func LastDownloadLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldLastDownload, v))
}

// LastDownloadLTE applies the LTE predicate on the "last_download" field.
func LastDownloadLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldLastDownload, v))
}

// LastDownloadIsNil applies the IsNil predicate on the "last_download" field.
func LastDownloadIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldLastDownload))
}

// LastDownloadNotNil applies the NotNil predicate on the "last_download" field.
func LastDownloadNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldLastDownload))
}

// TimesDownloadedEQ applies the EQ predicate on the "times_downloaded" field.
func TimesDownloadedEQ(v uint64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldTimesDownloaded, v))
}

// TimesDownloadedNEQ applies the NEQ predicate on the "times_downloaded" field.
func TimesDownloadedNEQ(v uint64) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldTimesDownloaded, v))
}

// TimesDownloadedIn applies the In predicate on the "times_downloaded" field.
func TimesDownloadedIn(vs ...uint64) predicate.File {
	return predicate.File(sql.FieldIn(FieldTimesDownloaded, vs...))
}

// TimesDownloadedNotIn applies the NotIn predicate on the "times_downloaded" field.
func TimesDownloadedNotIn(vs ...uint64) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldTimesDownloaded, vs...))
}

// TimesDownloadedGT applies the GT predicate on the "times_downloaded" field.
func TimesDownloadedGT(v uint64) predicate.File {
	return predicate.File(sql.FieldGT(FieldTimesDownloaded, v))
}

// TimesDownloadedGTE applies the GTE predicate on the "times_downloaded" field.
func TimesDownloadedGTE(v uint64) predicate.File {
	return predicate.File(sql.FieldGTE(FieldTimesDownloaded, v))
}

// TimesDownloadedLT applies the LT predicate on the "times_downloaded" field.
func TimesDownloadedLT(v uint64) predicate.File {
	return predicate.File(sql.FieldLT(FieldTimesDownloaded, v))
}

// TimesDownloadedLTE applies the LTE predicate on the "times_downloaded" field.
func TimesDownloadedLTE(v uint64) predicate.File {
	return predicate.File(sql.FieldLTE(FieldTimesDownloaded, v))
}

// ExpiryTypeEQ applies the EQ predicate on the "expiry_type" field.
func ExpiryTypeEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldExpiryType, v))
}

// ExpiryTypeNEQ applies the NEQ predicate on the "expiry_type" field.
func ExpiryTypeNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldExpiryType, v))
}

// ExpiryTypeIn applies the In predicate on the "expiry_type" field.
func ExpiryTypeIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldExpiryType, vs...))
}

// ExpiryTypeNotIn applies the NotIn predicate on the "expiry_type" field.
func ExpiryTypeNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldExpiryType, vs...))
}

// ExpiryTypeGT applies the GT predicate on the "expiry_type" field.
func ExpiryTypeGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldExpiryType, v))
}

// ExpiryTypeGTE applies the GTE predicate on the "expiry_type" field.
func ExpiryTypeGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldExpiryType, v))
}

// ExpiryTypeLT applies the LT predicate on the "expiry_type" field.
func ExpiryTypeLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldExpiryType, v))
}

// ExpiryTypeLTE applies the LTE predicate on the "expiry_type" field.
func ExpiryTypeLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldExpiryType, v))
}

// ExpiryTypeContains applies the Contains predicate on the "expiry_type" field.
func ExpiryTypeContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldExpiryType, v))
}

// ExpiryTypeHasPrefix applies the HasPrefix predicate on the "expiry_type" field.
func ExpiryTypeHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldExpiryType, v))
}

// ExpiryTypeHasSuffix applies the HasSuffix predicate on the "expiry_type" field.
func ExpiryTypeHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldExpiryType, v))
}

// ExpiryTypeEqualFold applies the EqualFold predicate on the "expiry_type" field.
func ExpiryTypeEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldExpiryType, v))
}

// ExpiryTypeContainsFold applies the ContainsFold predicate on the "expiry_type" field.
func ExpiryTypeContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldExpiryType, v))
}

// ExpiryTotalDaysEQ applies the EQ predicate on the "expiry_total_days" field.
func ExpiryTotalDaysEQ(v uint8) predicate.File {
	return predicate.File(sql.FieldEQ(FieldExpiryTotalDays, v))
}

// ExpiryTotalDaysNEQ applies the NEQ predicate on the "expiry_total_days" field.
func ExpiryTotalDaysNEQ(v uint8) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldExpiryTotalDays, v))
}

// ExpiryTotalDaysIn applies the In predicate on the "expiry_total_days" field.
func ExpiryTotalDaysIn(vs ...uint8) predicate.File {
	return predicate.File(sql.FieldIn(FieldExpiryTotalDays, vs...))
}

// ExpiryTotalDaysNotIn applies the NotIn predicate on the "expiry_total_days" field.
func ExpiryTotalDaysNotIn(vs ...uint8) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldExpiryTotalDays, vs...))
}

// ExpiryTotalDaysGT applies the GT predicate on the "expiry_total_days" field.
func ExpiryTotalDaysGT(v uint8) predicate.File {
	return predicate.File(sql.FieldGT(FieldExpiryTotalDays, v))
}

// ExpiryTotalDaysGTE applies the GTE predicate on the "expiry_total_days" field.
func ExpiryTotalDaysGTE(v uint8) predicate.File {
	return predicate.File(sql.FieldGTE(FieldExpiryTotalDays, v))
}

// ExpiryTotalDaysLT applies the LT predicate on the "expiry_total_days" field.
func ExpiryTotalDaysLT(v uint8) predicate.File {
	return predicate.File(sql.FieldLT(FieldExpiryTotalDays, v))
}

// ExpiryTotalDaysLTE applies the LTE predicate on the "expiry_total_days" field.
func ExpiryTotalDaysLTE(v uint8) predicate.File {
	return predicate.File(sql.FieldLTE(FieldExpiryTotalDays, v))
}

// ExpiryDaysSinceLastDownloadEQ applies the EQ predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadEQ(v uint8) predicate.File {
	return predicate.File(sql.FieldEQ(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryDaysSinceLastDownloadNEQ applies the NEQ predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadNEQ(v uint8) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryDaysSinceLastDownloadIn applies the In predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadIn(vs ...uint8) predicate.File {
	return predicate.File(sql.FieldIn(FieldExpiryDaysSinceLastDownload, vs...))
}

// ExpiryDaysSinceLastDownloadNotIn applies the NotIn predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadNotIn(vs ...uint8) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldExpiryDaysSinceLastDownload, vs...))
}

// ExpiryDaysSinceLastDownloadGT applies the GT predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadGT(v uint8) predicate.File {
	return predicate.File(sql.FieldGT(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryDaysSinceLastDownloadGTE applies the GTE predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadGTE(v uint8) predicate.File {
	return predicate.File(sql.FieldGTE(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryDaysSinceLastDownloadLT applies the LT predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadLT(v uint8) predicate.File {
	return predicate.File(sql.FieldLT(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryDaysSinceLastDownloadLTE applies the LTE predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadLTE(v uint8) predicate.File {
	return predicate.File(sql.FieldLTE(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryTotalDownloadsEQ applies the EQ predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsEQ(v uint8) predicate.File {
	return predicate.File(sql.FieldEQ(FieldExpiryTotalDownloads, v))
}

// ExpiryTotalDownloadsNEQ applies the NEQ predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsNEQ(v uint8) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldExpiryTotalDownloads, v))
}

// ExpiryTotalDownloadsIn applies the In predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsIn(vs ...uint8) predicate.File {
	return predicate.File(sql.FieldIn(FieldExpiryTotalDownloads, vs...))
}

// ExpiryTotalDownloadsNotIn applies the NotIn predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsNotIn(vs ...uint8) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldExpiryTotalDownloads, vs...))
}

// ExpiryTotalDownloadsGT applies the GT predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsGT(v uint8) predicate.File {
	return predicate.File(sql.FieldGT(FieldExpiryTotalDownloads, v))
}

// ExpiryTotalDownloadsGTE applies the GTE predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsGTE(v uint8) predicate.File {
	return predicate.File(sql.FieldGTE(FieldExpiryTotalDownloads, v))
}

// ExpiryTotalDownloadsLT applies the LT predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsLT(v uint8) predicate.File {
	return predicate.File(sql.FieldLT(FieldExpiryTotalDownloads, v))
}

// ExpiryTotalDownloadsLTE applies the LTE predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsLTE(v uint8) predicate.File {
	return predicate.File(sql.FieldLTE(FieldExpiryTotalDownloads, v))
}

// HasTickets applies the HasEdge predicate on the "tickets" edge.
func HasTickets() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TicketsTable, TicketsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTicketsWith applies the HasEdge predicate on the "tickets" edge with a given conditions (other predicates).
func HasTicketsWith(preds ...predicate.Ticket) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newTicketsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGrants applies the HasEdge predicate on the "grants" edge.
func HasGrants() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, GrantsTable, GrantsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGrantsWith applies the HasEdge predicate on the "grants" edge with a given conditions (other predicates).
func HasGrantsWith(preds ...predicate.Grant) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newGrantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.File) predicate.File {
	return predicate.File(sql.NotPredicates(p))
}
