// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldID, id))
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldComment, v))
}

// ExpiryType applies equality check predicate on the "expiryType" field. It's identical to ExpiryTypeEQ.
func ExpiryType(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldExpiryType, v))
}

// HashedPassword applies equality check predicate on the "hashed_password" field. It's identical to HashedPasswordEQ.
func HashedPassword(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldHashedPassword, v))
}

// Salt applies equality check predicate on the "salt" field. It's identical to SaltEQ.
func Salt(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldSalt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreatedAt, v))
}

// ExpiryTotalDays applies equality check predicate on the "expiry_total_days" field. It's identical to ExpiryTotalDaysEQ.
func ExpiryTotalDays(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldExpiryTotalDays, v))
}

// ExpiryDaysSinceLastDownload applies equality check predicate on the "expiry_days_since_last_download" field. It's identical to ExpiryDaysSinceLastDownloadEQ.
func ExpiryDaysSinceLastDownload(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryTotalDownloads applies equality check predicate on the "expiry_total_downloads" field. It's identical to ExpiryTotalDownloadsEQ.
func ExpiryTotalDownloads(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldExpiryTotalDownloads, v))
}

// EmailOnDownload applies equality check predicate on the "email_on_download" field. It's identical to EmailOnDownloadEQ.
func EmailOnDownload(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldEmailOnDownload, v))
}

// CreatorLang applies equality check predicate on the "creator_lang" field. It's identical to CreatorLangEQ.
func CreatorLang(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreatorLang, v))
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldComment, v))
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldComment, v))
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldComment, vs...))
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldComment, vs...))
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldComment, v))
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldComment, v))
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldComment, v))
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldComment, v))
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldComment, v))
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldComment, v))
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldComment, v))
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldIsNull(FieldComment))
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldNotNull(FieldComment))
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldComment, v))
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldComment, v))
}

// ExpiryTypeEQ applies the EQ predicate on the "expiryType" field.
func ExpiryTypeEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldExpiryType, v))
}

// ExpiryTypeNEQ applies the NEQ predicate on the "expiryType" field.
func ExpiryTypeNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldExpiryType, v))
}

// ExpiryTypeIn applies the In predicate on the "expiryType" field.
func ExpiryTypeIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldExpiryType, vs...))
}

// ExpiryTypeNotIn applies the NotIn predicate on the "expiryType" field.
func ExpiryTypeNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldExpiryType, vs...))
}

// ExpiryTypeGT applies the GT predicate on the "expiryType" field.
func ExpiryTypeGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldExpiryType, v))
}

// ExpiryTypeGTE applies the GTE predicate on the "expiryType" field.
func ExpiryTypeGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldExpiryType, v))
}

// ExpiryTypeLT applies the LT predicate on the "expiryType" field.
func ExpiryTypeLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldExpiryType, v))
}

// ExpiryTypeLTE applies the LTE predicate on the "expiryType" field.
func ExpiryTypeLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldExpiryType, v))
}

// ExpiryTypeContains applies the Contains predicate on the "expiryType" field.
func ExpiryTypeContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldExpiryType, v))
}

// ExpiryTypeHasPrefix applies the HasPrefix predicate on the "expiryType" field.
func ExpiryTypeHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldExpiryType, v))
}

// ExpiryTypeHasSuffix applies the HasSuffix predicate on the "expiryType" field.
func ExpiryTypeHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldExpiryType, v))
}

// ExpiryTypeEqualFold applies the EqualFold predicate on the "expiryType" field.
func ExpiryTypeEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldExpiryType, v))
}

// ExpiryTypeContainsFold applies the ContainsFold predicate on the "expiryType" field.
func ExpiryTypeContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldExpiryType, v))
}

// HashedPasswordEQ applies the EQ predicate on the "hashed_password" field.
func HashedPasswordEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldHashedPassword, v))
}

// HashedPasswordNEQ applies the NEQ predicate on the "hashed_password" field.
func HashedPasswordNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldHashedPassword, v))
}

// HashedPasswordIn applies the In predicate on the "hashed_password" field.
func HashedPasswordIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldHashedPassword, vs...))
}

// HashedPasswordNotIn applies the NotIn predicate on the "hashed_password" field.
func HashedPasswordNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldHashedPassword, vs...))
}

// HashedPasswordGT applies the GT predicate on the "hashed_password" field.
func HashedPasswordGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldHashedPassword, v))
}

// HashedPasswordGTE applies the GTE predicate on the "hashed_password" field.
func HashedPasswordGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldHashedPassword, v))
}

// HashedPasswordLT applies the LT predicate on the "hashed_password" field.
func HashedPasswordLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldHashedPassword, v))
}

// HashedPasswordLTE applies the LTE predicate on the "hashed_password" field.
func HashedPasswordLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldHashedPassword, v))
}

// HashedPasswordContains applies the Contains predicate on the "hashed_password" field.
func HashedPasswordContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldHashedPassword, v))
}

// HashedPasswordHasPrefix applies the HasPrefix predicate on the "hashed_password" field.
func HashedPasswordHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldHashedPassword, v))
}

// HashedPasswordHasSuffix applies the HasSuffix predicate on the "hashed_password" field.
func HashedPasswordHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldHashedPassword, v))
}

// HashedPasswordEqualFold applies the EqualFold predicate on the "hashed_password" field.
func HashedPasswordEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldHashedPassword, v))
}

// HashedPasswordContainsFold applies the ContainsFold predicate on the "hashed_password" field.
func HashedPasswordContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldHashedPassword, v))
}

// SaltEQ applies the EQ predicate on the "salt" field.
func SaltEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldSalt, v))
}

// SaltNEQ applies the NEQ predicate on the "salt" field.
func SaltNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldSalt, v))
}

// SaltIn applies the In predicate on the "salt" field.
func SaltIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldSalt, vs...))
}

// SaltNotIn applies the NotIn predicate on the "salt" field.
func SaltNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldSalt, vs...))
}

// SaltGT applies the GT predicate on the "salt" field.
func SaltGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldSalt, v))
}

// SaltGTE applies the GTE predicate on the "salt" field.
func SaltGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldSalt, v))
}

// SaltLT applies the LT predicate on the "salt" field.
func SaltLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldSalt, v))
}

// SaltLTE applies the LTE predicate on the "salt" field.
func SaltLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldSalt, v))
}

// SaltContains applies the Contains predicate on the "salt" field.
func SaltContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldSalt, v))
}

// SaltHasPrefix applies the HasPrefix predicate on the "salt" field.
func SaltHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldSalt, v))
}

// SaltHasSuffix applies the HasSuffix predicate on the "salt" field.
func SaltHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldSalt, v))
}

// SaltEqualFold applies the EqualFold predicate on the "salt" field.
func SaltEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldSalt, v))
}

// SaltContainsFold applies the ContainsFold predicate on the "salt" field.
func SaltContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldSalt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldCreatedAt, v))
}

// ExpiryTotalDaysEQ applies the EQ predicate on the "expiry_total_days" field.
func ExpiryTotalDaysEQ(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldExpiryTotalDays, v))
}

// ExpiryTotalDaysNEQ applies the NEQ predicate on the "expiry_total_days" field.
func ExpiryTotalDaysNEQ(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldExpiryTotalDays, v))
}

// ExpiryTotalDaysIn applies the In predicate on the "expiry_total_days" field.
func ExpiryTotalDaysIn(vs ...uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldExpiryTotalDays, vs...))
}

// ExpiryTotalDaysNotIn applies the NotIn predicate on the "expiry_total_days" field.
func ExpiryTotalDaysNotIn(vs ...uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldExpiryTotalDays, vs...))
}

// ExpiryTotalDaysGT applies the GT predicate on the "expiry_total_days" field.
func ExpiryTotalDaysGT(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldExpiryTotalDays, v))
}

// ExpiryTotalDaysGTE applies the GTE predicate on the "expiry_total_days" field.
func ExpiryTotalDaysGTE(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldExpiryTotalDays, v))
}

// ExpiryTotalDaysLT applies the LT predicate on the "expiry_total_days" field.
func ExpiryTotalDaysLT(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldExpiryTotalDays, v))
}

// ExpiryTotalDaysLTE applies the LTE predicate on the "expiry_total_days" field.
func ExpiryTotalDaysLTE(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldExpiryTotalDays, v))
}

// ExpiryDaysSinceLastDownloadEQ applies the EQ predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadEQ(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryDaysSinceLastDownloadNEQ applies the NEQ predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadNEQ(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryDaysSinceLastDownloadIn applies the In predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadIn(vs ...uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldExpiryDaysSinceLastDownload, vs...))
}

// ExpiryDaysSinceLastDownloadNotIn applies the NotIn predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadNotIn(vs ...uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldExpiryDaysSinceLastDownload, vs...))
}

// ExpiryDaysSinceLastDownloadGT applies the GT predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadGT(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryDaysSinceLastDownloadGTE applies the GTE predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadGTE(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryDaysSinceLastDownloadLT applies the LT predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadLT(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryDaysSinceLastDownloadLTE applies the LTE predicate on the "expiry_days_since_last_download" field.
func ExpiryDaysSinceLastDownloadLTE(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldExpiryDaysSinceLastDownload, v))
}

// ExpiryTotalDownloadsEQ applies the EQ predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsEQ(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldExpiryTotalDownloads, v))
}

// ExpiryTotalDownloadsNEQ applies the NEQ predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsNEQ(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldExpiryTotalDownloads, v))
}

// ExpiryTotalDownloadsIn applies the In predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsIn(vs ...uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldExpiryTotalDownloads, vs...))
}

// ExpiryTotalDownloadsNotIn applies the NotIn predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsNotIn(vs ...uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldExpiryTotalDownloads, vs...))
}

// ExpiryTotalDownloadsGT applies the GT predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsGT(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldExpiryTotalDownloads, v))
}

// ExpiryTotalDownloadsGTE applies the GTE predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsGTE(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldExpiryTotalDownloads, v))
}

// ExpiryTotalDownloadsLT applies the LT predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsLT(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldExpiryTotalDownloads, v))
}

// ExpiryTotalDownloadsLTE applies the LTE predicate on the "expiry_total_downloads" field.
func ExpiryTotalDownloadsLTE(v uint8) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldExpiryTotalDownloads, v))
}

// EmailOnDownloadEQ applies the EQ predicate on the "email_on_download" field.
func EmailOnDownloadEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldEmailOnDownload, v))
}

// EmailOnDownloadNEQ applies the NEQ predicate on the "email_on_download" field.
func EmailOnDownloadNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldEmailOnDownload, v))
}

// EmailOnDownloadIn applies the In predicate on the "email_on_download" field.
func EmailOnDownloadIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldEmailOnDownload, vs...))
}

// EmailOnDownloadNotIn applies the NotIn predicate on the "email_on_download" field.
func EmailOnDownloadNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldEmailOnDownload, vs...))
}

// EmailOnDownloadGT applies the GT predicate on the "email_on_download" field.
func EmailOnDownloadGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldEmailOnDownload, v))
}

// EmailOnDownloadGTE applies the GTE predicate on the "email_on_download" field.
func EmailOnDownloadGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldEmailOnDownload, v))
}

// EmailOnDownloadLT applies the LT predicate on the "email_on_download" field.
func EmailOnDownloadLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldEmailOnDownload, v))
}

// EmailOnDownloadLTE applies the LTE predicate on the "email_on_download" field.
func EmailOnDownloadLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldEmailOnDownload, v))
}

// EmailOnDownloadContains applies the Contains predicate on the "email_on_download" field.
func EmailOnDownloadContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldEmailOnDownload, v))
}

// EmailOnDownloadHasPrefix applies the HasPrefix predicate on the "email_on_download" field.
func EmailOnDownloadHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldEmailOnDownload, v))
}

// EmailOnDownloadHasSuffix applies the HasSuffix predicate on the "email_on_download" field.
func EmailOnDownloadHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldEmailOnDownload, v))
}

// EmailOnDownloadIsNil applies the IsNil predicate on the "email_on_download" field.
func EmailOnDownloadIsNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldIsNull(FieldEmailOnDownload))
}

// EmailOnDownloadNotNil applies the NotNil predicate on the "email_on_download" field.
func EmailOnDownloadNotNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldNotNull(FieldEmailOnDownload))
}

// EmailOnDownloadEqualFold applies the EqualFold predicate on the "email_on_download" field.
func EmailOnDownloadEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldEmailOnDownload, v))
}

// EmailOnDownloadContainsFold applies the ContainsFold predicate on the "email_on_download" field.
func EmailOnDownloadContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldEmailOnDownload, v))
}

// CreatorLangEQ applies the EQ predicate on the "creator_lang" field.
func CreatorLangEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreatorLang, v))
}

// CreatorLangNEQ applies the NEQ predicate on the "creator_lang" field.
func CreatorLangNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldCreatorLang, v))
}

// CreatorLangIn applies the In predicate on the "creator_lang" field.
func CreatorLangIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldCreatorLang, vs...))
}

// CreatorLangNotIn applies the NotIn predicate on the "creator_lang" field.
func CreatorLangNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldCreatorLang, vs...))
}

// CreatorLangGT applies the GT predicate on the "creator_lang" field.
func CreatorLangGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldCreatorLang, v))
}

// CreatorLangGTE applies the GTE predicate on the "creator_lang" field.
func CreatorLangGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldCreatorLang, v))
}

// CreatorLangLT applies the LT predicate on the "creator_lang" field.
func CreatorLangLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldCreatorLang, v))
}

// CreatorLangLTE applies the LTE predicate on the "creator_lang" field.
func CreatorLangLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldCreatorLang, v))
}

// CreatorLangContains applies the Contains predicate on the "creator_lang" field.
func CreatorLangContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldCreatorLang, v))
}

// CreatorLangHasPrefix applies the HasPrefix predicate on the "creator_lang" field.
func CreatorLangHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldCreatorLang, v))
}

// CreatorLangHasSuffix applies the HasSuffix predicate on the "creator_lang" field.
func CreatorLangHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldCreatorLang, v))
}

// CreatorLangEqualFold applies the EqualFold predicate on the "creator_lang" field.
func CreatorLangEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldCreatorLang, v))
}

// CreatorLangContainsFold applies the ContainsFold predicate on the "creator_lang" field.
func CreatorLangContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldCreatorLang, v))
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.File) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := newFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasShareaccesstokens applies the HasEdge predicate on the "shareaccesstokens" edge.
func HasShareaccesstokens() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ShareaccesstokensTable, ShareaccesstokensColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShareaccesstokensWith applies the HasEdge predicate on the "shareaccesstokens" edge with a given conditions (other predicates).
func HasShareaccesstokensWith(preds ...predicate.ShareAccessToken) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := newShareaccesstokensStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.NotPredicates(p))
}
