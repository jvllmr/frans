// Code generated by ent, DO NOT EDIT.

package shareaccesstoken

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the shareaccesstoken type in the database.
	Label = "share_access_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExpiry holds the string denoting the expiry field in the database.
	FieldExpiry = "expiry"
	// EdgeTicket holds the string denoting the ticket edge name in mutations.
	EdgeTicket = "ticket"
	// EdgeGrant holds the string denoting the grant edge name in mutations.
	EdgeGrant = "grant"
	// Table holds the table name of the shareaccesstoken in the database.
	Table = "share_access_tokens"
	// TicketTable is the table that holds the ticket relation/edge.
	TicketTable = "share_access_tokens"
	// TicketInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	TicketInverseTable = "tickets"
	// TicketColumn is the table column denoting the ticket relation/edge.
	TicketColumn = "ticket_shareaccesstokens"
	// GrantTable is the table that holds the grant relation/edge.
	GrantTable = "share_access_tokens"
	// GrantInverseTable is the table name for the Grant entity.
	// It exists in this package in order to avoid circular dependency with the "grant" package.
	GrantInverseTable = "grants"
	// GrantColumn is the table column denoting the grant relation/edge.
	GrantColumn = "grant_shareaccesstokens"
)

// Columns holds all SQL columns for shareaccesstoken fields.
var Columns = []string{
	FieldID,
	FieldExpiry,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "share_access_tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"grant_shareaccesstokens",
	"ticket_shareaccesstokens",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ShareAccessToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByExpiry orders the results by the expiry field.
func ByExpiry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiry, opts...).ToFunc()
}

// ByTicketField orders the results by ticket field.
func ByTicketField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTicketStep(), sql.OrderByField(field, opts...))
	}
}

// ByGrantField orders the results by grant field.
func ByGrantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGrantStep(), sql.OrderByField(field, opts...))
	}
}
func newTicketStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TicketInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TicketTable, TicketColumn),
	)
}
func newGrantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GrantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GrantTable, GrantColumn),
	)
}
