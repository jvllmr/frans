// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/internal/ent/file"
	"github.com/jvllmr/frans/internal/ent/grant"
	"github.com/jvllmr/frans/internal/ent/predicate"
	"github.com/jvllmr/frans/internal/ent/ticket"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks    []Hook
	mutation *FileMutation
}

// Where appends a list predicates to the FileUpdate builder.
func (_u *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *FileUpdate) SetName(v string) *FileUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *FileUpdate) SetNillableName(v *string) *FileUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSize sets the "size" field.
func (_u *FileUpdate) SetSize(v uint64) *FileUpdate {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *FileUpdate) SetNillableSize(v *uint64) *FileUpdate {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *FileUpdate) AddSize(v int64) *FileUpdate {
	_u.mutation.AddSize(v)
	return _u
}

// SetSha512 sets the "sha512" field.
func (_u *FileUpdate) SetSha512(v string) *FileUpdate {
	_u.mutation.SetSha512(v)
	return _u
}

// SetNillableSha512 sets the "sha512" field if the given value is not nil.
func (_u *FileUpdate) SetNillableSha512(v *string) *FileUpdate {
	if v != nil {
		_u.SetSha512(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *FileUpdate) SetCreatedAt(v time.Time) *FileUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *FileUpdate) SetNillableCreatedAt(v *time.Time) *FileUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetLastDownload sets the "last_download" field.
func (_u *FileUpdate) SetLastDownload(v time.Time) *FileUpdate {
	_u.mutation.SetLastDownload(v)
	return _u
}

// SetNillableLastDownload sets the "last_download" field if the given value is not nil.
func (_u *FileUpdate) SetNillableLastDownload(v *time.Time) *FileUpdate {
	if v != nil {
		_u.SetLastDownload(*v)
	}
	return _u
}

// ClearLastDownload clears the value of the "last_download" field.
func (_u *FileUpdate) ClearLastDownload() *FileUpdate {
	_u.mutation.ClearLastDownload()
	return _u
}

// SetTimesDownloaded sets the "times_downloaded" field.
func (_u *FileUpdate) SetTimesDownloaded(v uint64) *FileUpdate {
	_u.mutation.ResetTimesDownloaded()
	_u.mutation.SetTimesDownloaded(v)
	return _u
}

// SetNillableTimesDownloaded sets the "times_downloaded" field if the given value is not nil.
func (_u *FileUpdate) SetNillableTimesDownloaded(v *uint64) *FileUpdate {
	if v != nil {
		_u.SetTimesDownloaded(*v)
	}
	return _u
}

// AddTimesDownloaded adds value to the "times_downloaded" field.
func (_u *FileUpdate) AddTimesDownloaded(v int64) *FileUpdate {
	_u.mutation.AddTimesDownloaded(v)
	return _u
}

// SetExpiryType sets the "expiry_type" field.
func (_u *FileUpdate) SetExpiryType(v string) *FileUpdate {
	_u.mutation.SetExpiryType(v)
	return _u
}

// SetNillableExpiryType sets the "expiry_type" field if the given value is not nil.
func (_u *FileUpdate) SetNillableExpiryType(v *string) *FileUpdate {
	if v != nil {
		_u.SetExpiryType(*v)
	}
	return _u
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (_u *FileUpdate) SetExpiryTotalDays(v uint8) *FileUpdate {
	_u.mutation.ResetExpiryTotalDays()
	_u.mutation.SetExpiryTotalDays(v)
	return _u
}

// SetNillableExpiryTotalDays sets the "expiry_total_days" field if the given value is not nil.
func (_u *FileUpdate) SetNillableExpiryTotalDays(v *uint8) *FileUpdate {
	if v != nil {
		_u.SetExpiryTotalDays(*v)
	}
	return _u
}

// AddExpiryTotalDays adds value to the "expiry_total_days" field.
func (_u *FileUpdate) AddExpiryTotalDays(v int8) *FileUpdate {
	_u.mutation.AddExpiryTotalDays(v)
	return _u
}

// SetExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field.
func (_u *FileUpdate) SetExpiryDaysSinceLastDownload(v uint8) *FileUpdate {
	_u.mutation.ResetExpiryDaysSinceLastDownload()
	_u.mutation.SetExpiryDaysSinceLastDownload(v)
	return _u
}

// SetNillableExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field if the given value is not nil.
func (_u *FileUpdate) SetNillableExpiryDaysSinceLastDownload(v *uint8) *FileUpdate {
	if v != nil {
		_u.SetExpiryDaysSinceLastDownload(*v)
	}
	return _u
}

// AddExpiryDaysSinceLastDownload adds value to the "expiry_days_since_last_download" field.
func (_u *FileUpdate) AddExpiryDaysSinceLastDownload(v int8) *FileUpdate {
	_u.mutation.AddExpiryDaysSinceLastDownload(v)
	return _u
}

// SetExpiryTotalDownloads sets the "expiry_total_downloads" field.
func (_u *FileUpdate) SetExpiryTotalDownloads(v uint8) *FileUpdate {
	_u.mutation.ResetExpiryTotalDownloads()
	_u.mutation.SetExpiryTotalDownloads(v)
	return _u
}

// SetNillableExpiryTotalDownloads sets the "expiry_total_downloads" field if the given value is not nil.
func (_u *FileUpdate) SetNillableExpiryTotalDownloads(v *uint8) *FileUpdate {
	if v != nil {
		_u.SetExpiryTotalDownloads(*v)
	}
	return _u
}

// AddExpiryTotalDownloads adds value to the "expiry_total_downloads" field.
func (_u *FileUpdate) AddExpiryTotalDownloads(v int8) *FileUpdate {
	_u.mutation.AddExpiryTotalDownloads(v)
	return _u
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (_u *FileUpdate) AddTicketIDs(ids ...uuid.UUID) *FileUpdate {
	_u.mutation.AddTicketIDs(ids...)
	return _u
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (_u *FileUpdate) AddTickets(v ...*Ticket) *FileUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTicketIDs(ids...)
}

// AddGrantIDs adds the "grants" edge to the Grant entity by IDs.
func (_u *FileUpdate) AddGrantIDs(ids ...uuid.UUID) *FileUpdate {
	_u.mutation.AddGrantIDs(ids...)
	return _u
}

// AddGrants adds the "grants" edges to the Grant entity.
func (_u *FileUpdate) AddGrants(v ...*Grant) *FileUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGrantIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (_u *FileUpdate) Mutation() *FileMutation {
	return _u.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (_u *FileUpdate) ClearTickets() *FileUpdate {
	_u.mutation.ClearTickets()
	return _u
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (_u *FileUpdate) RemoveTicketIDs(ids ...uuid.UUID) *FileUpdate {
	_u.mutation.RemoveTicketIDs(ids...)
	return _u
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (_u *FileUpdate) RemoveTickets(v ...*Ticket) *FileUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTicketIDs(ids...)
}

// ClearGrants clears all "grants" edges to the Grant entity.
func (_u *FileUpdate) ClearGrants() *FileUpdate {
	_u.mutation.ClearGrants()
	return _u
}

// RemoveGrantIDs removes the "grants" edge to Grant entities by IDs.
func (_u *FileUpdate) RemoveGrantIDs(ids ...uuid.UUID) *FileUpdate {
	_u.mutation.RemoveGrantIDs(ids...)
	return _u
}

// RemoveGrants removes "grants" edges to Grant entities.
func (_u *FileUpdate) RemoveGrants(v ...*Grant) *FileUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGrantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *FileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.Sha512(); ok {
		_spec.SetField(file.FieldSha512, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(file.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.LastDownload(); ok {
		_spec.SetField(file.FieldLastDownload, field.TypeTime, value)
	}
	if _u.mutation.LastDownloadCleared() {
		_spec.ClearField(file.FieldLastDownload, field.TypeTime)
	}
	if value, ok := _u.mutation.TimesDownloaded(); ok {
		_spec.SetField(file.FieldTimesDownloaded, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedTimesDownloaded(); ok {
		_spec.AddField(file.FieldTimesDownloaded, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.ExpiryType(); ok {
		_spec.SetField(file.FieldExpiryType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpiryTotalDays(); ok {
		_spec.SetField(file.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalDays(); ok {
		_spec.AddField(file.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryDaysSinceLastDownload(); ok {
		_spec.SetField(file.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryDaysSinceLastDownload(); ok {
		_spec.AddField(file.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryTotalDownloads(); ok {
		_spec.SetField(file.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalDownloads(); ok {
		_spec.AddField(file.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if _u.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TicketsTable,
			Columns: file.TicketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !_u.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TicketsTable,
			Columns: file.TicketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TicketsTable,
			Columns: file.TicketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GrantsTable,
			Columns: file.GrantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGrantsIDs(); len(nodes) > 0 && !_u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GrantsTable,
			Columns: file.GrantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GrantsTable,
			Columns: file.GrantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileMutation
}

// SetName sets the "name" field.
func (_u *FileUpdateOne) SetName(v string) *FileUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableName(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSize sets the "size" field.
func (_u *FileUpdateOne) SetSize(v uint64) *FileUpdateOne {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableSize(v *uint64) *FileUpdateOne {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *FileUpdateOne) AddSize(v int64) *FileUpdateOne {
	_u.mutation.AddSize(v)
	return _u
}

// SetSha512 sets the "sha512" field.
func (_u *FileUpdateOne) SetSha512(v string) *FileUpdateOne {
	_u.mutation.SetSha512(v)
	return _u
}

// SetNillableSha512 sets the "sha512" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableSha512(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetSha512(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *FileUpdateOne) SetCreatedAt(v time.Time) *FileUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableCreatedAt(v *time.Time) *FileUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetLastDownload sets the "last_download" field.
func (_u *FileUpdateOne) SetLastDownload(v time.Time) *FileUpdateOne {
	_u.mutation.SetLastDownload(v)
	return _u
}

// SetNillableLastDownload sets the "last_download" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableLastDownload(v *time.Time) *FileUpdateOne {
	if v != nil {
		_u.SetLastDownload(*v)
	}
	return _u
}

// ClearLastDownload clears the value of the "last_download" field.
func (_u *FileUpdateOne) ClearLastDownload() *FileUpdateOne {
	_u.mutation.ClearLastDownload()
	return _u
}

// SetTimesDownloaded sets the "times_downloaded" field.
func (_u *FileUpdateOne) SetTimesDownloaded(v uint64) *FileUpdateOne {
	_u.mutation.ResetTimesDownloaded()
	_u.mutation.SetTimesDownloaded(v)
	return _u
}

// SetNillableTimesDownloaded sets the "times_downloaded" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableTimesDownloaded(v *uint64) *FileUpdateOne {
	if v != nil {
		_u.SetTimesDownloaded(*v)
	}
	return _u
}

// AddTimesDownloaded adds value to the "times_downloaded" field.
func (_u *FileUpdateOne) AddTimesDownloaded(v int64) *FileUpdateOne {
	_u.mutation.AddTimesDownloaded(v)
	return _u
}

// SetExpiryType sets the "expiry_type" field.
func (_u *FileUpdateOne) SetExpiryType(v string) *FileUpdateOne {
	_u.mutation.SetExpiryType(v)
	return _u
}

// SetNillableExpiryType sets the "expiry_type" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableExpiryType(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetExpiryType(*v)
	}
	return _u
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (_u *FileUpdateOne) SetExpiryTotalDays(v uint8) *FileUpdateOne {
	_u.mutation.ResetExpiryTotalDays()
	_u.mutation.SetExpiryTotalDays(v)
	return _u
}

// SetNillableExpiryTotalDays sets the "expiry_total_days" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableExpiryTotalDays(v *uint8) *FileUpdateOne {
	if v != nil {
		_u.SetExpiryTotalDays(*v)
	}
	return _u
}

// AddExpiryTotalDays adds value to the "expiry_total_days" field.
func (_u *FileUpdateOne) AddExpiryTotalDays(v int8) *FileUpdateOne {
	_u.mutation.AddExpiryTotalDays(v)
	return _u
}

// SetExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field.
func (_u *FileUpdateOne) SetExpiryDaysSinceLastDownload(v uint8) *FileUpdateOne {
	_u.mutation.ResetExpiryDaysSinceLastDownload()
	_u.mutation.SetExpiryDaysSinceLastDownload(v)
	return _u
}

// SetNillableExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableExpiryDaysSinceLastDownload(v *uint8) *FileUpdateOne {
	if v != nil {
		_u.SetExpiryDaysSinceLastDownload(*v)
	}
	return _u
}

// AddExpiryDaysSinceLastDownload adds value to the "expiry_days_since_last_download" field.
func (_u *FileUpdateOne) AddExpiryDaysSinceLastDownload(v int8) *FileUpdateOne {
	_u.mutation.AddExpiryDaysSinceLastDownload(v)
	return _u
}

// SetExpiryTotalDownloads sets the "expiry_total_downloads" field.
func (_u *FileUpdateOne) SetExpiryTotalDownloads(v uint8) *FileUpdateOne {
	_u.mutation.ResetExpiryTotalDownloads()
	_u.mutation.SetExpiryTotalDownloads(v)
	return _u
}

// SetNillableExpiryTotalDownloads sets the "expiry_total_downloads" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableExpiryTotalDownloads(v *uint8) *FileUpdateOne {
	if v != nil {
		_u.SetExpiryTotalDownloads(*v)
	}
	return _u
}

// AddExpiryTotalDownloads adds value to the "expiry_total_downloads" field.
func (_u *FileUpdateOne) AddExpiryTotalDownloads(v int8) *FileUpdateOne {
	_u.mutation.AddExpiryTotalDownloads(v)
	return _u
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (_u *FileUpdateOne) AddTicketIDs(ids ...uuid.UUID) *FileUpdateOne {
	_u.mutation.AddTicketIDs(ids...)
	return _u
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (_u *FileUpdateOne) AddTickets(v ...*Ticket) *FileUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTicketIDs(ids...)
}

// AddGrantIDs adds the "grants" edge to the Grant entity by IDs.
func (_u *FileUpdateOne) AddGrantIDs(ids ...uuid.UUID) *FileUpdateOne {
	_u.mutation.AddGrantIDs(ids...)
	return _u
}

// AddGrants adds the "grants" edges to the Grant entity.
func (_u *FileUpdateOne) AddGrants(v ...*Grant) *FileUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGrantIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (_u *FileUpdateOne) Mutation() *FileMutation {
	return _u.mutation
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (_u *FileUpdateOne) ClearTickets() *FileUpdateOne {
	_u.mutation.ClearTickets()
	return _u
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (_u *FileUpdateOne) RemoveTicketIDs(ids ...uuid.UUID) *FileUpdateOne {
	_u.mutation.RemoveTicketIDs(ids...)
	return _u
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (_u *FileUpdateOne) RemoveTickets(v ...*Ticket) *FileUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTicketIDs(ids...)
}

// ClearGrants clears all "grants" edges to the Grant entity.
func (_u *FileUpdateOne) ClearGrants() *FileUpdateOne {
	_u.mutation.ClearGrants()
	return _u
}

// RemoveGrantIDs removes the "grants" edge to Grant entities by IDs.
func (_u *FileUpdateOne) RemoveGrantIDs(ids ...uuid.UUID) *FileUpdateOne {
	_u.mutation.RemoveGrantIDs(ids...)
	return _u
}

// RemoveGrants removes "grants" edges to Grant entities.
func (_u *FileUpdateOne) RemoveGrants(v ...*Grant) *FileUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGrantIDs(ids...)
}

// Where appends a list predicates to the FileUpdate builder.
func (_u *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated File entity.
func (_u *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.Sha512(); ok {
		_spec.SetField(file.FieldSha512, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(file.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.LastDownload(); ok {
		_spec.SetField(file.FieldLastDownload, field.TypeTime, value)
	}
	if _u.mutation.LastDownloadCleared() {
		_spec.ClearField(file.FieldLastDownload, field.TypeTime)
	}
	if value, ok := _u.mutation.TimesDownloaded(); ok {
		_spec.SetField(file.FieldTimesDownloaded, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedTimesDownloaded(); ok {
		_spec.AddField(file.FieldTimesDownloaded, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.ExpiryType(); ok {
		_spec.SetField(file.FieldExpiryType, field.TypeString, value)
	}
	if value, ok := _u.mutation.ExpiryTotalDays(); ok {
		_spec.SetField(file.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalDays(); ok {
		_spec.AddField(file.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryDaysSinceLastDownload(); ok {
		_spec.SetField(file.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryDaysSinceLastDownload(); ok {
		_spec.AddField(file.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryTotalDownloads(); ok {
		_spec.SetField(file.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalDownloads(); ok {
		_spec.AddField(file.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if _u.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TicketsTable,
			Columns: file.TicketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !_u.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TicketsTable,
			Columns: file.TicketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TicketsTable,
			Columns: file.TicketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GrantsTable,
			Columns: file.GrantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGrantsIDs(); len(nodes) > 0 && !_u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GrantsTable,
			Columns: file.GrantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GrantsTable,
			Columns: file.GrantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &File{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
