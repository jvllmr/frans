// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jvllmr/frans/internal/ent/filedata"
)

// FileData is the model entity for the FileData schema.
type FileData struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Size holds the value of the "size" field.
	Size uint64 `json:"size,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileDataQuery when eager-loading is set.
	Edges        FileDataEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FileDataEdges holds the relations/edges for other nodes in the graph.
type FileDataEdges struct {
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e FileDataEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e FileDataEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[1] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filedata.FieldSize:
			values[i] = new(sql.NullInt64)
		case filedata.FieldID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileData fields.
func (_m *FileData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filedata.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case filedata.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				_m.Size = uint64(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileData.
// This includes values selected through modifiers, order, etc.
func (_m *FileData) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUsers queries the "users" edge of the FileData entity.
func (_m *FileData) QueryUsers() *UserQuery {
	return NewFileDataClient(_m.config).QueryUsers(_m)
}

// QueryFiles queries the "files" edge of the FileData entity.
func (_m *FileData) QueryFiles() *FileQuery {
	return NewFileDataClient(_m.config).QueryFiles(_m)
}

// Update returns a builder for updating this FileData.
// Note that you need to call FileData.Unwrap() before calling this method if this FileData
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *FileData) Update() *FileDataUpdateOne {
	return NewFileDataClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the FileData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *FileData) Unwrap() *FileData {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileData is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *FileData) String() string {
	var builder strings.Builder
	builder.WriteString("FileData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", _m.Size))
	builder.WriteByte(')')
	return builder.String()
}

// FileDataSlice is a parsable slice of FileData.
type FileDataSlice []*FileData
