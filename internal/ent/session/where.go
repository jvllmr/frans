// Code generated by ent, DO NOT EDIT.

package session

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jvllmr/frans/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// IDToken applies equality check predicate on the "id_token" field. It's identical to IDTokenEQ.
func IDToken(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIDToken, v))
}

// Expire applies equality check predicate on the "expire" field. It's identical to ExpireEQ.
func Expire(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldExpire, v))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldRefreshToken, v))
}

// IDTokenEQ applies the EQ predicate on the "id_token" field.
func IDTokenEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldIDToken, v))
}

// IDTokenNEQ applies the NEQ predicate on the "id_token" field.
func IDTokenNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldIDToken, v))
}

// IDTokenIn applies the In predicate on the "id_token" field.
func IDTokenIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldIDToken, vs...))
}

// IDTokenNotIn applies the NotIn predicate on the "id_token" field.
func IDTokenNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldIDToken, vs...))
}

// IDTokenGT applies the GT predicate on the "id_token" field.
func IDTokenGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldIDToken, v))
}

// IDTokenGTE applies the GTE predicate on the "id_token" field.
func IDTokenGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldIDToken, v))
}

// IDTokenLT applies the LT predicate on the "id_token" field.
func IDTokenLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldIDToken, v))
}

// IDTokenLTE applies the LTE predicate on the "id_token" field.
func IDTokenLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldIDToken, v))
}

// IDTokenContains applies the Contains predicate on the "id_token" field.
func IDTokenContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldIDToken, v))
}

// IDTokenHasPrefix applies the HasPrefix predicate on the "id_token" field.
func IDTokenHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldIDToken, v))
}

// IDTokenHasSuffix applies the HasSuffix predicate on the "id_token" field.
func IDTokenHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldIDToken, v))
}

// IDTokenEqualFold applies the EqualFold predicate on the "id_token" field.
func IDTokenEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldIDToken, v))
}

// IDTokenContainsFold applies the ContainsFold predicate on the "id_token" field.
func IDTokenContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldIDToken, v))
}

// ExpireEQ applies the EQ predicate on the "expire" field.
func ExpireEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldExpire, v))
}

// ExpireNEQ applies the NEQ predicate on the "expire" field.
func ExpireNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldExpire, v))
}

// ExpireIn applies the In predicate on the "expire" field.
func ExpireIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldExpire, vs...))
}

// ExpireNotIn applies the NotIn predicate on the "expire" field.
func ExpireNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldExpire, vs...))
}

// ExpireGT applies the GT predicate on the "expire" field.
func ExpireGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldExpire, v))
}

// ExpireGTE applies the GTE predicate on the "expire" field.
func ExpireGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldExpire, v))
}

// ExpireLT applies the LT predicate on the "expire" field.
func ExpireLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldExpire, v))
}

// ExpireLTE applies the LTE predicate on the "expire" field.
func ExpireLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldExpire, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldRefreshToken, v))
}

// RefreshTokenContains applies the Contains predicate on the "refresh_token" field.
func RefreshTokenContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldRefreshToken, v))
}

// RefreshTokenHasPrefix applies the HasPrefix predicate on the "refresh_token" field.
func RefreshTokenHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldRefreshToken, v))
}

// RefreshTokenHasSuffix applies the HasSuffix predicate on the "refresh_token" field.
func RefreshTokenHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldRefreshToken, v))
}

// RefreshTokenEqualFold applies the EqualFold predicate on the "refresh_token" field.
func RefreshTokenEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldRefreshToken, v))
}

// RefreshTokenContainsFold applies the ContainsFold predicate on the "refresh_token" field.
func RefreshTokenContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldRefreshToken, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(sql.NotPredicates(p))
}
