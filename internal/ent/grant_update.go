// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/internal/ent/file"
	"github.com/jvllmr/frans/internal/ent/grant"
	"github.com/jvllmr/frans/internal/ent/predicate"
	"github.com/jvllmr/frans/internal/ent/shareaccesstoken"
	"github.com/jvllmr/frans/internal/ent/user"
)

// GrantUpdate is the builder for updating Grant entities.
type GrantUpdate struct {
	config
	hooks    []Hook
	mutation *GrantMutation
}

// Where appends a list predicates to the GrantUpdate builder.
func (_u *GrantUpdate) Where(ps ...predicate.Grant) *GrantUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetComment sets the "comment" field.
func (_u *GrantUpdate) SetComment(v string) *GrantUpdate {
	_u.mutation.SetComment(v)
	return _u
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableComment(v *string) *GrantUpdate {
	if v != nil {
		_u.SetComment(*v)
	}
	return _u
}

// ClearComment clears the value of the "comment" field.
func (_u *GrantUpdate) ClearComment() *GrantUpdate {
	_u.mutation.ClearComment()
	return _u
}

// SetExpiryType sets the "expiry_type" field.
func (_u *GrantUpdate) SetExpiryType(v string) *GrantUpdate {
	_u.mutation.SetExpiryType(v)
	return _u
}

// SetNillableExpiryType sets the "expiry_type" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableExpiryType(v *string) *GrantUpdate {
	if v != nil {
		_u.SetExpiryType(*v)
	}
	return _u
}

// SetHashedPassword sets the "hashed_password" field.
func (_u *GrantUpdate) SetHashedPassword(v string) *GrantUpdate {
	_u.mutation.SetHashedPassword(v)
	return _u
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableHashedPassword(v *string) *GrantUpdate {
	if v != nil {
		_u.SetHashedPassword(*v)
	}
	return _u
}

// SetSalt sets the "salt" field.
func (_u *GrantUpdate) SetSalt(v string) *GrantUpdate {
	_u.mutation.SetSalt(v)
	return _u
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableSalt(v *string) *GrantUpdate {
	if v != nil {
		_u.SetSalt(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *GrantUpdate) SetCreatedAt(v time.Time) *GrantUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableCreatedAt(v *time.Time) *GrantUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (_u *GrantUpdate) SetExpiryTotalDays(v uint8) *GrantUpdate {
	_u.mutation.ResetExpiryTotalDays()
	_u.mutation.SetExpiryTotalDays(v)
	return _u
}

// SetNillableExpiryTotalDays sets the "expiry_total_days" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableExpiryTotalDays(v *uint8) *GrantUpdate {
	if v != nil {
		_u.SetExpiryTotalDays(*v)
	}
	return _u
}

// AddExpiryTotalDays adds value to the "expiry_total_days" field.
func (_u *GrantUpdate) AddExpiryTotalDays(v int8) *GrantUpdate {
	_u.mutation.AddExpiryTotalDays(v)
	return _u
}

// SetExpiryDaysSinceLastUpload sets the "expiry_days_since_last_upload" field.
func (_u *GrantUpdate) SetExpiryDaysSinceLastUpload(v uint8) *GrantUpdate {
	_u.mutation.ResetExpiryDaysSinceLastUpload()
	_u.mutation.SetExpiryDaysSinceLastUpload(v)
	return _u
}

// SetNillableExpiryDaysSinceLastUpload sets the "expiry_days_since_last_upload" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableExpiryDaysSinceLastUpload(v *uint8) *GrantUpdate {
	if v != nil {
		_u.SetExpiryDaysSinceLastUpload(*v)
	}
	return _u
}

// AddExpiryDaysSinceLastUpload adds value to the "expiry_days_since_last_upload" field.
func (_u *GrantUpdate) AddExpiryDaysSinceLastUpload(v int8) *GrantUpdate {
	_u.mutation.AddExpiryDaysSinceLastUpload(v)
	return _u
}

// SetExpiryTotalUploads sets the "expiry_total_uploads" field.
func (_u *GrantUpdate) SetExpiryTotalUploads(v uint8) *GrantUpdate {
	_u.mutation.ResetExpiryTotalUploads()
	_u.mutation.SetExpiryTotalUploads(v)
	return _u
}

// SetNillableExpiryTotalUploads sets the "expiry_total_uploads" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableExpiryTotalUploads(v *uint8) *GrantUpdate {
	if v != nil {
		_u.SetExpiryTotalUploads(*v)
	}
	return _u
}

// AddExpiryTotalUploads adds value to the "expiry_total_uploads" field.
func (_u *GrantUpdate) AddExpiryTotalUploads(v int8) *GrantUpdate {
	_u.mutation.AddExpiryTotalUploads(v)
	return _u
}

// SetFileExpiryType sets the "file_expiry_type" field.
func (_u *GrantUpdate) SetFileExpiryType(v string) *GrantUpdate {
	_u.mutation.SetFileExpiryType(v)
	return _u
}

// SetNillableFileExpiryType sets the "file_expiry_type" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableFileExpiryType(v *string) *GrantUpdate {
	if v != nil {
		_u.SetFileExpiryType(*v)
	}
	return _u
}

// SetFileExpiryTotalDays sets the "file_expiry_total_days" field.
func (_u *GrantUpdate) SetFileExpiryTotalDays(v uint8) *GrantUpdate {
	_u.mutation.ResetFileExpiryTotalDays()
	_u.mutation.SetFileExpiryTotalDays(v)
	return _u
}

// SetNillableFileExpiryTotalDays sets the "file_expiry_total_days" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableFileExpiryTotalDays(v *uint8) *GrantUpdate {
	if v != nil {
		_u.SetFileExpiryTotalDays(*v)
	}
	return _u
}

// AddFileExpiryTotalDays adds value to the "file_expiry_total_days" field.
func (_u *GrantUpdate) AddFileExpiryTotalDays(v int8) *GrantUpdate {
	_u.mutation.AddFileExpiryTotalDays(v)
	return _u
}

// SetFileExpiryDaysSinceLastDownload sets the "file_expiry_days_since_last_download" field.
func (_u *GrantUpdate) SetFileExpiryDaysSinceLastDownload(v uint8) *GrantUpdate {
	_u.mutation.ResetFileExpiryDaysSinceLastDownload()
	_u.mutation.SetFileExpiryDaysSinceLastDownload(v)
	return _u
}

// SetNillableFileExpiryDaysSinceLastDownload sets the "file_expiry_days_since_last_download" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableFileExpiryDaysSinceLastDownload(v *uint8) *GrantUpdate {
	if v != nil {
		_u.SetFileExpiryDaysSinceLastDownload(*v)
	}
	return _u
}

// AddFileExpiryDaysSinceLastDownload adds value to the "file_expiry_days_since_last_download" field.
func (_u *GrantUpdate) AddFileExpiryDaysSinceLastDownload(v int8) *GrantUpdate {
	_u.mutation.AddFileExpiryDaysSinceLastDownload(v)
	return _u
}

// SetFileExpiryTotalDownloads sets the "file_expiry_total_downloads" field.
func (_u *GrantUpdate) SetFileExpiryTotalDownloads(v uint8) *GrantUpdate {
	_u.mutation.ResetFileExpiryTotalDownloads()
	_u.mutation.SetFileExpiryTotalDownloads(v)
	return _u
}

// SetNillableFileExpiryTotalDownloads sets the "file_expiry_total_downloads" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableFileExpiryTotalDownloads(v *uint8) *GrantUpdate {
	if v != nil {
		_u.SetFileExpiryTotalDownloads(*v)
	}
	return _u
}

// AddFileExpiryTotalDownloads adds value to the "file_expiry_total_downloads" field.
func (_u *GrantUpdate) AddFileExpiryTotalDownloads(v int8) *GrantUpdate {
	_u.mutation.AddFileExpiryTotalDownloads(v)
	return _u
}

// SetLastUpload sets the "last_upload" field.
func (_u *GrantUpdate) SetLastUpload(v time.Time) *GrantUpdate {
	_u.mutation.SetLastUpload(v)
	return _u
}

// SetNillableLastUpload sets the "last_upload" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableLastUpload(v *time.Time) *GrantUpdate {
	if v != nil {
		_u.SetLastUpload(*v)
	}
	return _u
}

// ClearLastUpload clears the value of the "last_upload" field.
func (_u *GrantUpdate) ClearLastUpload() *GrantUpdate {
	_u.mutation.ClearLastUpload()
	return _u
}

// SetTimesUploaded sets the "times_uploaded" field.
func (_u *GrantUpdate) SetTimesUploaded(v uint64) *GrantUpdate {
	_u.mutation.ResetTimesUploaded()
	_u.mutation.SetTimesUploaded(v)
	return _u
}

// SetNillableTimesUploaded sets the "times_uploaded" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableTimesUploaded(v *uint64) *GrantUpdate {
	if v != nil {
		_u.SetTimesUploaded(*v)
	}
	return _u
}

// AddTimesUploaded adds value to the "times_uploaded" field.
func (_u *GrantUpdate) AddTimesUploaded(v int64) *GrantUpdate {
	_u.mutation.AddTimesUploaded(v)
	return _u
}

// SetEmailOnUpload sets the "email_on_upload" field.
func (_u *GrantUpdate) SetEmailOnUpload(v string) *GrantUpdate {
	_u.mutation.SetEmailOnUpload(v)
	return _u
}

// SetNillableEmailOnUpload sets the "email_on_upload" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableEmailOnUpload(v *string) *GrantUpdate {
	if v != nil {
		_u.SetEmailOnUpload(*v)
	}
	return _u
}

// ClearEmailOnUpload clears the value of the "email_on_upload" field.
func (_u *GrantUpdate) ClearEmailOnUpload() *GrantUpdate {
	_u.mutation.ClearEmailOnUpload()
	return _u
}

// SetCreatorLang sets the "creator_lang" field.
func (_u *GrantUpdate) SetCreatorLang(v string) *GrantUpdate {
	_u.mutation.SetCreatorLang(v)
	return _u
}

// SetNillableCreatorLang sets the "creator_lang" field if the given value is not nil.
func (_u *GrantUpdate) SetNillableCreatorLang(v *string) *GrantUpdate {
	if v != nil {
		_u.SetCreatorLang(*v)
	}
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *GrantUpdate) AddFileIDs(ids ...uuid.UUID) *GrantUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *GrantUpdate) AddFiles(v ...*File) *GrantUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *GrantUpdate) SetOwnerID(id uuid.UUID) *GrantUpdate {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (_u *GrantUpdate) SetNillableOwnerID(id *uuid.UUID) *GrantUpdate {
	if id != nil {
		_u = _u.SetOwnerID(*id)
	}
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *GrantUpdate) SetOwner(v *User) *GrantUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddShareaccesstokenIDs adds the "shareaccesstokens" edge to the ShareAccessToken entity by IDs.
func (_u *GrantUpdate) AddShareaccesstokenIDs(ids ...string) *GrantUpdate {
	_u.mutation.AddShareaccesstokenIDs(ids...)
	return _u
}

// AddShareaccesstokens adds the "shareaccesstokens" edges to the ShareAccessToken entity.
func (_u *GrantUpdate) AddShareaccesstokens(v ...*ShareAccessToken) *GrantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddShareaccesstokenIDs(ids...)
}

// Mutation returns the GrantMutation object of the builder.
func (_u *GrantUpdate) Mutation() *GrantMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *GrantUpdate) ClearFiles() *GrantUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *GrantUpdate) RemoveFileIDs(ids ...uuid.UUID) *GrantUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *GrantUpdate) RemoveFiles(v ...*File) *GrantUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *GrantUpdate) ClearOwner() *GrantUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearShareaccesstokens clears all "shareaccesstokens" edges to the ShareAccessToken entity.
func (_u *GrantUpdate) ClearShareaccesstokens() *GrantUpdate {
	_u.mutation.ClearShareaccesstokens()
	return _u
}

// RemoveShareaccesstokenIDs removes the "shareaccesstokens" edge to ShareAccessToken entities by IDs.
func (_u *GrantUpdate) RemoveShareaccesstokenIDs(ids ...string) *GrantUpdate {
	_u.mutation.RemoveShareaccesstokenIDs(ids...)
	return _u
}

// RemoveShareaccesstokens removes "shareaccesstokens" edges to ShareAccessToken entities.
func (_u *GrantUpdate) RemoveShareaccesstokens(v ...*ShareAccessToken) *GrantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveShareaccesstokenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GrantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GrantUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GrantUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GrantUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *GrantUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(grant.Table, grant.Columns, sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Comment(); ok {
		_spec.SetField(grant.FieldComment, field.TypeString, value)
	}
	if _u.mutation.CommentCleared() {
		_spec.ClearField(grant.FieldComment, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiryType(); ok {
		_spec.SetField(grant.FieldExpiryType, field.TypeString, value)
	}
	if value, ok := _u.mutation.HashedPassword(); ok {
		_spec.SetField(grant.FieldHashedPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Salt(); ok {
		_spec.SetField(grant.FieldSalt, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(grant.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ExpiryTotalDays(); ok {
		_spec.SetField(grant.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalDays(); ok {
		_spec.AddField(grant.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryDaysSinceLastUpload(); ok {
		_spec.SetField(grant.FieldExpiryDaysSinceLastUpload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryDaysSinceLastUpload(); ok {
		_spec.AddField(grant.FieldExpiryDaysSinceLastUpload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryTotalUploads(); ok {
		_spec.SetField(grant.FieldExpiryTotalUploads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalUploads(); ok {
		_spec.AddField(grant.FieldExpiryTotalUploads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.FileExpiryType(); ok {
		_spec.SetField(grant.FieldFileExpiryType, field.TypeString, value)
	}
	if value, ok := _u.mutation.FileExpiryTotalDays(); ok {
		_spec.SetField(grant.FieldFileExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedFileExpiryTotalDays(); ok {
		_spec.AddField(grant.FieldFileExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.FileExpiryDaysSinceLastDownload(); ok {
		_spec.SetField(grant.FieldFileExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedFileExpiryDaysSinceLastDownload(); ok {
		_spec.AddField(grant.FieldFileExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.FileExpiryTotalDownloads(); ok {
		_spec.SetField(grant.FieldFileExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedFileExpiryTotalDownloads(); ok {
		_spec.AddField(grant.FieldFileExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.LastUpload(); ok {
		_spec.SetField(grant.FieldLastUpload, field.TypeTime, value)
	}
	if _u.mutation.LastUploadCleared() {
		_spec.ClearField(grant.FieldLastUpload, field.TypeTime)
	}
	if value, ok := _u.mutation.TimesUploaded(); ok {
		_spec.SetField(grant.FieldTimesUploaded, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedTimesUploaded(); ok {
		_spec.AddField(grant.FieldTimesUploaded, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.EmailOnUpload(); ok {
		_spec.SetField(grant.FieldEmailOnUpload, field.TypeString, value)
	}
	if _u.mutation.EmailOnUploadCleared() {
		_spec.ClearField(grant.FieldEmailOnUpload, field.TypeString)
	}
	if value, ok := _u.mutation.CreatorLang(); ok {
		_spec.SetField(grant.FieldCreatorLang, field.TypeString, value)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grant.FilesTable,
			Columns: grant.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grant.FilesTable,
			Columns: grant.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grant.FilesTable,
			Columns: grant.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.OwnerTable,
			Columns: []string{grant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.OwnerTable,
			Columns: []string{grant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ShareaccesstokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ShareaccesstokensTable,
			Columns: []string{grant.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedShareaccesstokensIDs(); len(nodes) > 0 && !_u.mutation.ShareaccesstokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ShareaccesstokensTable,
			Columns: []string{grant.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ShareaccesstokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ShareaccesstokensTable,
			Columns: []string{grant.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GrantUpdateOne is the builder for updating a single Grant entity.
type GrantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GrantMutation
}

// SetComment sets the "comment" field.
func (_u *GrantUpdateOne) SetComment(v string) *GrantUpdateOne {
	_u.mutation.SetComment(v)
	return _u
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableComment(v *string) *GrantUpdateOne {
	if v != nil {
		_u.SetComment(*v)
	}
	return _u
}

// ClearComment clears the value of the "comment" field.
func (_u *GrantUpdateOne) ClearComment() *GrantUpdateOne {
	_u.mutation.ClearComment()
	return _u
}

// SetExpiryType sets the "expiry_type" field.
func (_u *GrantUpdateOne) SetExpiryType(v string) *GrantUpdateOne {
	_u.mutation.SetExpiryType(v)
	return _u
}

// SetNillableExpiryType sets the "expiry_type" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableExpiryType(v *string) *GrantUpdateOne {
	if v != nil {
		_u.SetExpiryType(*v)
	}
	return _u
}

// SetHashedPassword sets the "hashed_password" field.
func (_u *GrantUpdateOne) SetHashedPassword(v string) *GrantUpdateOne {
	_u.mutation.SetHashedPassword(v)
	return _u
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableHashedPassword(v *string) *GrantUpdateOne {
	if v != nil {
		_u.SetHashedPassword(*v)
	}
	return _u
}

// SetSalt sets the "salt" field.
func (_u *GrantUpdateOne) SetSalt(v string) *GrantUpdateOne {
	_u.mutation.SetSalt(v)
	return _u
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableSalt(v *string) *GrantUpdateOne {
	if v != nil {
		_u.SetSalt(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *GrantUpdateOne) SetCreatedAt(v time.Time) *GrantUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableCreatedAt(v *time.Time) *GrantUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (_u *GrantUpdateOne) SetExpiryTotalDays(v uint8) *GrantUpdateOne {
	_u.mutation.ResetExpiryTotalDays()
	_u.mutation.SetExpiryTotalDays(v)
	return _u
}

// SetNillableExpiryTotalDays sets the "expiry_total_days" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableExpiryTotalDays(v *uint8) *GrantUpdateOne {
	if v != nil {
		_u.SetExpiryTotalDays(*v)
	}
	return _u
}

// AddExpiryTotalDays adds value to the "expiry_total_days" field.
func (_u *GrantUpdateOne) AddExpiryTotalDays(v int8) *GrantUpdateOne {
	_u.mutation.AddExpiryTotalDays(v)
	return _u
}

// SetExpiryDaysSinceLastUpload sets the "expiry_days_since_last_upload" field.
func (_u *GrantUpdateOne) SetExpiryDaysSinceLastUpload(v uint8) *GrantUpdateOne {
	_u.mutation.ResetExpiryDaysSinceLastUpload()
	_u.mutation.SetExpiryDaysSinceLastUpload(v)
	return _u
}

// SetNillableExpiryDaysSinceLastUpload sets the "expiry_days_since_last_upload" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableExpiryDaysSinceLastUpload(v *uint8) *GrantUpdateOne {
	if v != nil {
		_u.SetExpiryDaysSinceLastUpload(*v)
	}
	return _u
}

// AddExpiryDaysSinceLastUpload adds value to the "expiry_days_since_last_upload" field.
func (_u *GrantUpdateOne) AddExpiryDaysSinceLastUpload(v int8) *GrantUpdateOne {
	_u.mutation.AddExpiryDaysSinceLastUpload(v)
	return _u
}

// SetExpiryTotalUploads sets the "expiry_total_uploads" field.
func (_u *GrantUpdateOne) SetExpiryTotalUploads(v uint8) *GrantUpdateOne {
	_u.mutation.ResetExpiryTotalUploads()
	_u.mutation.SetExpiryTotalUploads(v)
	return _u
}

// SetNillableExpiryTotalUploads sets the "expiry_total_uploads" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableExpiryTotalUploads(v *uint8) *GrantUpdateOne {
	if v != nil {
		_u.SetExpiryTotalUploads(*v)
	}
	return _u
}

// AddExpiryTotalUploads adds value to the "expiry_total_uploads" field.
func (_u *GrantUpdateOne) AddExpiryTotalUploads(v int8) *GrantUpdateOne {
	_u.mutation.AddExpiryTotalUploads(v)
	return _u
}

// SetFileExpiryType sets the "file_expiry_type" field.
func (_u *GrantUpdateOne) SetFileExpiryType(v string) *GrantUpdateOne {
	_u.mutation.SetFileExpiryType(v)
	return _u
}

// SetNillableFileExpiryType sets the "file_expiry_type" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableFileExpiryType(v *string) *GrantUpdateOne {
	if v != nil {
		_u.SetFileExpiryType(*v)
	}
	return _u
}

// SetFileExpiryTotalDays sets the "file_expiry_total_days" field.
func (_u *GrantUpdateOne) SetFileExpiryTotalDays(v uint8) *GrantUpdateOne {
	_u.mutation.ResetFileExpiryTotalDays()
	_u.mutation.SetFileExpiryTotalDays(v)
	return _u
}

// SetNillableFileExpiryTotalDays sets the "file_expiry_total_days" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableFileExpiryTotalDays(v *uint8) *GrantUpdateOne {
	if v != nil {
		_u.SetFileExpiryTotalDays(*v)
	}
	return _u
}

// AddFileExpiryTotalDays adds value to the "file_expiry_total_days" field.
func (_u *GrantUpdateOne) AddFileExpiryTotalDays(v int8) *GrantUpdateOne {
	_u.mutation.AddFileExpiryTotalDays(v)
	return _u
}

// SetFileExpiryDaysSinceLastDownload sets the "file_expiry_days_since_last_download" field.
func (_u *GrantUpdateOne) SetFileExpiryDaysSinceLastDownload(v uint8) *GrantUpdateOne {
	_u.mutation.ResetFileExpiryDaysSinceLastDownload()
	_u.mutation.SetFileExpiryDaysSinceLastDownload(v)
	return _u
}

// SetNillableFileExpiryDaysSinceLastDownload sets the "file_expiry_days_since_last_download" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableFileExpiryDaysSinceLastDownload(v *uint8) *GrantUpdateOne {
	if v != nil {
		_u.SetFileExpiryDaysSinceLastDownload(*v)
	}
	return _u
}

// AddFileExpiryDaysSinceLastDownload adds value to the "file_expiry_days_since_last_download" field.
func (_u *GrantUpdateOne) AddFileExpiryDaysSinceLastDownload(v int8) *GrantUpdateOne {
	_u.mutation.AddFileExpiryDaysSinceLastDownload(v)
	return _u
}

// SetFileExpiryTotalDownloads sets the "file_expiry_total_downloads" field.
func (_u *GrantUpdateOne) SetFileExpiryTotalDownloads(v uint8) *GrantUpdateOne {
	_u.mutation.ResetFileExpiryTotalDownloads()
	_u.mutation.SetFileExpiryTotalDownloads(v)
	return _u
}

// SetNillableFileExpiryTotalDownloads sets the "file_expiry_total_downloads" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableFileExpiryTotalDownloads(v *uint8) *GrantUpdateOne {
	if v != nil {
		_u.SetFileExpiryTotalDownloads(*v)
	}
	return _u
}

// AddFileExpiryTotalDownloads adds value to the "file_expiry_total_downloads" field.
func (_u *GrantUpdateOne) AddFileExpiryTotalDownloads(v int8) *GrantUpdateOne {
	_u.mutation.AddFileExpiryTotalDownloads(v)
	return _u
}

// SetLastUpload sets the "last_upload" field.
func (_u *GrantUpdateOne) SetLastUpload(v time.Time) *GrantUpdateOne {
	_u.mutation.SetLastUpload(v)
	return _u
}

// SetNillableLastUpload sets the "last_upload" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableLastUpload(v *time.Time) *GrantUpdateOne {
	if v != nil {
		_u.SetLastUpload(*v)
	}
	return _u
}

// ClearLastUpload clears the value of the "last_upload" field.
func (_u *GrantUpdateOne) ClearLastUpload() *GrantUpdateOne {
	_u.mutation.ClearLastUpload()
	return _u
}

// SetTimesUploaded sets the "times_uploaded" field.
func (_u *GrantUpdateOne) SetTimesUploaded(v uint64) *GrantUpdateOne {
	_u.mutation.ResetTimesUploaded()
	_u.mutation.SetTimesUploaded(v)
	return _u
}

// SetNillableTimesUploaded sets the "times_uploaded" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableTimesUploaded(v *uint64) *GrantUpdateOne {
	if v != nil {
		_u.SetTimesUploaded(*v)
	}
	return _u
}

// AddTimesUploaded adds value to the "times_uploaded" field.
func (_u *GrantUpdateOne) AddTimesUploaded(v int64) *GrantUpdateOne {
	_u.mutation.AddTimesUploaded(v)
	return _u
}

// SetEmailOnUpload sets the "email_on_upload" field.
func (_u *GrantUpdateOne) SetEmailOnUpload(v string) *GrantUpdateOne {
	_u.mutation.SetEmailOnUpload(v)
	return _u
}

// SetNillableEmailOnUpload sets the "email_on_upload" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableEmailOnUpload(v *string) *GrantUpdateOne {
	if v != nil {
		_u.SetEmailOnUpload(*v)
	}
	return _u
}

// ClearEmailOnUpload clears the value of the "email_on_upload" field.
func (_u *GrantUpdateOne) ClearEmailOnUpload() *GrantUpdateOne {
	_u.mutation.ClearEmailOnUpload()
	return _u
}

// SetCreatorLang sets the "creator_lang" field.
func (_u *GrantUpdateOne) SetCreatorLang(v string) *GrantUpdateOne {
	_u.mutation.SetCreatorLang(v)
	return _u
}

// SetNillableCreatorLang sets the "creator_lang" field if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableCreatorLang(v *string) *GrantUpdateOne {
	if v != nil {
		_u.SetCreatorLang(*v)
	}
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *GrantUpdateOne) AddFileIDs(ids ...uuid.UUID) *GrantUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *GrantUpdateOne) AddFiles(v ...*File) *GrantUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *GrantUpdateOne) SetOwnerID(id uuid.UUID) *GrantUpdateOne {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (_u *GrantUpdateOne) SetNillableOwnerID(id *uuid.UUID) *GrantUpdateOne {
	if id != nil {
		_u = _u.SetOwnerID(*id)
	}
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *GrantUpdateOne) SetOwner(v *User) *GrantUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddShareaccesstokenIDs adds the "shareaccesstokens" edge to the ShareAccessToken entity by IDs.
func (_u *GrantUpdateOne) AddShareaccesstokenIDs(ids ...string) *GrantUpdateOne {
	_u.mutation.AddShareaccesstokenIDs(ids...)
	return _u
}

// AddShareaccesstokens adds the "shareaccesstokens" edges to the ShareAccessToken entity.
func (_u *GrantUpdateOne) AddShareaccesstokens(v ...*ShareAccessToken) *GrantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddShareaccesstokenIDs(ids...)
}

// Mutation returns the GrantMutation object of the builder.
func (_u *GrantUpdateOne) Mutation() *GrantMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *GrantUpdateOne) ClearFiles() *GrantUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *GrantUpdateOne) RemoveFileIDs(ids ...uuid.UUID) *GrantUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *GrantUpdateOne) RemoveFiles(v ...*File) *GrantUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *GrantUpdateOne) ClearOwner() *GrantUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearShareaccesstokens clears all "shareaccesstokens" edges to the ShareAccessToken entity.
func (_u *GrantUpdateOne) ClearShareaccesstokens() *GrantUpdateOne {
	_u.mutation.ClearShareaccesstokens()
	return _u
}

// RemoveShareaccesstokenIDs removes the "shareaccesstokens" edge to ShareAccessToken entities by IDs.
func (_u *GrantUpdateOne) RemoveShareaccesstokenIDs(ids ...string) *GrantUpdateOne {
	_u.mutation.RemoveShareaccesstokenIDs(ids...)
	return _u
}

// RemoveShareaccesstokens removes "shareaccesstokens" edges to ShareAccessToken entities.
func (_u *GrantUpdateOne) RemoveShareaccesstokens(v ...*ShareAccessToken) *GrantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveShareaccesstokenIDs(ids...)
}

// Where appends a list predicates to the GrantUpdate builder.
func (_u *GrantUpdateOne) Where(ps ...predicate.Grant) *GrantUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GrantUpdateOne) Select(field string, fields ...string) *GrantUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Grant entity.
func (_u *GrantUpdateOne) Save(ctx context.Context) (*Grant, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GrantUpdateOne) SaveX(ctx context.Context) *Grant {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GrantUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GrantUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *GrantUpdateOne) sqlSave(ctx context.Context) (_node *Grant, err error) {
	_spec := sqlgraph.NewUpdateSpec(grant.Table, grant.Columns, sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Grant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grant.FieldID)
		for _, f := range fields {
			if !grant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Comment(); ok {
		_spec.SetField(grant.FieldComment, field.TypeString, value)
	}
	if _u.mutation.CommentCleared() {
		_spec.ClearField(grant.FieldComment, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiryType(); ok {
		_spec.SetField(grant.FieldExpiryType, field.TypeString, value)
	}
	if value, ok := _u.mutation.HashedPassword(); ok {
		_spec.SetField(grant.FieldHashedPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Salt(); ok {
		_spec.SetField(grant.FieldSalt, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(grant.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ExpiryTotalDays(); ok {
		_spec.SetField(grant.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalDays(); ok {
		_spec.AddField(grant.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryDaysSinceLastUpload(); ok {
		_spec.SetField(grant.FieldExpiryDaysSinceLastUpload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryDaysSinceLastUpload(); ok {
		_spec.AddField(grant.FieldExpiryDaysSinceLastUpload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryTotalUploads(); ok {
		_spec.SetField(grant.FieldExpiryTotalUploads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalUploads(); ok {
		_spec.AddField(grant.FieldExpiryTotalUploads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.FileExpiryType(); ok {
		_spec.SetField(grant.FieldFileExpiryType, field.TypeString, value)
	}
	if value, ok := _u.mutation.FileExpiryTotalDays(); ok {
		_spec.SetField(grant.FieldFileExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedFileExpiryTotalDays(); ok {
		_spec.AddField(grant.FieldFileExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.FileExpiryDaysSinceLastDownload(); ok {
		_spec.SetField(grant.FieldFileExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedFileExpiryDaysSinceLastDownload(); ok {
		_spec.AddField(grant.FieldFileExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.FileExpiryTotalDownloads(); ok {
		_spec.SetField(grant.FieldFileExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedFileExpiryTotalDownloads(); ok {
		_spec.AddField(grant.FieldFileExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.LastUpload(); ok {
		_spec.SetField(grant.FieldLastUpload, field.TypeTime, value)
	}
	if _u.mutation.LastUploadCleared() {
		_spec.ClearField(grant.FieldLastUpload, field.TypeTime)
	}
	if value, ok := _u.mutation.TimesUploaded(); ok {
		_spec.SetField(grant.FieldTimesUploaded, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedTimesUploaded(); ok {
		_spec.AddField(grant.FieldTimesUploaded, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.EmailOnUpload(); ok {
		_spec.SetField(grant.FieldEmailOnUpload, field.TypeString, value)
	}
	if _u.mutation.EmailOnUploadCleared() {
		_spec.ClearField(grant.FieldEmailOnUpload, field.TypeString)
	}
	if value, ok := _u.mutation.CreatorLang(); ok {
		_spec.SetField(grant.FieldCreatorLang, field.TypeString, value)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grant.FilesTable,
			Columns: grant.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grant.FilesTable,
			Columns: grant.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grant.FilesTable,
			Columns: grant.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.OwnerTable,
			Columns: []string{grant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.OwnerTable,
			Columns: []string{grant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ShareaccesstokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ShareaccesstokensTable,
			Columns: []string{grant.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedShareaccesstokensIDs(); len(nodes) > 0 && !_u.mutation.ShareaccesstokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ShareaccesstokensTable,
			Columns: []string{grant.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ShareaccesstokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ShareaccesstokensTable,
			Columns: []string{grant.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Grant{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
