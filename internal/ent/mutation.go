// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/internal/ent/file"
	"github.com/jvllmr/frans/internal/ent/grant"
	"github.com/jvllmr/frans/internal/ent/predicate"
	"github.com/jvllmr/frans/internal/ent/session"
	"github.com/jvllmr/frans/internal/ent/shareaccesstoken"
	"github.com/jvllmr/frans/internal/ent/ticket"
	"github.com/jvllmr/frans/internal/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFile             = "File"
	TypeGrant            = "Grant"
	TypeSession          = "Session"
	TypeShareAccessToken = "ShareAccessToken"
	TypeTicket           = "Ticket"
	TypeUser             = "User"
)

// FileMutation represents an operation that mutates the File nodes in the graph.
type FileMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *uuid.UUID
	name                               *string
	size                               *uint64
	addsize                            *int64
	sha512                             *string
	created_at                         *time.Time
	last_download                      *time.Time
	times_downloaded                   *uint64
	addtimes_downloaded                *int64
	expiry_type                        *string
	expiry_total_days                  *uint8
	addexpiry_total_days               *int8
	expiry_days_since_last_download    *uint8
	addexpiry_days_since_last_download *int8
	expiry_total_downloads             *uint8
	addexpiry_total_downloads          *int8
	clearedFields                      map[string]struct{}
	tickets                            map[uuid.UUID]struct{}
	removedtickets                     map[uuid.UUID]struct{}
	clearedtickets                     bool
	grants                             map[uuid.UUID]struct{}
	removedgrants                      map[uuid.UUID]struct{}
	clearedgrants                      bool
	done                               bool
	oldValue                           func(context.Context) (*File, error)
	predicates                         []predicate.File
}

var _ ent.Mutation = (*FileMutation)(nil)

// fileOption allows management of the mutation configuration using functional options.
type fileOption func(*FileMutation)

// newFileMutation creates new mutation for the File entity.
func newFileMutation(c config, op Op, opts ...fileOption) *FileMutation {
	m := &FileMutation{
		config:        c,
		op:            op,
		typ:           TypeFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileID sets the ID field of the mutation.
func withFileID(id uuid.UUID) fileOption {
	return func(m *FileMutation) {
		var (
			err   error
			once  sync.Once
			value *File
		)
		m.oldValue = func(ctx context.Context) (*File, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().File.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFile sets the old File of the mutation.
func withFile(node *File) fileOption {
	return func(m *FileMutation) {
		m.oldValue = func(context.Context) (*File, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of File entities.
func (m *FileMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().File.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FileMutation) ResetName() {
	m.name = nil
}

// SetSize sets the "size" field.
func (m *FileMutation) SetSize(u uint64) {
	m.size = &u
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *FileMutation) Size() (r uint64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldSize(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds u to the "size" field.
func (m *FileMutation) AddSize(u int64) {
	if m.addsize != nil {
		*m.addsize += u
	} else {
		m.addsize = &u
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *FileMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *FileMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetSha512 sets the "sha512" field.
func (m *FileMutation) SetSha512(s string) {
	m.sha512 = &s
}

// Sha512 returns the value of the "sha512" field in the mutation.
func (m *FileMutation) Sha512() (r string, exists bool) {
	v := m.sha512
	if v == nil {
		return
	}
	return *v, true
}

// OldSha512 returns the old "sha512" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldSha512(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSha512 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSha512 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSha512: %w", err)
	}
	return oldValue.Sha512, nil
}

// ResetSha512 resets all changes to the "sha512" field.
func (m *FileMutation) ResetSha512() {
	m.sha512 = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetLastDownload sets the "last_download" field.
func (m *FileMutation) SetLastDownload(t time.Time) {
	m.last_download = &t
}

// LastDownload returns the value of the "last_download" field in the mutation.
func (m *FileMutation) LastDownload() (r time.Time, exists bool) {
	v := m.last_download
	if v == nil {
		return
	}
	return *v, true
}

// OldLastDownload returns the old "last_download" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldLastDownload(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastDownload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastDownload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastDownload: %w", err)
	}
	return oldValue.LastDownload, nil
}

// ClearLastDownload clears the value of the "last_download" field.
func (m *FileMutation) ClearLastDownload() {
	m.last_download = nil
	m.clearedFields[file.FieldLastDownload] = struct{}{}
}

// LastDownloadCleared returns if the "last_download" field was cleared in this mutation.
func (m *FileMutation) LastDownloadCleared() bool {
	_, ok := m.clearedFields[file.FieldLastDownload]
	return ok
}

// ResetLastDownload resets all changes to the "last_download" field.
func (m *FileMutation) ResetLastDownload() {
	m.last_download = nil
	delete(m.clearedFields, file.FieldLastDownload)
}

// SetTimesDownloaded sets the "times_downloaded" field.
func (m *FileMutation) SetTimesDownloaded(u uint64) {
	m.times_downloaded = &u
	m.addtimes_downloaded = nil
}

// TimesDownloaded returns the value of the "times_downloaded" field in the mutation.
func (m *FileMutation) TimesDownloaded() (r uint64, exists bool) {
	v := m.times_downloaded
	if v == nil {
		return
	}
	return *v, true
}

// OldTimesDownloaded returns the old "times_downloaded" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldTimesDownloaded(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimesDownloaded is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimesDownloaded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimesDownloaded: %w", err)
	}
	return oldValue.TimesDownloaded, nil
}

// AddTimesDownloaded adds u to the "times_downloaded" field.
func (m *FileMutation) AddTimesDownloaded(u int64) {
	if m.addtimes_downloaded != nil {
		*m.addtimes_downloaded += u
	} else {
		m.addtimes_downloaded = &u
	}
}

// AddedTimesDownloaded returns the value that was added to the "times_downloaded" field in this mutation.
func (m *FileMutation) AddedTimesDownloaded() (r int64, exists bool) {
	v := m.addtimes_downloaded
	if v == nil {
		return
	}
	return *v, true
}

// ResetTimesDownloaded resets all changes to the "times_downloaded" field.
func (m *FileMutation) ResetTimesDownloaded() {
	m.times_downloaded = nil
	m.addtimes_downloaded = nil
}

// SetExpiryType sets the "expiry_type" field.
func (m *FileMutation) SetExpiryType(s string) {
	m.expiry_type = &s
}

// ExpiryType returns the value of the "expiry_type" field in the mutation.
func (m *FileMutation) ExpiryType() (r string, exists bool) {
	v := m.expiry_type
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryType returns the old "expiry_type" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldExpiryType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryType: %w", err)
	}
	return oldValue.ExpiryType, nil
}

// ResetExpiryType resets all changes to the "expiry_type" field.
func (m *FileMutation) ResetExpiryType() {
	m.expiry_type = nil
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (m *FileMutation) SetExpiryTotalDays(u uint8) {
	m.expiry_total_days = &u
	m.addexpiry_total_days = nil
}

// ExpiryTotalDays returns the value of the "expiry_total_days" field in the mutation.
func (m *FileMutation) ExpiryTotalDays() (r uint8, exists bool) {
	v := m.expiry_total_days
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryTotalDays returns the old "expiry_total_days" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldExpiryTotalDays(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryTotalDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryTotalDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryTotalDays: %w", err)
	}
	return oldValue.ExpiryTotalDays, nil
}

// AddExpiryTotalDays adds u to the "expiry_total_days" field.
func (m *FileMutation) AddExpiryTotalDays(u int8) {
	if m.addexpiry_total_days != nil {
		*m.addexpiry_total_days += u
	} else {
		m.addexpiry_total_days = &u
	}
}

// AddedExpiryTotalDays returns the value that was added to the "expiry_total_days" field in this mutation.
func (m *FileMutation) AddedExpiryTotalDays() (r int8, exists bool) {
	v := m.addexpiry_total_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiryTotalDays resets all changes to the "expiry_total_days" field.
func (m *FileMutation) ResetExpiryTotalDays() {
	m.expiry_total_days = nil
	m.addexpiry_total_days = nil
}

// SetExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field.
func (m *FileMutation) SetExpiryDaysSinceLastDownload(u uint8) {
	m.expiry_days_since_last_download = &u
	m.addexpiry_days_since_last_download = nil
}

// ExpiryDaysSinceLastDownload returns the value of the "expiry_days_since_last_download" field in the mutation.
func (m *FileMutation) ExpiryDaysSinceLastDownload() (r uint8, exists bool) {
	v := m.expiry_days_since_last_download
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryDaysSinceLastDownload returns the old "expiry_days_since_last_download" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldExpiryDaysSinceLastDownload(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryDaysSinceLastDownload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryDaysSinceLastDownload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryDaysSinceLastDownload: %w", err)
	}
	return oldValue.ExpiryDaysSinceLastDownload, nil
}

// AddExpiryDaysSinceLastDownload adds u to the "expiry_days_since_last_download" field.
func (m *FileMutation) AddExpiryDaysSinceLastDownload(u int8) {
	if m.addexpiry_days_since_last_download != nil {
		*m.addexpiry_days_since_last_download += u
	} else {
		m.addexpiry_days_since_last_download = &u
	}
}

// AddedExpiryDaysSinceLastDownload returns the value that was added to the "expiry_days_since_last_download" field in this mutation.
func (m *FileMutation) AddedExpiryDaysSinceLastDownload() (r int8, exists bool) {
	v := m.addexpiry_days_since_last_download
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiryDaysSinceLastDownload resets all changes to the "expiry_days_since_last_download" field.
func (m *FileMutation) ResetExpiryDaysSinceLastDownload() {
	m.expiry_days_since_last_download = nil
	m.addexpiry_days_since_last_download = nil
}

// SetExpiryTotalDownloads sets the "expiry_total_downloads" field.
func (m *FileMutation) SetExpiryTotalDownloads(u uint8) {
	m.expiry_total_downloads = &u
	m.addexpiry_total_downloads = nil
}

// ExpiryTotalDownloads returns the value of the "expiry_total_downloads" field in the mutation.
func (m *FileMutation) ExpiryTotalDownloads() (r uint8, exists bool) {
	v := m.expiry_total_downloads
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryTotalDownloads returns the old "expiry_total_downloads" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldExpiryTotalDownloads(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryTotalDownloads is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryTotalDownloads requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryTotalDownloads: %w", err)
	}
	return oldValue.ExpiryTotalDownloads, nil
}

// AddExpiryTotalDownloads adds u to the "expiry_total_downloads" field.
func (m *FileMutation) AddExpiryTotalDownloads(u int8) {
	if m.addexpiry_total_downloads != nil {
		*m.addexpiry_total_downloads += u
	} else {
		m.addexpiry_total_downloads = &u
	}
}

// AddedExpiryTotalDownloads returns the value that was added to the "expiry_total_downloads" field in this mutation.
func (m *FileMutation) AddedExpiryTotalDownloads() (r int8, exists bool) {
	v := m.addexpiry_total_downloads
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiryTotalDownloads resets all changes to the "expiry_total_downloads" field.
func (m *FileMutation) ResetExpiryTotalDownloads() {
	m.expiry_total_downloads = nil
	m.addexpiry_total_downloads = nil
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by ids.
func (m *FileMutation) AddTicketIDs(ids ...uuid.UUID) {
	if m.tickets == nil {
		m.tickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tickets[ids[i]] = struct{}{}
	}
}

// ClearTickets clears the "tickets" edge to the Ticket entity.
func (m *FileMutation) ClearTickets() {
	m.clearedtickets = true
}

// TicketsCleared reports if the "tickets" edge to the Ticket entity was cleared.
func (m *FileMutation) TicketsCleared() bool {
	return m.clearedtickets
}

// RemoveTicketIDs removes the "tickets" edge to the Ticket entity by IDs.
func (m *FileMutation) RemoveTicketIDs(ids ...uuid.UUID) {
	if m.removedtickets == nil {
		m.removedtickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tickets, ids[i])
		m.removedtickets[ids[i]] = struct{}{}
	}
}

// RemovedTickets returns the removed IDs of the "tickets" edge to the Ticket entity.
func (m *FileMutation) RemovedTicketsIDs() (ids []uuid.UUID) {
	for id := range m.removedtickets {
		ids = append(ids, id)
	}
	return
}

// TicketsIDs returns the "tickets" edge IDs in the mutation.
func (m *FileMutation) TicketsIDs() (ids []uuid.UUID) {
	for id := range m.tickets {
		ids = append(ids, id)
	}
	return
}

// ResetTickets resets all changes to the "tickets" edge.
func (m *FileMutation) ResetTickets() {
	m.tickets = nil
	m.clearedtickets = false
	m.removedtickets = nil
}

// AddGrantIDs adds the "grants" edge to the Grant entity by ids.
func (m *FileMutation) AddGrantIDs(ids ...uuid.UUID) {
	if m.grants == nil {
		m.grants = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.grants[ids[i]] = struct{}{}
	}
}

// ClearGrants clears the "grants" edge to the Grant entity.
func (m *FileMutation) ClearGrants() {
	m.clearedgrants = true
}

// GrantsCleared reports if the "grants" edge to the Grant entity was cleared.
func (m *FileMutation) GrantsCleared() bool {
	return m.clearedgrants
}

// RemoveGrantIDs removes the "grants" edge to the Grant entity by IDs.
func (m *FileMutation) RemoveGrantIDs(ids ...uuid.UUID) {
	if m.removedgrants == nil {
		m.removedgrants = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.grants, ids[i])
		m.removedgrants[ids[i]] = struct{}{}
	}
}

// RemovedGrants returns the removed IDs of the "grants" edge to the Grant entity.
func (m *FileMutation) RemovedGrantsIDs() (ids []uuid.UUID) {
	for id := range m.removedgrants {
		ids = append(ids, id)
	}
	return
}

// GrantsIDs returns the "grants" edge IDs in the mutation.
func (m *FileMutation) GrantsIDs() (ids []uuid.UUID) {
	for id := range m.grants {
		ids = append(ids, id)
	}
	return
}

// ResetGrants resets all changes to the "grants" edge.
func (m *FileMutation) ResetGrants() {
	m.grants = nil
	m.clearedgrants = false
	m.removedgrants = nil
}

// Where appends a list predicates to the FileMutation builder.
func (m *FileMutation) Where(ps ...predicate.File) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.File, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (File).
func (m *FileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.name != nil {
		fields = append(fields, file.FieldName)
	}
	if m.size != nil {
		fields = append(fields, file.FieldSize)
	}
	if m.sha512 != nil {
		fields = append(fields, file.FieldSha512)
	}
	if m.created_at != nil {
		fields = append(fields, file.FieldCreatedAt)
	}
	if m.last_download != nil {
		fields = append(fields, file.FieldLastDownload)
	}
	if m.times_downloaded != nil {
		fields = append(fields, file.FieldTimesDownloaded)
	}
	if m.expiry_type != nil {
		fields = append(fields, file.FieldExpiryType)
	}
	if m.expiry_total_days != nil {
		fields = append(fields, file.FieldExpiryTotalDays)
	}
	if m.expiry_days_since_last_download != nil {
		fields = append(fields, file.FieldExpiryDaysSinceLastDownload)
	}
	if m.expiry_total_downloads != nil {
		fields = append(fields, file.FieldExpiryTotalDownloads)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case file.FieldName:
		return m.Name()
	case file.FieldSize:
		return m.Size()
	case file.FieldSha512:
		return m.Sha512()
	case file.FieldCreatedAt:
		return m.CreatedAt()
	case file.FieldLastDownload:
		return m.LastDownload()
	case file.FieldTimesDownloaded:
		return m.TimesDownloaded()
	case file.FieldExpiryType:
		return m.ExpiryType()
	case file.FieldExpiryTotalDays:
		return m.ExpiryTotalDays()
	case file.FieldExpiryDaysSinceLastDownload:
		return m.ExpiryDaysSinceLastDownload()
	case file.FieldExpiryTotalDownloads:
		return m.ExpiryTotalDownloads()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case file.FieldName:
		return m.OldName(ctx)
	case file.FieldSize:
		return m.OldSize(ctx)
	case file.FieldSha512:
		return m.OldSha512(ctx)
	case file.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case file.FieldLastDownload:
		return m.OldLastDownload(ctx)
	case file.FieldTimesDownloaded:
		return m.OldTimesDownloaded(ctx)
	case file.FieldExpiryType:
		return m.OldExpiryType(ctx)
	case file.FieldExpiryTotalDays:
		return m.OldExpiryTotalDays(ctx)
	case file.FieldExpiryDaysSinceLastDownload:
		return m.OldExpiryDaysSinceLastDownload(ctx)
	case file.FieldExpiryTotalDownloads:
		return m.OldExpiryTotalDownloads(ctx)
	}
	return nil, fmt.Errorf("unknown File field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case file.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case file.FieldSize:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case file.FieldSha512:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSha512(v)
		return nil
	case file.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case file.FieldLastDownload:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastDownload(v)
		return nil
	case file.FieldTimesDownloaded:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimesDownloaded(v)
		return nil
	case file.FieldExpiryType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryType(v)
		return nil
	case file.FieldExpiryTotalDays:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryTotalDays(v)
		return nil
	case file.FieldExpiryDaysSinceLastDownload:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryDaysSinceLastDownload(v)
		return nil
	case file.FieldExpiryTotalDownloads:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryTotalDownloads(v)
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, file.FieldSize)
	}
	if m.addtimes_downloaded != nil {
		fields = append(fields, file.FieldTimesDownloaded)
	}
	if m.addexpiry_total_days != nil {
		fields = append(fields, file.FieldExpiryTotalDays)
	}
	if m.addexpiry_days_since_last_download != nil {
		fields = append(fields, file.FieldExpiryDaysSinceLastDownload)
	}
	if m.addexpiry_total_downloads != nil {
		fields = append(fields, file.FieldExpiryTotalDownloads)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case file.FieldSize:
		return m.AddedSize()
	case file.FieldTimesDownloaded:
		return m.AddedTimesDownloaded()
	case file.FieldExpiryTotalDays:
		return m.AddedExpiryTotalDays()
	case file.FieldExpiryDaysSinceLastDownload:
		return m.AddedExpiryDaysSinceLastDownload()
	case file.FieldExpiryTotalDownloads:
		return m.AddedExpiryTotalDownloads()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case file.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	case file.FieldTimesDownloaded:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTimesDownloaded(v)
		return nil
	case file.FieldExpiryTotalDays:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiryTotalDays(v)
		return nil
	case file.FieldExpiryDaysSinceLastDownload:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiryDaysSinceLastDownload(v)
		return nil
	case file.FieldExpiryTotalDownloads:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiryTotalDownloads(v)
		return nil
	}
	return fmt.Errorf("unknown File numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(file.FieldLastDownload) {
		fields = append(fields, file.FieldLastDownload)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileMutation) ClearField(name string) error {
	switch name {
	case file.FieldLastDownload:
		m.ClearLastDownload()
		return nil
	}
	return fmt.Errorf("unknown File nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileMutation) ResetField(name string) error {
	switch name {
	case file.FieldName:
		m.ResetName()
		return nil
	case file.FieldSize:
		m.ResetSize()
		return nil
	case file.FieldSha512:
		m.ResetSha512()
		return nil
	case file.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case file.FieldLastDownload:
		m.ResetLastDownload()
		return nil
	case file.FieldTimesDownloaded:
		m.ResetTimesDownloaded()
		return nil
	case file.FieldExpiryType:
		m.ResetExpiryType()
		return nil
	case file.FieldExpiryTotalDays:
		m.ResetExpiryTotalDays()
		return nil
	case file.FieldExpiryDaysSinceLastDownload:
		m.ResetExpiryDaysSinceLastDownload()
		return nil
	case file.FieldExpiryTotalDownloads:
		m.ResetExpiryTotalDownloads()
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tickets != nil {
		edges = append(edges, file.EdgeTickets)
	}
	if m.grants != nil {
		edges = append(edges, file.EdgeGrants)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case file.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.tickets))
		for id := range m.tickets {
			ids = append(ids, id)
		}
		return ids
	case file.EdgeGrants:
		ids := make([]ent.Value, 0, len(m.grants))
		for id := range m.grants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtickets != nil {
		edges = append(edges, file.EdgeTickets)
	}
	if m.removedgrants != nil {
		edges = append(edges, file.EdgeGrants)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case file.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.removedtickets))
		for id := range m.removedtickets {
			ids = append(ids, id)
		}
		return ids
	case file.EdgeGrants:
		ids := make([]ent.Value, 0, len(m.removedgrants))
		for id := range m.removedgrants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtickets {
		edges = append(edges, file.EdgeTickets)
	}
	if m.clearedgrants {
		edges = append(edges, file.EdgeGrants)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileMutation) EdgeCleared(name string) bool {
	switch name {
	case file.EdgeTickets:
		return m.clearedtickets
	case file.EdgeGrants:
		return m.clearedgrants
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown File unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileMutation) ResetEdge(name string) error {
	switch name {
	case file.EdgeTickets:
		m.ResetTickets()
		return nil
	case file.EdgeGrants:
		m.ResetGrants()
		return nil
	}
	return fmt.Errorf("unknown File edge %s", name)
}

// GrantMutation represents an operation that mutates the Grant nodes in the graph.
type GrantMutation struct {
	config
	op                                      Op
	typ                                     string
	id                                      *uuid.UUID
	comment                                 *string
	expiry_type                             *string
	hashed_password                         *string
	salt                                    *string
	created_at                              *time.Time
	expiry_total_days                       *uint8
	addexpiry_total_days                    *int8
	expiry_days_since_last_upload           *uint8
	addexpiry_days_since_last_upload        *int8
	expiry_total_uploads                    *uint8
	addexpiry_total_uploads                 *int8
	file_expiry_type                        *string
	file_expiry_total_days                  *uint8
	addfile_expiry_total_days               *int8
	file_expiry_days_since_last_download    *uint8
	addfile_expiry_days_since_last_download *int8
	file_expiry_total_downloads             *uint8
	addfile_expiry_total_downloads          *int8
	last_upload                             *time.Time
	times_uploaded                          *uint64
	addtimes_uploaded                       *int64
	email_on_upload                         *string
	creator_lang                            *string
	clearedFields                           map[string]struct{}
	files                                   map[uuid.UUID]struct{}
	removedfiles                            map[uuid.UUID]struct{}
	clearedfiles                            bool
	owner                                   *uuid.UUID
	clearedowner                            bool
	shareaccesstokens                       map[string]struct{}
	removedshareaccesstokens                map[string]struct{}
	clearedshareaccesstokens                bool
	done                                    bool
	oldValue                                func(context.Context) (*Grant, error)
	predicates                              []predicate.Grant
}

var _ ent.Mutation = (*GrantMutation)(nil)

// grantOption allows management of the mutation configuration using functional options.
type grantOption func(*GrantMutation)

// newGrantMutation creates new mutation for the Grant entity.
func newGrantMutation(c config, op Op, opts ...grantOption) *GrantMutation {
	m := &GrantMutation{
		config:        c,
		op:            op,
		typ:           TypeGrant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGrantID sets the ID field of the mutation.
func withGrantID(id uuid.UUID) grantOption {
	return func(m *GrantMutation) {
		var (
			err   error
			once  sync.Once
			value *Grant
		)
		m.oldValue = func(ctx context.Context) (*Grant, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Grant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGrant sets the old Grant of the mutation.
func withGrant(node *Grant) grantOption {
	return func(m *GrantMutation) {
		m.oldValue = func(context.Context) (*Grant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GrantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GrantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Grant entities.
func (m *GrantMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GrantMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GrantMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Grant.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetComment sets the "comment" field.
func (m *GrantMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *GrantMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldComment(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *GrantMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[grant.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *GrantMutation) CommentCleared() bool {
	_, ok := m.clearedFields[grant.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *GrantMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, grant.FieldComment)
}

// SetExpiryType sets the "expiry_type" field.
func (m *GrantMutation) SetExpiryType(s string) {
	m.expiry_type = &s
}

// ExpiryType returns the value of the "expiry_type" field in the mutation.
func (m *GrantMutation) ExpiryType() (r string, exists bool) {
	v := m.expiry_type
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryType returns the old "expiry_type" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldExpiryType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryType: %w", err)
	}
	return oldValue.ExpiryType, nil
}

// ResetExpiryType resets all changes to the "expiry_type" field.
func (m *GrantMutation) ResetExpiryType() {
	m.expiry_type = nil
}

// SetHashedPassword sets the "hashed_password" field.
func (m *GrantMutation) SetHashedPassword(s string) {
	m.hashed_password = &s
}

// HashedPassword returns the value of the "hashed_password" field in the mutation.
func (m *GrantMutation) HashedPassword() (r string, exists bool) {
	v := m.hashed_password
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedPassword returns the old "hashed_password" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldHashedPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashedPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashedPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedPassword: %w", err)
	}
	return oldValue.HashedPassword, nil
}

// ResetHashedPassword resets all changes to the "hashed_password" field.
func (m *GrantMutation) ResetHashedPassword() {
	m.hashed_password = nil
}

// SetSalt sets the "salt" field.
func (m *GrantMutation) SetSalt(s string) {
	m.salt = &s
}

// Salt returns the value of the "salt" field in the mutation.
func (m *GrantMutation) Salt() (r string, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldSalt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *GrantMutation) ResetSalt() {
	m.salt = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *GrantMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GrantMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GrantMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (m *GrantMutation) SetExpiryTotalDays(u uint8) {
	m.expiry_total_days = &u
	m.addexpiry_total_days = nil
}

// ExpiryTotalDays returns the value of the "expiry_total_days" field in the mutation.
func (m *GrantMutation) ExpiryTotalDays() (r uint8, exists bool) {
	v := m.expiry_total_days
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryTotalDays returns the old "expiry_total_days" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldExpiryTotalDays(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryTotalDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryTotalDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryTotalDays: %w", err)
	}
	return oldValue.ExpiryTotalDays, nil
}

// AddExpiryTotalDays adds u to the "expiry_total_days" field.
func (m *GrantMutation) AddExpiryTotalDays(u int8) {
	if m.addexpiry_total_days != nil {
		*m.addexpiry_total_days += u
	} else {
		m.addexpiry_total_days = &u
	}
}

// AddedExpiryTotalDays returns the value that was added to the "expiry_total_days" field in this mutation.
func (m *GrantMutation) AddedExpiryTotalDays() (r int8, exists bool) {
	v := m.addexpiry_total_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiryTotalDays resets all changes to the "expiry_total_days" field.
func (m *GrantMutation) ResetExpiryTotalDays() {
	m.expiry_total_days = nil
	m.addexpiry_total_days = nil
}

// SetExpiryDaysSinceLastUpload sets the "expiry_days_since_last_upload" field.
func (m *GrantMutation) SetExpiryDaysSinceLastUpload(u uint8) {
	m.expiry_days_since_last_upload = &u
	m.addexpiry_days_since_last_upload = nil
}

// ExpiryDaysSinceLastUpload returns the value of the "expiry_days_since_last_upload" field in the mutation.
func (m *GrantMutation) ExpiryDaysSinceLastUpload() (r uint8, exists bool) {
	v := m.expiry_days_since_last_upload
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryDaysSinceLastUpload returns the old "expiry_days_since_last_upload" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldExpiryDaysSinceLastUpload(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryDaysSinceLastUpload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryDaysSinceLastUpload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryDaysSinceLastUpload: %w", err)
	}
	return oldValue.ExpiryDaysSinceLastUpload, nil
}

// AddExpiryDaysSinceLastUpload adds u to the "expiry_days_since_last_upload" field.
func (m *GrantMutation) AddExpiryDaysSinceLastUpload(u int8) {
	if m.addexpiry_days_since_last_upload != nil {
		*m.addexpiry_days_since_last_upload += u
	} else {
		m.addexpiry_days_since_last_upload = &u
	}
}

// AddedExpiryDaysSinceLastUpload returns the value that was added to the "expiry_days_since_last_upload" field in this mutation.
func (m *GrantMutation) AddedExpiryDaysSinceLastUpload() (r int8, exists bool) {
	v := m.addexpiry_days_since_last_upload
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiryDaysSinceLastUpload resets all changes to the "expiry_days_since_last_upload" field.
func (m *GrantMutation) ResetExpiryDaysSinceLastUpload() {
	m.expiry_days_since_last_upload = nil
	m.addexpiry_days_since_last_upload = nil
}

// SetExpiryTotalUploads sets the "expiry_total_uploads" field.
func (m *GrantMutation) SetExpiryTotalUploads(u uint8) {
	m.expiry_total_uploads = &u
	m.addexpiry_total_uploads = nil
}

// ExpiryTotalUploads returns the value of the "expiry_total_uploads" field in the mutation.
func (m *GrantMutation) ExpiryTotalUploads() (r uint8, exists bool) {
	v := m.expiry_total_uploads
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryTotalUploads returns the old "expiry_total_uploads" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldExpiryTotalUploads(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryTotalUploads is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryTotalUploads requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryTotalUploads: %w", err)
	}
	return oldValue.ExpiryTotalUploads, nil
}

// AddExpiryTotalUploads adds u to the "expiry_total_uploads" field.
func (m *GrantMutation) AddExpiryTotalUploads(u int8) {
	if m.addexpiry_total_uploads != nil {
		*m.addexpiry_total_uploads += u
	} else {
		m.addexpiry_total_uploads = &u
	}
}

// AddedExpiryTotalUploads returns the value that was added to the "expiry_total_uploads" field in this mutation.
func (m *GrantMutation) AddedExpiryTotalUploads() (r int8, exists bool) {
	v := m.addexpiry_total_uploads
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiryTotalUploads resets all changes to the "expiry_total_uploads" field.
func (m *GrantMutation) ResetExpiryTotalUploads() {
	m.expiry_total_uploads = nil
	m.addexpiry_total_uploads = nil
}

// SetFileExpiryType sets the "file_expiry_type" field.
func (m *GrantMutation) SetFileExpiryType(s string) {
	m.file_expiry_type = &s
}

// FileExpiryType returns the value of the "file_expiry_type" field in the mutation.
func (m *GrantMutation) FileExpiryType() (r string, exists bool) {
	v := m.file_expiry_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFileExpiryType returns the old "file_expiry_type" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldFileExpiryType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileExpiryType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileExpiryType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileExpiryType: %w", err)
	}
	return oldValue.FileExpiryType, nil
}

// ResetFileExpiryType resets all changes to the "file_expiry_type" field.
func (m *GrantMutation) ResetFileExpiryType() {
	m.file_expiry_type = nil
}

// SetFileExpiryTotalDays sets the "file_expiry_total_days" field.
func (m *GrantMutation) SetFileExpiryTotalDays(u uint8) {
	m.file_expiry_total_days = &u
	m.addfile_expiry_total_days = nil
}

// FileExpiryTotalDays returns the value of the "file_expiry_total_days" field in the mutation.
func (m *GrantMutation) FileExpiryTotalDays() (r uint8, exists bool) {
	v := m.file_expiry_total_days
	if v == nil {
		return
	}
	return *v, true
}

// OldFileExpiryTotalDays returns the old "file_expiry_total_days" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldFileExpiryTotalDays(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileExpiryTotalDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileExpiryTotalDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileExpiryTotalDays: %w", err)
	}
	return oldValue.FileExpiryTotalDays, nil
}

// AddFileExpiryTotalDays adds u to the "file_expiry_total_days" field.
func (m *GrantMutation) AddFileExpiryTotalDays(u int8) {
	if m.addfile_expiry_total_days != nil {
		*m.addfile_expiry_total_days += u
	} else {
		m.addfile_expiry_total_days = &u
	}
}

// AddedFileExpiryTotalDays returns the value that was added to the "file_expiry_total_days" field in this mutation.
func (m *GrantMutation) AddedFileExpiryTotalDays() (r int8, exists bool) {
	v := m.addfile_expiry_total_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetFileExpiryTotalDays resets all changes to the "file_expiry_total_days" field.
func (m *GrantMutation) ResetFileExpiryTotalDays() {
	m.file_expiry_total_days = nil
	m.addfile_expiry_total_days = nil
}

// SetFileExpiryDaysSinceLastDownload sets the "file_expiry_days_since_last_download" field.
func (m *GrantMutation) SetFileExpiryDaysSinceLastDownload(u uint8) {
	m.file_expiry_days_since_last_download = &u
	m.addfile_expiry_days_since_last_download = nil
}

// FileExpiryDaysSinceLastDownload returns the value of the "file_expiry_days_since_last_download" field in the mutation.
func (m *GrantMutation) FileExpiryDaysSinceLastDownload() (r uint8, exists bool) {
	v := m.file_expiry_days_since_last_download
	if v == nil {
		return
	}
	return *v, true
}

// OldFileExpiryDaysSinceLastDownload returns the old "file_expiry_days_since_last_download" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldFileExpiryDaysSinceLastDownload(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileExpiryDaysSinceLastDownload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileExpiryDaysSinceLastDownload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileExpiryDaysSinceLastDownload: %w", err)
	}
	return oldValue.FileExpiryDaysSinceLastDownload, nil
}

// AddFileExpiryDaysSinceLastDownload adds u to the "file_expiry_days_since_last_download" field.
func (m *GrantMutation) AddFileExpiryDaysSinceLastDownload(u int8) {
	if m.addfile_expiry_days_since_last_download != nil {
		*m.addfile_expiry_days_since_last_download += u
	} else {
		m.addfile_expiry_days_since_last_download = &u
	}
}

// AddedFileExpiryDaysSinceLastDownload returns the value that was added to the "file_expiry_days_since_last_download" field in this mutation.
func (m *GrantMutation) AddedFileExpiryDaysSinceLastDownload() (r int8, exists bool) {
	v := m.addfile_expiry_days_since_last_download
	if v == nil {
		return
	}
	return *v, true
}

// ResetFileExpiryDaysSinceLastDownload resets all changes to the "file_expiry_days_since_last_download" field.
func (m *GrantMutation) ResetFileExpiryDaysSinceLastDownload() {
	m.file_expiry_days_since_last_download = nil
	m.addfile_expiry_days_since_last_download = nil
}

// SetFileExpiryTotalDownloads sets the "file_expiry_total_downloads" field.
func (m *GrantMutation) SetFileExpiryTotalDownloads(u uint8) {
	m.file_expiry_total_downloads = &u
	m.addfile_expiry_total_downloads = nil
}

// FileExpiryTotalDownloads returns the value of the "file_expiry_total_downloads" field in the mutation.
func (m *GrantMutation) FileExpiryTotalDownloads() (r uint8, exists bool) {
	v := m.file_expiry_total_downloads
	if v == nil {
		return
	}
	return *v, true
}

// OldFileExpiryTotalDownloads returns the old "file_expiry_total_downloads" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldFileExpiryTotalDownloads(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileExpiryTotalDownloads is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileExpiryTotalDownloads requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileExpiryTotalDownloads: %w", err)
	}
	return oldValue.FileExpiryTotalDownloads, nil
}

// AddFileExpiryTotalDownloads adds u to the "file_expiry_total_downloads" field.
func (m *GrantMutation) AddFileExpiryTotalDownloads(u int8) {
	if m.addfile_expiry_total_downloads != nil {
		*m.addfile_expiry_total_downloads += u
	} else {
		m.addfile_expiry_total_downloads = &u
	}
}

// AddedFileExpiryTotalDownloads returns the value that was added to the "file_expiry_total_downloads" field in this mutation.
func (m *GrantMutation) AddedFileExpiryTotalDownloads() (r int8, exists bool) {
	v := m.addfile_expiry_total_downloads
	if v == nil {
		return
	}
	return *v, true
}

// ResetFileExpiryTotalDownloads resets all changes to the "file_expiry_total_downloads" field.
func (m *GrantMutation) ResetFileExpiryTotalDownloads() {
	m.file_expiry_total_downloads = nil
	m.addfile_expiry_total_downloads = nil
}

// SetLastUpload sets the "last_upload" field.
func (m *GrantMutation) SetLastUpload(t time.Time) {
	m.last_upload = &t
}

// LastUpload returns the value of the "last_upload" field in the mutation.
func (m *GrantMutation) LastUpload() (r time.Time, exists bool) {
	v := m.last_upload
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpload returns the old "last_upload" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldLastUpload(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpload: %w", err)
	}
	return oldValue.LastUpload, nil
}

// ClearLastUpload clears the value of the "last_upload" field.
func (m *GrantMutation) ClearLastUpload() {
	m.last_upload = nil
	m.clearedFields[grant.FieldLastUpload] = struct{}{}
}

// LastUploadCleared returns if the "last_upload" field was cleared in this mutation.
func (m *GrantMutation) LastUploadCleared() bool {
	_, ok := m.clearedFields[grant.FieldLastUpload]
	return ok
}

// ResetLastUpload resets all changes to the "last_upload" field.
func (m *GrantMutation) ResetLastUpload() {
	m.last_upload = nil
	delete(m.clearedFields, grant.FieldLastUpload)
}

// SetTimesUploaded sets the "times_uploaded" field.
func (m *GrantMutation) SetTimesUploaded(u uint64) {
	m.times_uploaded = &u
	m.addtimes_uploaded = nil
}

// TimesUploaded returns the value of the "times_uploaded" field in the mutation.
func (m *GrantMutation) TimesUploaded() (r uint64, exists bool) {
	v := m.times_uploaded
	if v == nil {
		return
	}
	return *v, true
}

// OldTimesUploaded returns the old "times_uploaded" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldTimesUploaded(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimesUploaded is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimesUploaded requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimesUploaded: %w", err)
	}
	return oldValue.TimesUploaded, nil
}

// AddTimesUploaded adds u to the "times_uploaded" field.
func (m *GrantMutation) AddTimesUploaded(u int64) {
	if m.addtimes_uploaded != nil {
		*m.addtimes_uploaded += u
	} else {
		m.addtimes_uploaded = &u
	}
}

// AddedTimesUploaded returns the value that was added to the "times_uploaded" field in this mutation.
func (m *GrantMutation) AddedTimesUploaded() (r int64, exists bool) {
	v := m.addtimes_uploaded
	if v == nil {
		return
	}
	return *v, true
}

// ResetTimesUploaded resets all changes to the "times_uploaded" field.
func (m *GrantMutation) ResetTimesUploaded() {
	m.times_uploaded = nil
	m.addtimes_uploaded = nil
}

// SetEmailOnUpload sets the "email_on_upload" field.
func (m *GrantMutation) SetEmailOnUpload(s string) {
	m.email_on_upload = &s
}

// EmailOnUpload returns the value of the "email_on_upload" field in the mutation.
func (m *GrantMutation) EmailOnUpload() (r string, exists bool) {
	v := m.email_on_upload
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailOnUpload returns the old "email_on_upload" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldEmailOnUpload(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailOnUpload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailOnUpload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailOnUpload: %w", err)
	}
	return oldValue.EmailOnUpload, nil
}

// ClearEmailOnUpload clears the value of the "email_on_upload" field.
func (m *GrantMutation) ClearEmailOnUpload() {
	m.email_on_upload = nil
	m.clearedFields[grant.FieldEmailOnUpload] = struct{}{}
}

// EmailOnUploadCleared returns if the "email_on_upload" field was cleared in this mutation.
func (m *GrantMutation) EmailOnUploadCleared() bool {
	_, ok := m.clearedFields[grant.FieldEmailOnUpload]
	return ok
}

// ResetEmailOnUpload resets all changes to the "email_on_upload" field.
func (m *GrantMutation) ResetEmailOnUpload() {
	m.email_on_upload = nil
	delete(m.clearedFields, grant.FieldEmailOnUpload)
}

// SetCreatorLang sets the "creator_lang" field.
func (m *GrantMutation) SetCreatorLang(s string) {
	m.creator_lang = &s
}

// CreatorLang returns the value of the "creator_lang" field in the mutation.
func (m *GrantMutation) CreatorLang() (r string, exists bool) {
	v := m.creator_lang
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatorLang returns the old "creator_lang" field's value of the Grant entity.
// If the Grant object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GrantMutation) OldCreatorLang(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatorLang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatorLang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatorLang: %w", err)
	}
	return oldValue.CreatorLang, nil
}

// ResetCreatorLang resets all changes to the "creator_lang" field.
func (m *GrantMutation) ResetCreatorLang() {
	m.creator_lang = nil
}

// AddFileIDs adds the "files" edge to the File entity by ids.
func (m *GrantMutation) AddFileIDs(ids ...uuid.UUID) {
	if m.files == nil {
		m.files = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.files[ids[i]] = struct{}{}
	}
}

// ClearFiles clears the "files" edge to the File entity.
func (m *GrantMutation) ClearFiles() {
	m.clearedfiles = true
}

// FilesCleared reports if the "files" edge to the File entity was cleared.
func (m *GrantMutation) FilesCleared() bool {
	return m.clearedfiles
}

// RemoveFileIDs removes the "files" edge to the File entity by IDs.
func (m *GrantMutation) RemoveFileIDs(ids ...uuid.UUID) {
	if m.removedfiles == nil {
		m.removedfiles = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.files, ids[i])
		m.removedfiles[ids[i]] = struct{}{}
	}
}

// RemovedFiles returns the removed IDs of the "files" edge to the File entity.
func (m *GrantMutation) RemovedFilesIDs() (ids []uuid.UUID) {
	for id := range m.removedfiles {
		ids = append(ids, id)
	}
	return
}

// FilesIDs returns the "files" edge IDs in the mutation.
func (m *GrantMutation) FilesIDs() (ids []uuid.UUID) {
	for id := range m.files {
		ids = append(ids, id)
	}
	return
}

// ResetFiles resets all changes to the "files" edge.
func (m *GrantMutation) ResetFiles() {
	m.files = nil
	m.clearedfiles = false
	m.removedfiles = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *GrantMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *GrantMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *GrantMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *GrantMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *GrantMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *GrantMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddShareaccesstokenIDs adds the "shareaccesstokens" edge to the ShareAccessToken entity by ids.
func (m *GrantMutation) AddShareaccesstokenIDs(ids ...string) {
	if m.shareaccesstokens == nil {
		m.shareaccesstokens = make(map[string]struct{})
	}
	for i := range ids {
		m.shareaccesstokens[ids[i]] = struct{}{}
	}
}

// ClearShareaccesstokens clears the "shareaccesstokens" edge to the ShareAccessToken entity.
func (m *GrantMutation) ClearShareaccesstokens() {
	m.clearedshareaccesstokens = true
}

// ShareaccesstokensCleared reports if the "shareaccesstokens" edge to the ShareAccessToken entity was cleared.
func (m *GrantMutation) ShareaccesstokensCleared() bool {
	return m.clearedshareaccesstokens
}

// RemoveShareaccesstokenIDs removes the "shareaccesstokens" edge to the ShareAccessToken entity by IDs.
func (m *GrantMutation) RemoveShareaccesstokenIDs(ids ...string) {
	if m.removedshareaccesstokens == nil {
		m.removedshareaccesstokens = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.shareaccesstokens, ids[i])
		m.removedshareaccesstokens[ids[i]] = struct{}{}
	}
}

// RemovedShareaccesstokens returns the removed IDs of the "shareaccesstokens" edge to the ShareAccessToken entity.
func (m *GrantMutation) RemovedShareaccesstokensIDs() (ids []string) {
	for id := range m.removedshareaccesstokens {
		ids = append(ids, id)
	}
	return
}

// ShareaccesstokensIDs returns the "shareaccesstokens" edge IDs in the mutation.
func (m *GrantMutation) ShareaccesstokensIDs() (ids []string) {
	for id := range m.shareaccesstokens {
		ids = append(ids, id)
	}
	return
}

// ResetShareaccesstokens resets all changes to the "shareaccesstokens" edge.
func (m *GrantMutation) ResetShareaccesstokens() {
	m.shareaccesstokens = nil
	m.clearedshareaccesstokens = false
	m.removedshareaccesstokens = nil
}

// Where appends a list predicates to the GrantMutation builder.
func (m *GrantMutation) Where(ps ...predicate.Grant) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GrantMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GrantMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Grant, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GrantMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GrantMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Grant).
func (m *GrantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GrantMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.comment != nil {
		fields = append(fields, grant.FieldComment)
	}
	if m.expiry_type != nil {
		fields = append(fields, grant.FieldExpiryType)
	}
	if m.hashed_password != nil {
		fields = append(fields, grant.FieldHashedPassword)
	}
	if m.salt != nil {
		fields = append(fields, grant.FieldSalt)
	}
	if m.created_at != nil {
		fields = append(fields, grant.FieldCreatedAt)
	}
	if m.expiry_total_days != nil {
		fields = append(fields, grant.FieldExpiryTotalDays)
	}
	if m.expiry_days_since_last_upload != nil {
		fields = append(fields, grant.FieldExpiryDaysSinceLastUpload)
	}
	if m.expiry_total_uploads != nil {
		fields = append(fields, grant.FieldExpiryTotalUploads)
	}
	if m.file_expiry_type != nil {
		fields = append(fields, grant.FieldFileExpiryType)
	}
	if m.file_expiry_total_days != nil {
		fields = append(fields, grant.FieldFileExpiryTotalDays)
	}
	if m.file_expiry_days_since_last_download != nil {
		fields = append(fields, grant.FieldFileExpiryDaysSinceLastDownload)
	}
	if m.file_expiry_total_downloads != nil {
		fields = append(fields, grant.FieldFileExpiryTotalDownloads)
	}
	if m.last_upload != nil {
		fields = append(fields, grant.FieldLastUpload)
	}
	if m.times_uploaded != nil {
		fields = append(fields, grant.FieldTimesUploaded)
	}
	if m.email_on_upload != nil {
		fields = append(fields, grant.FieldEmailOnUpload)
	}
	if m.creator_lang != nil {
		fields = append(fields, grant.FieldCreatorLang)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GrantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case grant.FieldComment:
		return m.Comment()
	case grant.FieldExpiryType:
		return m.ExpiryType()
	case grant.FieldHashedPassword:
		return m.HashedPassword()
	case grant.FieldSalt:
		return m.Salt()
	case grant.FieldCreatedAt:
		return m.CreatedAt()
	case grant.FieldExpiryTotalDays:
		return m.ExpiryTotalDays()
	case grant.FieldExpiryDaysSinceLastUpload:
		return m.ExpiryDaysSinceLastUpload()
	case grant.FieldExpiryTotalUploads:
		return m.ExpiryTotalUploads()
	case grant.FieldFileExpiryType:
		return m.FileExpiryType()
	case grant.FieldFileExpiryTotalDays:
		return m.FileExpiryTotalDays()
	case grant.FieldFileExpiryDaysSinceLastDownload:
		return m.FileExpiryDaysSinceLastDownload()
	case grant.FieldFileExpiryTotalDownloads:
		return m.FileExpiryTotalDownloads()
	case grant.FieldLastUpload:
		return m.LastUpload()
	case grant.FieldTimesUploaded:
		return m.TimesUploaded()
	case grant.FieldEmailOnUpload:
		return m.EmailOnUpload()
	case grant.FieldCreatorLang:
		return m.CreatorLang()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GrantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case grant.FieldComment:
		return m.OldComment(ctx)
	case grant.FieldExpiryType:
		return m.OldExpiryType(ctx)
	case grant.FieldHashedPassword:
		return m.OldHashedPassword(ctx)
	case grant.FieldSalt:
		return m.OldSalt(ctx)
	case grant.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case grant.FieldExpiryTotalDays:
		return m.OldExpiryTotalDays(ctx)
	case grant.FieldExpiryDaysSinceLastUpload:
		return m.OldExpiryDaysSinceLastUpload(ctx)
	case grant.FieldExpiryTotalUploads:
		return m.OldExpiryTotalUploads(ctx)
	case grant.FieldFileExpiryType:
		return m.OldFileExpiryType(ctx)
	case grant.FieldFileExpiryTotalDays:
		return m.OldFileExpiryTotalDays(ctx)
	case grant.FieldFileExpiryDaysSinceLastDownload:
		return m.OldFileExpiryDaysSinceLastDownload(ctx)
	case grant.FieldFileExpiryTotalDownloads:
		return m.OldFileExpiryTotalDownloads(ctx)
	case grant.FieldLastUpload:
		return m.OldLastUpload(ctx)
	case grant.FieldTimesUploaded:
		return m.OldTimesUploaded(ctx)
	case grant.FieldEmailOnUpload:
		return m.OldEmailOnUpload(ctx)
	case grant.FieldCreatorLang:
		return m.OldCreatorLang(ctx)
	}
	return nil, fmt.Errorf("unknown Grant field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GrantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case grant.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case grant.FieldExpiryType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryType(v)
		return nil
	case grant.FieldHashedPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedPassword(v)
		return nil
	case grant.FieldSalt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case grant.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case grant.FieldExpiryTotalDays:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryTotalDays(v)
		return nil
	case grant.FieldExpiryDaysSinceLastUpload:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryDaysSinceLastUpload(v)
		return nil
	case grant.FieldExpiryTotalUploads:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryTotalUploads(v)
		return nil
	case grant.FieldFileExpiryType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileExpiryType(v)
		return nil
	case grant.FieldFileExpiryTotalDays:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileExpiryTotalDays(v)
		return nil
	case grant.FieldFileExpiryDaysSinceLastDownload:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileExpiryDaysSinceLastDownload(v)
		return nil
	case grant.FieldFileExpiryTotalDownloads:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileExpiryTotalDownloads(v)
		return nil
	case grant.FieldLastUpload:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpload(v)
		return nil
	case grant.FieldTimesUploaded:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimesUploaded(v)
		return nil
	case grant.FieldEmailOnUpload:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailOnUpload(v)
		return nil
	case grant.FieldCreatorLang:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatorLang(v)
		return nil
	}
	return fmt.Errorf("unknown Grant field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GrantMutation) AddedFields() []string {
	var fields []string
	if m.addexpiry_total_days != nil {
		fields = append(fields, grant.FieldExpiryTotalDays)
	}
	if m.addexpiry_days_since_last_upload != nil {
		fields = append(fields, grant.FieldExpiryDaysSinceLastUpload)
	}
	if m.addexpiry_total_uploads != nil {
		fields = append(fields, grant.FieldExpiryTotalUploads)
	}
	if m.addfile_expiry_total_days != nil {
		fields = append(fields, grant.FieldFileExpiryTotalDays)
	}
	if m.addfile_expiry_days_since_last_download != nil {
		fields = append(fields, grant.FieldFileExpiryDaysSinceLastDownload)
	}
	if m.addfile_expiry_total_downloads != nil {
		fields = append(fields, grant.FieldFileExpiryTotalDownloads)
	}
	if m.addtimes_uploaded != nil {
		fields = append(fields, grant.FieldTimesUploaded)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GrantMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case grant.FieldExpiryTotalDays:
		return m.AddedExpiryTotalDays()
	case grant.FieldExpiryDaysSinceLastUpload:
		return m.AddedExpiryDaysSinceLastUpload()
	case grant.FieldExpiryTotalUploads:
		return m.AddedExpiryTotalUploads()
	case grant.FieldFileExpiryTotalDays:
		return m.AddedFileExpiryTotalDays()
	case grant.FieldFileExpiryDaysSinceLastDownload:
		return m.AddedFileExpiryDaysSinceLastDownload()
	case grant.FieldFileExpiryTotalDownloads:
		return m.AddedFileExpiryTotalDownloads()
	case grant.FieldTimesUploaded:
		return m.AddedTimesUploaded()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GrantMutation) AddField(name string, value ent.Value) error {
	switch name {
	case grant.FieldExpiryTotalDays:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiryTotalDays(v)
		return nil
	case grant.FieldExpiryDaysSinceLastUpload:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiryDaysSinceLastUpload(v)
		return nil
	case grant.FieldExpiryTotalUploads:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiryTotalUploads(v)
		return nil
	case grant.FieldFileExpiryTotalDays:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFileExpiryTotalDays(v)
		return nil
	case grant.FieldFileExpiryDaysSinceLastDownload:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFileExpiryDaysSinceLastDownload(v)
		return nil
	case grant.FieldFileExpiryTotalDownloads:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFileExpiryTotalDownloads(v)
		return nil
	case grant.FieldTimesUploaded:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTimesUploaded(v)
		return nil
	}
	return fmt.Errorf("unknown Grant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GrantMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(grant.FieldComment) {
		fields = append(fields, grant.FieldComment)
	}
	if m.FieldCleared(grant.FieldLastUpload) {
		fields = append(fields, grant.FieldLastUpload)
	}
	if m.FieldCleared(grant.FieldEmailOnUpload) {
		fields = append(fields, grant.FieldEmailOnUpload)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GrantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GrantMutation) ClearField(name string) error {
	switch name {
	case grant.FieldComment:
		m.ClearComment()
		return nil
	case grant.FieldLastUpload:
		m.ClearLastUpload()
		return nil
	case grant.FieldEmailOnUpload:
		m.ClearEmailOnUpload()
		return nil
	}
	return fmt.Errorf("unknown Grant nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GrantMutation) ResetField(name string) error {
	switch name {
	case grant.FieldComment:
		m.ResetComment()
		return nil
	case grant.FieldExpiryType:
		m.ResetExpiryType()
		return nil
	case grant.FieldHashedPassword:
		m.ResetHashedPassword()
		return nil
	case grant.FieldSalt:
		m.ResetSalt()
		return nil
	case grant.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case grant.FieldExpiryTotalDays:
		m.ResetExpiryTotalDays()
		return nil
	case grant.FieldExpiryDaysSinceLastUpload:
		m.ResetExpiryDaysSinceLastUpload()
		return nil
	case grant.FieldExpiryTotalUploads:
		m.ResetExpiryTotalUploads()
		return nil
	case grant.FieldFileExpiryType:
		m.ResetFileExpiryType()
		return nil
	case grant.FieldFileExpiryTotalDays:
		m.ResetFileExpiryTotalDays()
		return nil
	case grant.FieldFileExpiryDaysSinceLastDownload:
		m.ResetFileExpiryDaysSinceLastDownload()
		return nil
	case grant.FieldFileExpiryTotalDownloads:
		m.ResetFileExpiryTotalDownloads()
		return nil
	case grant.FieldLastUpload:
		m.ResetLastUpload()
		return nil
	case grant.FieldTimesUploaded:
		m.ResetTimesUploaded()
		return nil
	case grant.FieldEmailOnUpload:
		m.ResetEmailOnUpload()
		return nil
	case grant.FieldCreatorLang:
		m.ResetCreatorLang()
		return nil
	}
	return fmt.Errorf("unknown Grant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GrantMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.files != nil {
		edges = append(edges, grant.EdgeFiles)
	}
	if m.owner != nil {
		edges = append(edges, grant.EdgeOwner)
	}
	if m.shareaccesstokens != nil {
		edges = append(edges, grant.EdgeShareaccesstokens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GrantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case grant.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.files))
		for id := range m.files {
			ids = append(ids, id)
		}
		return ids
	case grant.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case grant.EdgeShareaccesstokens:
		ids := make([]ent.Value, 0, len(m.shareaccesstokens))
		for id := range m.shareaccesstokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GrantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedfiles != nil {
		edges = append(edges, grant.EdgeFiles)
	}
	if m.removedshareaccesstokens != nil {
		edges = append(edges, grant.EdgeShareaccesstokens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GrantMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case grant.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.removedfiles))
		for id := range m.removedfiles {
			ids = append(ids, id)
		}
		return ids
	case grant.EdgeShareaccesstokens:
		ids := make([]ent.Value, 0, len(m.removedshareaccesstokens))
		for id := range m.removedshareaccesstokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GrantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedfiles {
		edges = append(edges, grant.EdgeFiles)
	}
	if m.clearedowner {
		edges = append(edges, grant.EdgeOwner)
	}
	if m.clearedshareaccesstokens {
		edges = append(edges, grant.EdgeShareaccesstokens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GrantMutation) EdgeCleared(name string) bool {
	switch name {
	case grant.EdgeFiles:
		return m.clearedfiles
	case grant.EdgeOwner:
		return m.clearedowner
	case grant.EdgeShareaccesstokens:
		return m.clearedshareaccesstokens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GrantMutation) ClearEdge(name string) error {
	switch name {
	case grant.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Grant unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GrantMutation) ResetEdge(name string) error {
	switch name {
	case grant.EdgeFiles:
		m.ResetFiles()
		return nil
	case grant.EdgeOwner:
		m.ResetOwner()
		return nil
	case grant.EdgeShareaccesstokens:
		m.ResetShareaccesstokens()
		return nil
	}
	return fmt.Errorf("unknown Grant edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	id_token      *string
	expire        *time.Time
	refresh_token *string
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*Session, error)
	predicates    []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id int) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetIDToken sets the "id_token" field.
func (m *SessionMutation) SetIDToken(s string) {
	m.id_token = &s
}

// IDToken returns the value of the "id_token" field in the mutation.
func (m *SessionMutation) IDToken() (r string, exists bool) {
	v := m.id_token
	if v == nil {
		return
	}
	return *v, true
}

// OldIDToken returns the old "id_token" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldIDToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIDToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIDToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIDToken: %w", err)
	}
	return oldValue.IDToken, nil
}

// ResetIDToken resets all changes to the "id_token" field.
func (m *SessionMutation) ResetIDToken() {
	m.id_token = nil
}

// SetExpire sets the "expire" field.
func (m *SessionMutation) SetExpire(t time.Time) {
	m.expire = &t
}

// Expire returns the value of the "expire" field in the mutation.
func (m *SessionMutation) Expire() (r time.Time, exists bool) {
	v := m.expire
	if v == nil {
		return
	}
	return *v, true
}

// OldExpire returns the old "expire" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldExpire(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpire is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpire requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpire: %w", err)
	}
	return oldValue.Expire, nil
}

// ResetExpire resets all changes to the "expire" field.
func (m *SessionMutation) ResetExpire() {
	m.expire = nil
}

// SetRefreshToken sets the "refresh_token" field.
func (m *SessionMutation) SetRefreshToken(s string) {
	m.refresh_token = &s
}

// RefreshToken returns the value of the "refresh_token" field in the mutation.
func (m *SessionMutation) RefreshToken() (r string, exists bool) {
	v := m.refresh_token
	if v == nil {
		return
	}
	return *v, true
}

// OldRefreshToken returns the old "refresh_token" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldRefreshToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefreshToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefreshToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefreshToken: %w", err)
	}
	return oldValue.RefreshToken, nil
}

// ResetRefreshToken resets all changes to the "refresh_token" field.
func (m *SessionMutation) ResetRefreshToken() {
	m.refresh_token = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *SessionMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *SessionMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *SessionMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *SessionMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *SessionMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Session, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.id_token != nil {
		fields = append(fields, session.FieldIDToken)
	}
	if m.expire != nil {
		fields = append(fields, session.FieldExpire)
	}
	if m.refresh_token != nil {
		fields = append(fields, session.FieldRefreshToken)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldIDToken:
		return m.IDToken()
	case session.FieldExpire:
		return m.Expire()
	case session.FieldRefreshToken:
		return m.RefreshToken()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldIDToken:
		return m.OldIDToken(ctx)
	case session.FieldExpire:
		return m.OldExpire(ctx)
	case session.FieldRefreshToken:
		return m.OldRefreshToken(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldIDToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIDToken(v)
		return nil
	case session.FieldExpire:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpire(v)
		return nil
	case session.FieldRefreshToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefreshToken(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldIDToken:
		m.ResetIDToken()
		return nil
	case session.FieldExpire:
		m.ResetExpire()
		return nil
	case session.FieldRefreshToken:
		m.ResetRefreshToken()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, session.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// ShareAccessTokenMutation represents an operation that mutates the ShareAccessToken nodes in the graph.
type ShareAccessTokenMutation struct {
	config
	op            Op
	typ           string
	id            *string
	expiry        *time.Time
	clearedFields map[string]struct{}
	ticket        *uuid.UUID
	clearedticket bool
	grant         *uuid.UUID
	clearedgrant  bool
	done          bool
	oldValue      func(context.Context) (*ShareAccessToken, error)
	predicates    []predicate.ShareAccessToken
}

var _ ent.Mutation = (*ShareAccessTokenMutation)(nil)

// shareaccesstokenOption allows management of the mutation configuration using functional options.
type shareaccesstokenOption func(*ShareAccessTokenMutation)

// newShareAccessTokenMutation creates new mutation for the ShareAccessToken entity.
func newShareAccessTokenMutation(c config, op Op, opts ...shareaccesstokenOption) *ShareAccessTokenMutation {
	m := &ShareAccessTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeShareAccessToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShareAccessTokenID sets the ID field of the mutation.
func withShareAccessTokenID(id string) shareaccesstokenOption {
	return func(m *ShareAccessTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *ShareAccessToken
		)
		m.oldValue = func(ctx context.Context) (*ShareAccessToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ShareAccessToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShareAccessToken sets the old ShareAccessToken of the mutation.
func withShareAccessToken(node *ShareAccessToken) shareaccesstokenOption {
	return func(m *ShareAccessTokenMutation) {
		m.oldValue = func(context.Context) (*ShareAccessToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShareAccessTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShareAccessTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ShareAccessToken entities.
func (m *ShareAccessTokenMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShareAccessTokenMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShareAccessTokenMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ShareAccessToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExpiry sets the "expiry" field.
func (m *ShareAccessTokenMutation) SetExpiry(t time.Time) {
	m.expiry = &t
}

// Expiry returns the value of the "expiry" field in the mutation.
func (m *ShareAccessTokenMutation) Expiry() (r time.Time, exists bool) {
	v := m.expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiry returns the old "expiry" field's value of the ShareAccessToken entity.
// If the ShareAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShareAccessTokenMutation) OldExpiry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiry: %w", err)
	}
	return oldValue.Expiry, nil
}

// ResetExpiry resets all changes to the "expiry" field.
func (m *ShareAccessTokenMutation) ResetExpiry() {
	m.expiry = nil
}

// SetTicketID sets the "ticket" edge to the Ticket entity by id.
func (m *ShareAccessTokenMutation) SetTicketID(id uuid.UUID) {
	m.ticket = &id
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (m *ShareAccessTokenMutation) ClearTicket() {
	m.clearedticket = true
}

// TicketCleared reports if the "ticket" edge to the Ticket entity was cleared.
func (m *ShareAccessTokenMutation) TicketCleared() bool {
	return m.clearedticket
}

// TicketID returns the "ticket" edge ID in the mutation.
func (m *ShareAccessTokenMutation) TicketID() (id uuid.UUID, exists bool) {
	if m.ticket != nil {
		return *m.ticket, true
	}
	return
}

// TicketIDs returns the "ticket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TicketID instead. It exists only for internal usage by the builders.
func (m *ShareAccessTokenMutation) TicketIDs() (ids []uuid.UUID) {
	if id := m.ticket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTicket resets all changes to the "ticket" edge.
func (m *ShareAccessTokenMutation) ResetTicket() {
	m.ticket = nil
	m.clearedticket = false
}

// SetGrantID sets the "grant" edge to the Grant entity by id.
func (m *ShareAccessTokenMutation) SetGrantID(id uuid.UUID) {
	m.grant = &id
}

// ClearGrant clears the "grant" edge to the Grant entity.
func (m *ShareAccessTokenMutation) ClearGrant() {
	m.clearedgrant = true
}

// GrantCleared reports if the "grant" edge to the Grant entity was cleared.
func (m *ShareAccessTokenMutation) GrantCleared() bool {
	return m.clearedgrant
}

// GrantID returns the "grant" edge ID in the mutation.
func (m *ShareAccessTokenMutation) GrantID() (id uuid.UUID, exists bool) {
	if m.grant != nil {
		return *m.grant, true
	}
	return
}

// GrantIDs returns the "grant" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GrantID instead. It exists only for internal usage by the builders.
func (m *ShareAccessTokenMutation) GrantIDs() (ids []uuid.UUID) {
	if id := m.grant; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGrant resets all changes to the "grant" edge.
func (m *ShareAccessTokenMutation) ResetGrant() {
	m.grant = nil
	m.clearedgrant = false
}

// Where appends a list predicates to the ShareAccessTokenMutation builder.
func (m *ShareAccessTokenMutation) Where(ps ...predicate.ShareAccessToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShareAccessTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShareAccessTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ShareAccessToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShareAccessTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShareAccessTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ShareAccessToken).
func (m *ShareAccessTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShareAccessTokenMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.expiry != nil {
		fields = append(fields, shareaccesstoken.FieldExpiry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShareAccessTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shareaccesstoken.FieldExpiry:
		return m.Expiry()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShareAccessTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shareaccesstoken.FieldExpiry:
		return m.OldExpiry(ctx)
	}
	return nil, fmt.Errorf("unknown ShareAccessToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShareAccessTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shareaccesstoken.FieldExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiry(v)
		return nil
	}
	return fmt.Errorf("unknown ShareAccessToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShareAccessTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShareAccessTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShareAccessTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ShareAccessToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShareAccessTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShareAccessTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShareAccessTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ShareAccessToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShareAccessTokenMutation) ResetField(name string) error {
	switch name {
	case shareaccesstoken.FieldExpiry:
		m.ResetExpiry()
		return nil
	}
	return fmt.Errorf("unknown ShareAccessToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShareAccessTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.ticket != nil {
		edges = append(edges, shareaccesstoken.EdgeTicket)
	}
	if m.grant != nil {
		edges = append(edges, shareaccesstoken.EdgeGrant)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShareAccessTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case shareaccesstoken.EdgeTicket:
		if id := m.ticket; id != nil {
			return []ent.Value{*id}
		}
	case shareaccesstoken.EdgeGrant:
		if id := m.grant; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShareAccessTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShareAccessTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShareAccessTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedticket {
		edges = append(edges, shareaccesstoken.EdgeTicket)
	}
	if m.clearedgrant {
		edges = append(edges, shareaccesstoken.EdgeGrant)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShareAccessTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case shareaccesstoken.EdgeTicket:
		return m.clearedticket
	case shareaccesstoken.EdgeGrant:
		return m.clearedgrant
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShareAccessTokenMutation) ClearEdge(name string) error {
	switch name {
	case shareaccesstoken.EdgeTicket:
		m.ClearTicket()
		return nil
	case shareaccesstoken.EdgeGrant:
		m.ClearGrant()
		return nil
	}
	return fmt.Errorf("unknown ShareAccessToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShareAccessTokenMutation) ResetEdge(name string) error {
	switch name {
	case shareaccesstoken.EdgeTicket:
		m.ResetTicket()
		return nil
	case shareaccesstoken.EdgeGrant:
		m.ResetGrant()
		return nil
	}
	return fmt.Errorf("unknown ShareAccessToken edge %s", name)
}

// TicketMutation represents an operation that mutates the Ticket nodes in the graph.
type TicketMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *uuid.UUID
	comment                            *string
	expiryType                         *string
	hashed_password                    *string
	salt                               *string
	created_at                         *time.Time
	expiry_total_days                  *uint8
	addexpiry_total_days               *int8
	expiry_days_since_last_download    *uint8
	addexpiry_days_since_last_download *int8
	expiry_total_downloads             *uint8
	addexpiry_total_downloads          *int8
	email_on_download                  *string
	creator_lang                       *string
	clearedFields                      map[string]struct{}
	files                              map[uuid.UUID]struct{}
	removedfiles                       map[uuid.UUID]struct{}
	clearedfiles                       bool
	owner                              *uuid.UUID
	clearedowner                       bool
	shareaccesstokens                  map[string]struct{}
	removedshareaccesstokens           map[string]struct{}
	clearedshareaccesstokens           bool
	done                               bool
	oldValue                           func(context.Context) (*Ticket, error)
	predicates                         []predicate.Ticket
}

var _ ent.Mutation = (*TicketMutation)(nil)

// ticketOption allows management of the mutation configuration using functional options.
type ticketOption func(*TicketMutation)

// newTicketMutation creates new mutation for the Ticket entity.
func newTicketMutation(c config, op Op, opts ...ticketOption) *TicketMutation {
	m := &TicketMutation{
		config:        c,
		op:            op,
		typ:           TypeTicket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTicketID sets the ID field of the mutation.
func withTicketID(id uuid.UUID) ticketOption {
	return func(m *TicketMutation) {
		var (
			err   error
			once  sync.Once
			value *Ticket
		)
		m.oldValue = func(ctx context.Context) (*Ticket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ticket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTicket sets the old Ticket of the mutation.
func withTicket(node *Ticket) ticketOption {
	return func(m *TicketMutation) {
		m.oldValue = func(context.Context) (*Ticket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TicketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TicketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Ticket entities.
func (m *TicketMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TicketMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TicketMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ticket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetComment sets the "comment" field.
func (m *TicketMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *TicketMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldComment(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *TicketMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[ticket.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *TicketMutation) CommentCleared() bool {
	_, ok := m.clearedFields[ticket.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *TicketMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, ticket.FieldComment)
}

// SetExpiryType sets the "expiryType" field.
func (m *TicketMutation) SetExpiryType(s string) {
	m.expiryType = &s
}

// ExpiryType returns the value of the "expiryType" field in the mutation.
func (m *TicketMutation) ExpiryType() (r string, exists bool) {
	v := m.expiryType
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryType returns the old "expiryType" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldExpiryType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryType: %w", err)
	}
	return oldValue.ExpiryType, nil
}

// ResetExpiryType resets all changes to the "expiryType" field.
func (m *TicketMutation) ResetExpiryType() {
	m.expiryType = nil
}

// SetHashedPassword sets the "hashed_password" field.
func (m *TicketMutation) SetHashedPassword(s string) {
	m.hashed_password = &s
}

// HashedPassword returns the value of the "hashed_password" field in the mutation.
func (m *TicketMutation) HashedPassword() (r string, exists bool) {
	v := m.hashed_password
	if v == nil {
		return
	}
	return *v, true
}

// OldHashedPassword returns the old "hashed_password" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldHashedPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHashedPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHashedPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHashedPassword: %w", err)
	}
	return oldValue.HashedPassword, nil
}

// ResetHashedPassword resets all changes to the "hashed_password" field.
func (m *TicketMutation) ResetHashedPassword() {
	m.hashed_password = nil
}

// SetSalt sets the "salt" field.
func (m *TicketMutation) SetSalt(s string) {
	m.salt = &s
}

// Salt returns the value of the "salt" field in the mutation.
func (m *TicketMutation) Salt() (r string, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldSalt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *TicketMutation) ResetSalt() {
	m.salt = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TicketMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TicketMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TicketMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (m *TicketMutation) SetExpiryTotalDays(u uint8) {
	m.expiry_total_days = &u
	m.addexpiry_total_days = nil
}

// ExpiryTotalDays returns the value of the "expiry_total_days" field in the mutation.
func (m *TicketMutation) ExpiryTotalDays() (r uint8, exists bool) {
	v := m.expiry_total_days
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryTotalDays returns the old "expiry_total_days" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldExpiryTotalDays(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryTotalDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryTotalDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryTotalDays: %w", err)
	}
	return oldValue.ExpiryTotalDays, nil
}

// AddExpiryTotalDays adds u to the "expiry_total_days" field.
func (m *TicketMutation) AddExpiryTotalDays(u int8) {
	if m.addexpiry_total_days != nil {
		*m.addexpiry_total_days += u
	} else {
		m.addexpiry_total_days = &u
	}
}

// AddedExpiryTotalDays returns the value that was added to the "expiry_total_days" field in this mutation.
func (m *TicketMutation) AddedExpiryTotalDays() (r int8, exists bool) {
	v := m.addexpiry_total_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiryTotalDays resets all changes to the "expiry_total_days" field.
func (m *TicketMutation) ResetExpiryTotalDays() {
	m.expiry_total_days = nil
	m.addexpiry_total_days = nil
}

// SetExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field.
func (m *TicketMutation) SetExpiryDaysSinceLastDownload(u uint8) {
	m.expiry_days_since_last_download = &u
	m.addexpiry_days_since_last_download = nil
}

// ExpiryDaysSinceLastDownload returns the value of the "expiry_days_since_last_download" field in the mutation.
func (m *TicketMutation) ExpiryDaysSinceLastDownload() (r uint8, exists bool) {
	v := m.expiry_days_since_last_download
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryDaysSinceLastDownload returns the old "expiry_days_since_last_download" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldExpiryDaysSinceLastDownload(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryDaysSinceLastDownload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryDaysSinceLastDownload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryDaysSinceLastDownload: %w", err)
	}
	return oldValue.ExpiryDaysSinceLastDownload, nil
}

// AddExpiryDaysSinceLastDownload adds u to the "expiry_days_since_last_download" field.
func (m *TicketMutation) AddExpiryDaysSinceLastDownload(u int8) {
	if m.addexpiry_days_since_last_download != nil {
		*m.addexpiry_days_since_last_download += u
	} else {
		m.addexpiry_days_since_last_download = &u
	}
}

// AddedExpiryDaysSinceLastDownload returns the value that was added to the "expiry_days_since_last_download" field in this mutation.
func (m *TicketMutation) AddedExpiryDaysSinceLastDownload() (r int8, exists bool) {
	v := m.addexpiry_days_since_last_download
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiryDaysSinceLastDownload resets all changes to the "expiry_days_since_last_download" field.
func (m *TicketMutation) ResetExpiryDaysSinceLastDownload() {
	m.expiry_days_since_last_download = nil
	m.addexpiry_days_since_last_download = nil
}

// SetExpiryTotalDownloads sets the "expiry_total_downloads" field.
func (m *TicketMutation) SetExpiryTotalDownloads(u uint8) {
	m.expiry_total_downloads = &u
	m.addexpiry_total_downloads = nil
}

// ExpiryTotalDownloads returns the value of the "expiry_total_downloads" field in the mutation.
func (m *TicketMutation) ExpiryTotalDownloads() (r uint8, exists bool) {
	v := m.expiry_total_downloads
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiryTotalDownloads returns the old "expiry_total_downloads" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldExpiryTotalDownloads(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiryTotalDownloads is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiryTotalDownloads requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiryTotalDownloads: %w", err)
	}
	return oldValue.ExpiryTotalDownloads, nil
}

// AddExpiryTotalDownloads adds u to the "expiry_total_downloads" field.
func (m *TicketMutation) AddExpiryTotalDownloads(u int8) {
	if m.addexpiry_total_downloads != nil {
		*m.addexpiry_total_downloads += u
	} else {
		m.addexpiry_total_downloads = &u
	}
}

// AddedExpiryTotalDownloads returns the value that was added to the "expiry_total_downloads" field in this mutation.
func (m *TicketMutation) AddedExpiryTotalDownloads() (r int8, exists bool) {
	v := m.addexpiry_total_downloads
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiryTotalDownloads resets all changes to the "expiry_total_downloads" field.
func (m *TicketMutation) ResetExpiryTotalDownloads() {
	m.expiry_total_downloads = nil
	m.addexpiry_total_downloads = nil
}

// SetEmailOnDownload sets the "email_on_download" field.
func (m *TicketMutation) SetEmailOnDownload(s string) {
	m.email_on_download = &s
}

// EmailOnDownload returns the value of the "email_on_download" field in the mutation.
func (m *TicketMutation) EmailOnDownload() (r string, exists bool) {
	v := m.email_on_download
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailOnDownload returns the old "email_on_download" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldEmailOnDownload(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailOnDownload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailOnDownload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailOnDownload: %w", err)
	}
	return oldValue.EmailOnDownload, nil
}

// ClearEmailOnDownload clears the value of the "email_on_download" field.
func (m *TicketMutation) ClearEmailOnDownload() {
	m.email_on_download = nil
	m.clearedFields[ticket.FieldEmailOnDownload] = struct{}{}
}

// EmailOnDownloadCleared returns if the "email_on_download" field was cleared in this mutation.
func (m *TicketMutation) EmailOnDownloadCleared() bool {
	_, ok := m.clearedFields[ticket.FieldEmailOnDownload]
	return ok
}

// ResetEmailOnDownload resets all changes to the "email_on_download" field.
func (m *TicketMutation) ResetEmailOnDownload() {
	m.email_on_download = nil
	delete(m.clearedFields, ticket.FieldEmailOnDownload)
}

// SetCreatorLang sets the "creator_lang" field.
func (m *TicketMutation) SetCreatorLang(s string) {
	m.creator_lang = &s
}

// CreatorLang returns the value of the "creator_lang" field in the mutation.
func (m *TicketMutation) CreatorLang() (r string, exists bool) {
	v := m.creator_lang
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatorLang returns the old "creator_lang" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldCreatorLang(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatorLang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatorLang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatorLang: %w", err)
	}
	return oldValue.CreatorLang, nil
}

// ResetCreatorLang resets all changes to the "creator_lang" field.
func (m *TicketMutation) ResetCreatorLang() {
	m.creator_lang = nil
}

// AddFileIDs adds the "files" edge to the File entity by ids.
func (m *TicketMutation) AddFileIDs(ids ...uuid.UUID) {
	if m.files == nil {
		m.files = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.files[ids[i]] = struct{}{}
	}
}

// ClearFiles clears the "files" edge to the File entity.
func (m *TicketMutation) ClearFiles() {
	m.clearedfiles = true
}

// FilesCleared reports if the "files" edge to the File entity was cleared.
func (m *TicketMutation) FilesCleared() bool {
	return m.clearedfiles
}

// RemoveFileIDs removes the "files" edge to the File entity by IDs.
func (m *TicketMutation) RemoveFileIDs(ids ...uuid.UUID) {
	if m.removedfiles == nil {
		m.removedfiles = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.files, ids[i])
		m.removedfiles[ids[i]] = struct{}{}
	}
}

// RemovedFiles returns the removed IDs of the "files" edge to the File entity.
func (m *TicketMutation) RemovedFilesIDs() (ids []uuid.UUID) {
	for id := range m.removedfiles {
		ids = append(ids, id)
	}
	return
}

// FilesIDs returns the "files" edge IDs in the mutation.
func (m *TicketMutation) FilesIDs() (ids []uuid.UUID) {
	for id := range m.files {
		ids = append(ids, id)
	}
	return
}

// ResetFiles resets all changes to the "files" edge.
func (m *TicketMutation) ResetFiles() {
	m.files = nil
	m.clearedfiles = false
	m.removedfiles = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *TicketMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *TicketMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *TicketMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *TicketMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *TicketMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddShareaccesstokenIDs adds the "shareaccesstokens" edge to the ShareAccessToken entity by ids.
func (m *TicketMutation) AddShareaccesstokenIDs(ids ...string) {
	if m.shareaccesstokens == nil {
		m.shareaccesstokens = make(map[string]struct{})
	}
	for i := range ids {
		m.shareaccesstokens[ids[i]] = struct{}{}
	}
}

// ClearShareaccesstokens clears the "shareaccesstokens" edge to the ShareAccessToken entity.
func (m *TicketMutation) ClearShareaccesstokens() {
	m.clearedshareaccesstokens = true
}

// ShareaccesstokensCleared reports if the "shareaccesstokens" edge to the ShareAccessToken entity was cleared.
func (m *TicketMutation) ShareaccesstokensCleared() bool {
	return m.clearedshareaccesstokens
}

// RemoveShareaccesstokenIDs removes the "shareaccesstokens" edge to the ShareAccessToken entity by IDs.
func (m *TicketMutation) RemoveShareaccesstokenIDs(ids ...string) {
	if m.removedshareaccesstokens == nil {
		m.removedshareaccesstokens = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.shareaccesstokens, ids[i])
		m.removedshareaccesstokens[ids[i]] = struct{}{}
	}
}

// RemovedShareaccesstokens returns the removed IDs of the "shareaccesstokens" edge to the ShareAccessToken entity.
func (m *TicketMutation) RemovedShareaccesstokensIDs() (ids []string) {
	for id := range m.removedshareaccesstokens {
		ids = append(ids, id)
	}
	return
}

// ShareaccesstokensIDs returns the "shareaccesstokens" edge IDs in the mutation.
func (m *TicketMutation) ShareaccesstokensIDs() (ids []string) {
	for id := range m.shareaccesstokens {
		ids = append(ids, id)
	}
	return
}

// ResetShareaccesstokens resets all changes to the "shareaccesstokens" edge.
func (m *TicketMutation) ResetShareaccesstokens() {
	m.shareaccesstokens = nil
	m.clearedshareaccesstokens = false
	m.removedshareaccesstokens = nil
}

// Where appends a list predicates to the TicketMutation builder.
func (m *TicketMutation) Where(ps ...predicate.Ticket) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TicketMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TicketMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Ticket, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TicketMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TicketMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Ticket).
func (m *TicketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TicketMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.comment != nil {
		fields = append(fields, ticket.FieldComment)
	}
	if m.expiryType != nil {
		fields = append(fields, ticket.FieldExpiryType)
	}
	if m.hashed_password != nil {
		fields = append(fields, ticket.FieldHashedPassword)
	}
	if m.salt != nil {
		fields = append(fields, ticket.FieldSalt)
	}
	if m.created_at != nil {
		fields = append(fields, ticket.FieldCreatedAt)
	}
	if m.expiry_total_days != nil {
		fields = append(fields, ticket.FieldExpiryTotalDays)
	}
	if m.expiry_days_since_last_download != nil {
		fields = append(fields, ticket.FieldExpiryDaysSinceLastDownload)
	}
	if m.expiry_total_downloads != nil {
		fields = append(fields, ticket.FieldExpiryTotalDownloads)
	}
	if m.email_on_download != nil {
		fields = append(fields, ticket.FieldEmailOnDownload)
	}
	if m.creator_lang != nil {
		fields = append(fields, ticket.FieldCreatorLang)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TicketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ticket.FieldComment:
		return m.Comment()
	case ticket.FieldExpiryType:
		return m.ExpiryType()
	case ticket.FieldHashedPassword:
		return m.HashedPassword()
	case ticket.FieldSalt:
		return m.Salt()
	case ticket.FieldCreatedAt:
		return m.CreatedAt()
	case ticket.FieldExpiryTotalDays:
		return m.ExpiryTotalDays()
	case ticket.FieldExpiryDaysSinceLastDownload:
		return m.ExpiryDaysSinceLastDownload()
	case ticket.FieldExpiryTotalDownloads:
		return m.ExpiryTotalDownloads()
	case ticket.FieldEmailOnDownload:
		return m.EmailOnDownload()
	case ticket.FieldCreatorLang:
		return m.CreatorLang()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TicketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ticket.FieldComment:
		return m.OldComment(ctx)
	case ticket.FieldExpiryType:
		return m.OldExpiryType(ctx)
	case ticket.FieldHashedPassword:
		return m.OldHashedPassword(ctx)
	case ticket.FieldSalt:
		return m.OldSalt(ctx)
	case ticket.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ticket.FieldExpiryTotalDays:
		return m.OldExpiryTotalDays(ctx)
	case ticket.FieldExpiryDaysSinceLastDownload:
		return m.OldExpiryDaysSinceLastDownload(ctx)
	case ticket.FieldExpiryTotalDownloads:
		return m.OldExpiryTotalDownloads(ctx)
	case ticket.FieldEmailOnDownload:
		return m.OldEmailOnDownload(ctx)
	case ticket.FieldCreatorLang:
		return m.OldCreatorLang(ctx)
	}
	return nil, fmt.Errorf("unknown Ticket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ticket.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case ticket.FieldExpiryType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryType(v)
		return nil
	case ticket.FieldHashedPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHashedPassword(v)
		return nil
	case ticket.FieldSalt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case ticket.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ticket.FieldExpiryTotalDays:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryTotalDays(v)
		return nil
	case ticket.FieldExpiryDaysSinceLastDownload:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryDaysSinceLastDownload(v)
		return nil
	case ticket.FieldExpiryTotalDownloads:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiryTotalDownloads(v)
		return nil
	case ticket.FieldEmailOnDownload:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailOnDownload(v)
		return nil
	case ticket.FieldCreatorLang:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatorLang(v)
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TicketMutation) AddedFields() []string {
	var fields []string
	if m.addexpiry_total_days != nil {
		fields = append(fields, ticket.FieldExpiryTotalDays)
	}
	if m.addexpiry_days_since_last_download != nil {
		fields = append(fields, ticket.FieldExpiryDaysSinceLastDownload)
	}
	if m.addexpiry_total_downloads != nil {
		fields = append(fields, ticket.FieldExpiryTotalDownloads)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TicketMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ticket.FieldExpiryTotalDays:
		return m.AddedExpiryTotalDays()
	case ticket.FieldExpiryDaysSinceLastDownload:
		return m.AddedExpiryDaysSinceLastDownload()
	case ticket.FieldExpiryTotalDownloads:
		return m.AddedExpiryTotalDownloads()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ticket.FieldExpiryTotalDays:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiryTotalDays(v)
		return nil
	case ticket.FieldExpiryDaysSinceLastDownload:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiryDaysSinceLastDownload(v)
		return nil
	case ticket.FieldExpiryTotalDownloads:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExpiryTotalDownloads(v)
		return nil
	}
	return fmt.Errorf("unknown Ticket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TicketMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ticket.FieldComment) {
		fields = append(fields, ticket.FieldComment)
	}
	if m.FieldCleared(ticket.FieldEmailOnDownload) {
		fields = append(fields, ticket.FieldEmailOnDownload)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TicketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TicketMutation) ClearField(name string) error {
	switch name {
	case ticket.FieldComment:
		m.ClearComment()
		return nil
	case ticket.FieldEmailOnDownload:
		m.ClearEmailOnDownload()
		return nil
	}
	return fmt.Errorf("unknown Ticket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TicketMutation) ResetField(name string) error {
	switch name {
	case ticket.FieldComment:
		m.ResetComment()
		return nil
	case ticket.FieldExpiryType:
		m.ResetExpiryType()
		return nil
	case ticket.FieldHashedPassword:
		m.ResetHashedPassword()
		return nil
	case ticket.FieldSalt:
		m.ResetSalt()
		return nil
	case ticket.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ticket.FieldExpiryTotalDays:
		m.ResetExpiryTotalDays()
		return nil
	case ticket.FieldExpiryDaysSinceLastDownload:
		m.ResetExpiryDaysSinceLastDownload()
		return nil
	case ticket.FieldExpiryTotalDownloads:
		m.ResetExpiryTotalDownloads()
		return nil
	case ticket.FieldEmailOnDownload:
		m.ResetEmailOnDownload()
		return nil
	case ticket.FieldCreatorLang:
		m.ResetCreatorLang()
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TicketMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.files != nil {
		edges = append(edges, ticket.EdgeFiles)
	}
	if m.owner != nil {
		edges = append(edges, ticket.EdgeOwner)
	}
	if m.shareaccesstokens != nil {
		edges = append(edges, ticket.EdgeShareaccesstokens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TicketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ticket.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.files))
		for id := range m.files {
			ids = append(ids, id)
		}
		return ids
	case ticket.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case ticket.EdgeShareaccesstokens:
		ids := make([]ent.Value, 0, len(m.shareaccesstokens))
		for id := range m.shareaccesstokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TicketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedfiles != nil {
		edges = append(edges, ticket.EdgeFiles)
	}
	if m.removedshareaccesstokens != nil {
		edges = append(edges, ticket.EdgeShareaccesstokens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TicketMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ticket.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.removedfiles))
		for id := range m.removedfiles {
			ids = append(ids, id)
		}
		return ids
	case ticket.EdgeShareaccesstokens:
		ids := make([]ent.Value, 0, len(m.removedshareaccesstokens))
		for id := range m.removedshareaccesstokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TicketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedfiles {
		edges = append(edges, ticket.EdgeFiles)
	}
	if m.clearedowner {
		edges = append(edges, ticket.EdgeOwner)
	}
	if m.clearedshareaccesstokens {
		edges = append(edges, ticket.EdgeShareaccesstokens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TicketMutation) EdgeCleared(name string) bool {
	switch name {
	case ticket.EdgeFiles:
		return m.clearedfiles
	case ticket.EdgeOwner:
		return m.clearedowner
	case ticket.EdgeShareaccesstokens:
		return m.clearedshareaccesstokens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TicketMutation) ClearEdge(name string) error {
	switch name {
	case ticket.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Ticket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TicketMutation) ResetEdge(name string) error {
	switch name {
	case ticket.EdgeFiles:
		m.ResetFiles()
		return nil
	case ticket.EdgeOwner:
		m.ResetOwner()
		return nil
	case ticket.EdgeShareaccesstokens:
		m.ResetShareaccesstokens()
		return nil
	}
	return fmt.Errorf("unknown Ticket edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	username             *string
	full_name            *string
	email                *string
	groups               *[]string
	appendgroups         []string
	is_admin             *bool
	created_at           *time.Time
	submitted_tickets    *int
	addsubmitted_tickets *int
	submitted_grants     *int
	addsubmitted_grants  *int
	totalDataSize        *int64
	addtotalDataSize     *int64
	clearedFields        map[string]struct{}
	sessions             map[int]struct{}
	removedsessions      map[int]struct{}
	clearedsessions      bool
	tickets              map[uuid.UUID]struct{}
	removedtickets       map[uuid.UUID]struct{}
	clearedtickets       bool
	grants               map[uuid.UUID]struct{}
	removedgrants        map[uuid.UUID]struct{}
	clearedgrants        bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetFullName sets the "full_name" field.
func (m *UserMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *UserMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *UserMutation) ResetFullName() {
	m.full_name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetGroups sets the "groups" field.
func (m *UserMutation) SetGroups(s []string) {
	m.groups = &s
	m.appendgroups = nil
}

// Groups returns the value of the "groups" field in the mutation.
func (m *UserMutation) Groups() (r []string, exists bool) {
	v := m.groups
	if v == nil {
		return
	}
	return *v, true
}

// OldGroups returns the old "groups" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGroups(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroups is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroups requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroups: %w", err)
	}
	return oldValue.Groups, nil
}

// AppendGroups adds s to the "groups" field.
func (m *UserMutation) AppendGroups(s []string) {
	m.appendgroups = append(m.appendgroups, s...)
}

// AppendedGroups returns the list of values that were appended to the "groups" field in this mutation.
func (m *UserMutation) AppendedGroups() ([]string, bool) {
	if len(m.appendgroups) == 0 {
		return nil, false
	}
	return m.appendgroups, true
}

// ResetGroups resets all changes to the "groups" field.
func (m *UserMutation) ResetGroups() {
	m.groups = nil
	m.appendgroups = nil
}

// SetIsAdmin sets the "is_admin" field.
func (m *UserMutation) SetIsAdmin(b bool) {
	m.is_admin = &b
}

// IsAdmin returns the value of the "is_admin" field in the mutation.
func (m *UserMutation) IsAdmin() (r bool, exists bool) {
	v := m.is_admin
	if v == nil {
		return
	}
	return *v, true
}

// OldIsAdmin returns the old "is_admin" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsAdmin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsAdmin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsAdmin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsAdmin: %w", err)
	}
	return oldValue.IsAdmin, nil
}

// ResetIsAdmin resets all changes to the "is_admin" field.
func (m *UserMutation) ResetIsAdmin() {
	m.is_admin = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetSubmittedTickets sets the "submitted_tickets" field.
func (m *UserMutation) SetSubmittedTickets(i int) {
	m.submitted_tickets = &i
	m.addsubmitted_tickets = nil
}

// SubmittedTickets returns the value of the "submitted_tickets" field in the mutation.
func (m *UserMutation) SubmittedTickets() (r int, exists bool) {
	v := m.submitted_tickets
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmittedTickets returns the old "submitted_tickets" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSubmittedTickets(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmittedTickets is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmittedTickets requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmittedTickets: %w", err)
	}
	return oldValue.SubmittedTickets, nil
}

// AddSubmittedTickets adds i to the "submitted_tickets" field.
func (m *UserMutation) AddSubmittedTickets(i int) {
	if m.addsubmitted_tickets != nil {
		*m.addsubmitted_tickets += i
	} else {
		m.addsubmitted_tickets = &i
	}
}

// AddedSubmittedTickets returns the value that was added to the "submitted_tickets" field in this mutation.
func (m *UserMutation) AddedSubmittedTickets() (r int, exists bool) {
	v := m.addsubmitted_tickets
	if v == nil {
		return
	}
	return *v, true
}

// ResetSubmittedTickets resets all changes to the "submitted_tickets" field.
func (m *UserMutation) ResetSubmittedTickets() {
	m.submitted_tickets = nil
	m.addsubmitted_tickets = nil
}

// SetSubmittedGrants sets the "submitted_grants" field.
func (m *UserMutation) SetSubmittedGrants(i int) {
	m.submitted_grants = &i
	m.addsubmitted_grants = nil
}

// SubmittedGrants returns the value of the "submitted_grants" field in the mutation.
func (m *UserMutation) SubmittedGrants() (r int, exists bool) {
	v := m.submitted_grants
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmittedGrants returns the old "submitted_grants" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSubmittedGrants(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmittedGrants is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmittedGrants requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmittedGrants: %w", err)
	}
	return oldValue.SubmittedGrants, nil
}

// AddSubmittedGrants adds i to the "submitted_grants" field.
func (m *UserMutation) AddSubmittedGrants(i int) {
	if m.addsubmitted_grants != nil {
		*m.addsubmitted_grants += i
	} else {
		m.addsubmitted_grants = &i
	}
}

// AddedSubmittedGrants returns the value that was added to the "submitted_grants" field in this mutation.
func (m *UserMutation) AddedSubmittedGrants() (r int, exists bool) {
	v := m.addsubmitted_grants
	if v == nil {
		return
	}
	return *v, true
}

// ResetSubmittedGrants resets all changes to the "submitted_grants" field.
func (m *UserMutation) ResetSubmittedGrants() {
	m.submitted_grants = nil
	m.addsubmitted_grants = nil
}

// SetTotalDataSize sets the "totalDataSize" field.
func (m *UserMutation) SetTotalDataSize(i int64) {
	m.totalDataSize = &i
	m.addtotalDataSize = nil
}

// TotalDataSize returns the value of the "totalDataSize" field in the mutation.
func (m *UserMutation) TotalDataSize() (r int64, exists bool) {
	v := m.totalDataSize
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalDataSize returns the old "totalDataSize" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTotalDataSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalDataSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalDataSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalDataSize: %w", err)
	}
	return oldValue.TotalDataSize, nil
}

// AddTotalDataSize adds i to the "totalDataSize" field.
func (m *UserMutation) AddTotalDataSize(i int64) {
	if m.addtotalDataSize != nil {
		*m.addtotalDataSize += i
	} else {
		m.addtotalDataSize = &i
	}
}

// AddedTotalDataSize returns the value that was added to the "totalDataSize" field in this mutation.
func (m *UserMutation) AddedTotalDataSize() (r int64, exists bool) {
	v := m.addtotalDataSize
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalDataSize resets all changes to the "totalDataSize" field.
func (m *UserMutation) ResetTotalDataSize() {
	m.totalDataSize = nil
	m.addtotalDataSize = nil
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *UserMutation) AddSessionIDs(ids ...int) {
	if m.sessions == nil {
		m.sessions = make(map[int]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *UserMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared reports if the "sessions" edge to the Session entity was cleared.
func (m *UserMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *UserMutation) RemoveSessionIDs(ids ...int) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sessions, ids[i])
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *UserMutation) RemovedSessionsIDs() (ids []int) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *UserMutation) SessionsIDs() (ids []int) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *UserMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by ids.
func (m *UserMutation) AddTicketIDs(ids ...uuid.UUID) {
	if m.tickets == nil {
		m.tickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.tickets[ids[i]] = struct{}{}
	}
}

// ClearTickets clears the "tickets" edge to the Ticket entity.
func (m *UserMutation) ClearTickets() {
	m.clearedtickets = true
}

// TicketsCleared reports if the "tickets" edge to the Ticket entity was cleared.
func (m *UserMutation) TicketsCleared() bool {
	return m.clearedtickets
}

// RemoveTicketIDs removes the "tickets" edge to the Ticket entity by IDs.
func (m *UserMutation) RemoveTicketIDs(ids ...uuid.UUID) {
	if m.removedtickets == nil {
		m.removedtickets = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.tickets, ids[i])
		m.removedtickets[ids[i]] = struct{}{}
	}
}

// RemovedTickets returns the removed IDs of the "tickets" edge to the Ticket entity.
func (m *UserMutation) RemovedTicketsIDs() (ids []uuid.UUID) {
	for id := range m.removedtickets {
		ids = append(ids, id)
	}
	return
}

// TicketsIDs returns the "tickets" edge IDs in the mutation.
func (m *UserMutation) TicketsIDs() (ids []uuid.UUID) {
	for id := range m.tickets {
		ids = append(ids, id)
	}
	return
}

// ResetTickets resets all changes to the "tickets" edge.
func (m *UserMutation) ResetTickets() {
	m.tickets = nil
	m.clearedtickets = false
	m.removedtickets = nil
}

// AddGrantIDs adds the "grants" edge to the Grant entity by ids.
func (m *UserMutation) AddGrantIDs(ids ...uuid.UUID) {
	if m.grants == nil {
		m.grants = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.grants[ids[i]] = struct{}{}
	}
}

// ClearGrants clears the "grants" edge to the Grant entity.
func (m *UserMutation) ClearGrants() {
	m.clearedgrants = true
}

// GrantsCleared reports if the "grants" edge to the Grant entity was cleared.
func (m *UserMutation) GrantsCleared() bool {
	return m.clearedgrants
}

// RemoveGrantIDs removes the "grants" edge to the Grant entity by IDs.
func (m *UserMutation) RemoveGrantIDs(ids ...uuid.UUID) {
	if m.removedgrants == nil {
		m.removedgrants = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.grants, ids[i])
		m.removedgrants[ids[i]] = struct{}{}
	}
}

// RemovedGrants returns the removed IDs of the "grants" edge to the Grant entity.
func (m *UserMutation) RemovedGrantsIDs() (ids []uuid.UUID) {
	for id := range m.removedgrants {
		ids = append(ids, id)
	}
	return
}

// GrantsIDs returns the "grants" edge IDs in the mutation.
func (m *UserMutation) GrantsIDs() (ids []uuid.UUID) {
	for id := range m.grants {
		ids = append(ids, id)
	}
	return
}

// ResetGrants resets all changes to the "grants" edge.
func (m *UserMutation) ResetGrants() {
	m.grants = nil
	m.clearedgrants = false
	m.removedgrants = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.full_name != nil {
		fields = append(fields, user.FieldFullName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.groups != nil {
		fields = append(fields, user.FieldGroups)
	}
	if m.is_admin != nil {
		fields = append(fields, user.FieldIsAdmin)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.submitted_tickets != nil {
		fields = append(fields, user.FieldSubmittedTickets)
	}
	if m.submitted_grants != nil {
		fields = append(fields, user.FieldSubmittedGrants)
	}
	if m.totalDataSize != nil {
		fields = append(fields, user.FieldTotalDataSize)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldFullName:
		return m.FullName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldGroups:
		return m.Groups()
	case user.FieldIsAdmin:
		return m.IsAdmin()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldSubmittedTickets:
		return m.SubmittedTickets()
	case user.FieldSubmittedGrants:
		return m.SubmittedGrants()
	case user.FieldTotalDataSize:
		return m.TotalDataSize()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldFullName:
		return m.OldFullName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldGroups:
		return m.OldGroups(ctx)
	case user.FieldIsAdmin:
		return m.OldIsAdmin(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldSubmittedTickets:
		return m.OldSubmittedTickets(ctx)
	case user.FieldSubmittedGrants:
		return m.OldSubmittedGrants(ctx)
	case user.FieldTotalDataSize:
		return m.OldTotalDataSize(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldGroups:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroups(v)
		return nil
	case user.FieldIsAdmin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsAdmin(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldSubmittedTickets:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmittedTickets(v)
		return nil
	case user.FieldSubmittedGrants:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmittedGrants(v)
		return nil
	case user.FieldTotalDataSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalDataSize(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addsubmitted_tickets != nil {
		fields = append(fields, user.FieldSubmittedTickets)
	}
	if m.addsubmitted_grants != nil {
		fields = append(fields, user.FieldSubmittedGrants)
	}
	if m.addtotalDataSize != nil {
		fields = append(fields, user.FieldTotalDataSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldSubmittedTickets:
		return m.AddedSubmittedTickets()
	case user.FieldSubmittedGrants:
		return m.AddedSubmittedGrants()
	case user.FieldTotalDataSize:
		return m.AddedTotalDataSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldSubmittedTickets:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSubmittedTickets(v)
		return nil
	case user.FieldSubmittedGrants:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSubmittedGrants(v)
		return nil
	case user.FieldTotalDataSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalDataSize(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldFullName:
		m.ResetFullName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldGroups:
		m.ResetGroups()
		return nil
	case user.FieldIsAdmin:
		m.ResetIsAdmin()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldSubmittedTickets:
		m.ResetSubmittedTickets()
		return nil
	case user.FieldSubmittedGrants:
		m.ResetSubmittedGrants()
		return nil
	case user.FieldTotalDataSize:
		m.ResetTotalDataSize()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.sessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.tickets != nil {
		edges = append(edges, user.EdgeTickets)
	}
	if m.grants != nil {
		edges = append(edges, user.EdgeGrants)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.tickets))
		for id := range m.tickets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGrants:
		ids := make([]ent.Value, 0, len(m.grants))
		for id := range m.grants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedsessions != nil {
		edges = append(edges, user.EdgeSessions)
	}
	if m.removedtickets != nil {
		edges = append(edges, user.EdgeTickets)
	}
	if m.removedgrants != nil {
		edges = append(edges, user.EdgeGrants)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.removedtickets))
		for id := range m.removedtickets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGrants:
		ids := make([]ent.Value, 0, len(m.removedgrants))
		for id := range m.removedgrants {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsessions {
		edges = append(edges, user.EdgeSessions)
	}
	if m.clearedtickets {
		edges = append(edges, user.EdgeTickets)
	}
	if m.clearedgrants {
		edges = append(edges, user.EdgeGrants)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeSessions:
		return m.clearedsessions
	case user.EdgeTickets:
		return m.clearedtickets
	case user.EdgeGrants:
		return m.clearedgrants
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeSessions:
		m.ResetSessions()
		return nil
	case user.EdgeTickets:
		m.ResetTickets()
		return nil
	case user.EdgeGrants:
		m.ResetGrants()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
