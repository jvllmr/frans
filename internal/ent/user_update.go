// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/internal/ent/filedata"
	"github.com/jvllmr/frans/internal/ent/grant"
	"github.com/jvllmr/frans/internal/ent/predicate"
	"github.com/jvllmr/frans/internal/ent/session"
	"github.com/jvllmr/frans/internal/ent/ticket"
	"github.com/jvllmr/frans/internal/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUsername sets the "username" field.
func (_u *UserUpdate) SetUsername(v string) *UserUpdate {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdate) SetNillableUsername(v *string) *UserUpdate {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetFullName sets the "full_name" field.
func (_u *UserUpdate) SetFullName(v string) *UserUpdate {
	_u.mutation.SetFullName(v)
	return _u
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFullName(v *string) *UserUpdate {
	if v != nil {
		_u.SetFullName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetGroups sets the "groups" field.
func (_u *UserUpdate) SetGroups(v []string) *UserUpdate {
	_u.mutation.SetGroups(v)
	return _u
}

// AppendGroups appends value to the "groups" field.
func (_u *UserUpdate) AppendGroups(v []string) *UserUpdate {
	_u.mutation.AppendGroups(v)
	return _u
}

// SetIsAdmin sets the "is_admin" field.
func (_u *UserUpdate) SetIsAdmin(v bool) *UserUpdate {
	_u.mutation.SetIsAdmin(v)
	return _u
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (_u *UserUpdate) SetNillableIsAdmin(v *bool) *UserUpdate {
	if v != nil {
		_u.SetIsAdmin(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserUpdate) SetCreatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCreatedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetSubmittedTickets sets the "submitted_tickets" field.
func (_u *UserUpdate) SetSubmittedTickets(v int) *UserUpdate {
	_u.mutation.ResetSubmittedTickets()
	_u.mutation.SetSubmittedTickets(v)
	return _u
}

// SetNillableSubmittedTickets sets the "submitted_tickets" field if the given value is not nil.
func (_u *UserUpdate) SetNillableSubmittedTickets(v *int) *UserUpdate {
	if v != nil {
		_u.SetSubmittedTickets(*v)
	}
	return _u
}

// AddSubmittedTickets adds value to the "submitted_tickets" field.
func (_u *UserUpdate) AddSubmittedTickets(v int) *UserUpdate {
	_u.mutation.AddSubmittedTickets(v)
	return _u
}

// SetSubmittedGrants sets the "submitted_grants" field.
func (_u *UserUpdate) SetSubmittedGrants(v int) *UserUpdate {
	_u.mutation.ResetSubmittedGrants()
	_u.mutation.SetSubmittedGrants(v)
	return _u
}

// SetNillableSubmittedGrants sets the "submitted_grants" field if the given value is not nil.
func (_u *UserUpdate) SetNillableSubmittedGrants(v *int) *UserUpdate {
	if v != nil {
		_u.SetSubmittedGrants(*v)
	}
	return _u
}

// AddSubmittedGrants adds value to the "submitted_grants" field.
func (_u *UserUpdate) AddSubmittedGrants(v int) *UserUpdate {
	_u.mutation.AddSubmittedGrants(v)
	return _u
}

// SetTotalDataSize sets the "totalDataSize" field.
func (_u *UserUpdate) SetTotalDataSize(v int64) *UserUpdate {
	_u.mutation.ResetTotalDataSize()
	_u.mutation.SetTotalDataSize(v)
	return _u
}

// SetNillableTotalDataSize sets the "totalDataSize" field if the given value is not nil.
func (_u *UserUpdate) SetNillableTotalDataSize(v *int64) *UserUpdate {
	if v != nil {
		_u.SetTotalDataSize(*v)
	}
	return _u
}

// AddTotalDataSize adds value to the "totalDataSize" field.
func (_u *UserUpdate) AddTotalDataSize(v int64) *UserUpdate {
	_u.mutation.AddTotalDataSize(v)
	return _u
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (_u *UserUpdate) AddSessionIDs(ids ...int) *UserUpdate {
	_u.mutation.AddSessionIDs(ids...)
	return _u
}

// AddSessions adds the "sessions" edges to the Session entity.
func (_u *UserUpdate) AddSessions(v ...*Session) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSessionIDs(ids...)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (_u *UserUpdate) AddTicketIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddTicketIDs(ids...)
	return _u
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (_u *UserUpdate) AddTickets(v ...*Ticket) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTicketIDs(ids...)
}

// AddGrantIDs adds the "grants" edge to the Grant entity by IDs.
func (_u *UserUpdate) AddGrantIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.AddGrantIDs(ids...)
	return _u
}

// AddGrants adds the "grants" edges to the Grant entity.
func (_u *UserUpdate) AddGrants(v ...*Grant) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGrantIDs(ids...)
}

// AddFileinfoIDs adds the "fileinfos" edge to the FileData entity by IDs.
func (_u *UserUpdate) AddFileinfoIDs(ids ...string) *UserUpdate {
	_u.mutation.AddFileinfoIDs(ids...)
	return _u
}

// AddFileinfos adds the "fileinfos" edges to the FileData entity.
func (_u *UserUpdate) AddFileinfos(v ...*FileData) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileinfoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (_u *UserUpdate) ClearSessions() *UserUpdate {
	_u.mutation.ClearSessions()
	return _u
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (_u *UserUpdate) RemoveSessionIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveSessionIDs(ids...)
	return _u
}

// RemoveSessions removes "sessions" edges to Session entities.
func (_u *UserUpdate) RemoveSessions(v ...*Session) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSessionIDs(ids...)
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (_u *UserUpdate) ClearTickets() *UserUpdate {
	_u.mutation.ClearTickets()
	return _u
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (_u *UserUpdate) RemoveTicketIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveTicketIDs(ids...)
	return _u
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (_u *UserUpdate) RemoveTickets(v ...*Ticket) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTicketIDs(ids...)
}

// ClearGrants clears all "grants" edges to the Grant entity.
func (_u *UserUpdate) ClearGrants() *UserUpdate {
	_u.mutation.ClearGrants()
	return _u
}

// RemoveGrantIDs removes the "grants" edge to Grant entities by IDs.
func (_u *UserUpdate) RemoveGrantIDs(ids ...uuid.UUID) *UserUpdate {
	_u.mutation.RemoveGrantIDs(ids...)
	return _u
}

// RemoveGrants removes "grants" edges to Grant entities.
func (_u *UserUpdate) RemoveGrants(v ...*Grant) *UserUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGrantIDs(ids...)
}

// ClearFileinfos clears all "fileinfos" edges to the FileData entity.
func (_u *UserUpdate) ClearFileinfos() *UserUpdate {
	_u.mutation.ClearFileinfos()
	return _u
}

// RemoveFileinfoIDs removes the "fileinfos" edge to FileData entities by IDs.
func (_u *UserUpdate) RemoveFileinfoIDs(ids ...string) *UserUpdate {
	_u.mutation.RemoveFileinfoIDs(ids...)
	return _u
}

// RemoveFileinfos removes "fileinfos" edges to FileData entities.
func (_u *UserUpdate) RemoveFileinfos(v ...*FileData) *UserUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileinfoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.FullName(); ok {
		_spec.SetField(user.FieldFullName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Groups(); ok {
		_spec.SetField(user.FieldGroups, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldGroups, value)
		})
	}
	if value, ok := _u.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.SubmittedTickets(); ok {
		_spec.SetField(user.FieldSubmittedTickets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSubmittedTickets(); ok {
		_spec.AddField(user.FieldSubmittedTickets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.SubmittedGrants(); ok {
		_spec.SetField(user.FieldSubmittedGrants, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSubmittedGrants(); ok {
		_spec.AddField(user.FieldSubmittedGrants, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalDataSize(); ok {
		_spec.SetField(user.FieldTotalDataSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedTotalDataSize(); ok {
		_spec.AddField(user.FieldTotalDataSize, field.TypeInt64, value)
	}
	if _u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !_u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !_u.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GrantsTable,
			Columns: []string{user.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGrantsIDs(); len(nodes) > 0 && !_u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GrantsTable,
			Columns: []string{user.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GrantsTable,
			Columns: []string{user.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileinfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FileinfosTable,
			Columns: user.FileinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedata.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFileinfosIDs(); len(nodes) > 0 && !_u.mutation.FileinfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FileinfosTable,
			Columns: user.FileinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileinfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FileinfosTable,
			Columns: user.FileinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (_u *UserUpdateOne) SetUsername(v string) *UserUpdateOne {
	_u.mutation.SetUsername(v)
	return _u
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableUsername(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetUsername(*v)
	}
	return _u
}

// SetFullName sets the "full_name" field.
func (_u *UserUpdateOne) SetFullName(v string) *UserUpdateOne {
	_u.mutation.SetFullName(v)
	return _u
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFullName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetFullName(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetGroups sets the "groups" field.
func (_u *UserUpdateOne) SetGroups(v []string) *UserUpdateOne {
	_u.mutation.SetGroups(v)
	return _u
}

// AppendGroups appends value to the "groups" field.
func (_u *UserUpdateOne) AppendGroups(v []string) *UserUpdateOne {
	_u.mutation.AppendGroups(v)
	return _u
}

// SetIsAdmin sets the "is_admin" field.
func (_u *UserUpdateOne) SetIsAdmin(v bool) *UserUpdateOne {
	_u.mutation.SetIsAdmin(v)
	return _u
}

// SetNillableIsAdmin sets the "is_admin" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableIsAdmin(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetIsAdmin(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserUpdateOne) SetCreatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCreatedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetSubmittedTickets sets the "submitted_tickets" field.
func (_u *UserUpdateOne) SetSubmittedTickets(v int) *UserUpdateOne {
	_u.mutation.ResetSubmittedTickets()
	_u.mutation.SetSubmittedTickets(v)
	return _u
}

// SetNillableSubmittedTickets sets the "submitted_tickets" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableSubmittedTickets(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetSubmittedTickets(*v)
	}
	return _u
}

// AddSubmittedTickets adds value to the "submitted_tickets" field.
func (_u *UserUpdateOne) AddSubmittedTickets(v int) *UserUpdateOne {
	_u.mutation.AddSubmittedTickets(v)
	return _u
}

// SetSubmittedGrants sets the "submitted_grants" field.
func (_u *UserUpdateOne) SetSubmittedGrants(v int) *UserUpdateOne {
	_u.mutation.ResetSubmittedGrants()
	_u.mutation.SetSubmittedGrants(v)
	return _u
}

// SetNillableSubmittedGrants sets the "submitted_grants" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableSubmittedGrants(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetSubmittedGrants(*v)
	}
	return _u
}

// AddSubmittedGrants adds value to the "submitted_grants" field.
func (_u *UserUpdateOne) AddSubmittedGrants(v int) *UserUpdateOne {
	_u.mutation.AddSubmittedGrants(v)
	return _u
}

// SetTotalDataSize sets the "totalDataSize" field.
func (_u *UserUpdateOne) SetTotalDataSize(v int64) *UserUpdateOne {
	_u.mutation.ResetTotalDataSize()
	_u.mutation.SetTotalDataSize(v)
	return _u
}

// SetNillableTotalDataSize sets the "totalDataSize" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTotalDataSize(v *int64) *UserUpdateOne {
	if v != nil {
		_u.SetTotalDataSize(*v)
	}
	return _u
}

// AddTotalDataSize adds value to the "totalDataSize" field.
func (_u *UserUpdateOne) AddTotalDataSize(v int64) *UserUpdateOne {
	_u.mutation.AddTotalDataSize(v)
	return _u
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (_u *UserUpdateOne) AddSessionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddSessionIDs(ids...)
	return _u
}

// AddSessions adds the "sessions" edges to the Session entity.
func (_u *UserUpdateOne) AddSessions(v ...*Session) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSessionIDs(ids...)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (_u *UserUpdateOne) AddTicketIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddTicketIDs(ids...)
	return _u
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (_u *UserUpdateOne) AddTickets(v ...*Ticket) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTicketIDs(ids...)
}

// AddGrantIDs adds the "grants" edge to the Grant entity by IDs.
func (_u *UserUpdateOne) AddGrantIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.AddGrantIDs(ids...)
	return _u
}

// AddGrants adds the "grants" edges to the Grant entity.
func (_u *UserUpdateOne) AddGrants(v ...*Grant) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGrantIDs(ids...)
}

// AddFileinfoIDs adds the "fileinfos" edge to the FileData entity by IDs.
func (_u *UserUpdateOne) AddFileinfoIDs(ids ...string) *UserUpdateOne {
	_u.mutation.AddFileinfoIDs(ids...)
	return _u
}

// AddFileinfos adds the "fileinfos" edges to the FileData entity.
func (_u *UserUpdateOne) AddFileinfos(v ...*FileData) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileinfoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (_u *UserUpdateOne) ClearSessions() *UserUpdateOne {
	_u.mutation.ClearSessions()
	return _u
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (_u *UserUpdateOne) RemoveSessionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveSessionIDs(ids...)
	return _u
}

// RemoveSessions removes "sessions" edges to Session entities.
func (_u *UserUpdateOne) RemoveSessions(v ...*Session) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSessionIDs(ids...)
}

// ClearTickets clears all "tickets" edges to the Ticket entity.
func (_u *UserUpdateOne) ClearTickets() *UserUpdateOne {
	_u.mutation.ClearTickets()
	return _u
}

// RemoveTicketIDs removes the "tickets" edge to Ticket entities by IDs.
func (_u *UserUpdateOne) RemoveTicketIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveTicketIDs(ids...)
	return _u
}

// RemoveTickets removes "tickets" edges to Ticket entities.
func (_u *UserUpdateOne) RemoveTickets(v ...*Ticket) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTicketIDs(ids...)
}

// ClearGrants clears all "grants" edges to the Grant entity.
func (_u *UserUpdateOne) ClearGrants() *UserUpdateOne {
	_u.mutation.ClearGrants()
	return _u
}

// RemoveGrantIDs removes the "grants" edge to Grant entities by IDs.
func (_u *UserUpdateOne) RemoveGrantIDs(ids ...uuid.UUID) *UserUpdateOne {
	_u.mutation.RemoveGrantIDs(ids...)
	return _u
}

// RemoveGrants removes "grants" edges to Grant entities.
func (_u *UserUpdateOne) RemoveGrants(v ...*Grant) *UserUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGrantIDs(ids...)
}

// ClearFileinfos clears all "fileinfos" edges to the FileData entity.
func (_u *UserUpdateOne) ClearFileinfos() *UserUpdateOne {
	_u.mutation.ClearFileinfos()
	return _u
}

// RemoveFileinfoIDs removes the "fileinfos" edge to FileData entities by IDs.
func (_u *UserUpdateOne) RemoveFileinfoIDs(ids ...string) *UserUpdateOne {
	_u.mutation.RemoveFileinfoIDs(ids...)
	return _u
}

// RemoveFileinfos removes "fileinfos" edges to FileData entities.
func (_u *UserUpdateOne) RemoveFileinfos(v ...*FileData) *UserUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileinfoIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.FullName(); ok {
		_spec.SetField(user.FieldFullName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.Groups(); ok {
		_spec.SetField(user.FieldGroups, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldGroups, value)
		})
	}
	if value, ok := _u.mutation.IsAdmin(); ok {
		_spec.SetField(user.FieldIsAdmin, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.SubmittedTickets(); ok {
		_spec.SetField(user.FieldSubmittedTickets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSubmittedTickets(); ok {
		_spec.AddField(user.FieldSubmittedTickets, field.TypeInt, value)
	}
	if value, ok := _u.mutation.SubmittedGrants(); ok {
		_spec.SetField(user.FieldSubmittedGrants, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSubmittedGrants(); ok {
		_spec.AddField(user.FieldSubmittedGrants, field.TypeInt, value)
	}
	if value, ok := _u.mutation.TotalDataSize(); ok {
		_spec.SetField(user.FieldTotalDataSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedTotalDataSize(); ok {
		_spec.AddField(user.FieldTotalDataSize, field.TypeInt64, value)
	}
	if _u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !_u.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTicketsIDs(); len(nodes) > 0 && !_u.mutation.TicketsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TicketsTable,
			Columns: []string{user.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GrantsTable,
			Columns: []string{user.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGrantsIDs(); len(nodes) > 0 && !_u.mutation.GrantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GrantsTable,
			Columns: []string{user.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GrantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GrantsTable,
			Columns: []string{user.GrantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileinfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FileinfosTable,
			Columns: user.FileinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedata.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFileinfosIDs(); len(nodes) > 0 && !_u.mutation.FileinfosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FileinfosTable,
			Columns: user.FileinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileinfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.FileinfosTable,
			Columns: user.FileinfosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(filedata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
