// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/internal/ent/file"
	"github.com/jvllmr/frans/internal/ent/grant"
	"github.com/jvllmr/frans/internal/ent/shareaccesstoken"
	"github.com/jvllmr/frans/internal/ent/user"
)

// GrantCreate is the builder for creating a Grant entity.
type GrantCreate struct {
	config
	mutation *GrantMutation
	hooks    []Hook
}

// SetComment sets the "comment" field.
func (_c *GrantCreate) SetComment(v string) *GrantCreate {
	_c.mutation.SetComment(v)
	return _c
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (_c *GrantCreate) SetNillableComment(v *string) *GrantCreate {
	if v != nil {
		_c.SetComment(*v)
	}
	return _c
}

// SetExpiryType sets the "expiry_type" field.
func (_c *GrantCreate) SetExpiryType(v string) *GrantCreate {
	_c.mutation.SetExpiryType(v)
	return _c
}

// SetHashedPassword sets the "hashed_password" field.
func (_c *GrantCreate) SetHashedPassword(v string) *GrantCreate {
	_c.mutation.SetHashedPassword(v)
	return _c
}

// SetSalt sets the "salt" field.
func (_c *GrantCreate) SetSalt(v string) *GrantCreate {
	_c.mutation.SetSalt(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *GrantCreate) SetCreatedAt(v time.Time) *GrantCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *GrantCreate) SetNillableCreatedAt(v *time.Time) *GrantCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (_c *GrantCreate) SetExpiryTotalDays(v uint8) *GrantCreate {
	_c.mutation.SetExpiryTotalDays(v)
	return _c
}

// SetExpiryDaysSinceLastUpload sets the "expiry_days_since_last_upload" field.
func (_c *GrantCreate) SetExpiryDaysSinceLastUpload(v uint8) *GrantCreate {
	_c.mutation.SetExpiryDaysSinceLastUpload(v)
	return _c
}

// SetExpiryTotalUploads sets the "expiry_total_uploads" field.
func (_c *GrantCreate) SetExpiryTotalUploads(v uint8) *GrantCreate {
	_c.mutation.SetExpiryTotalUploads(v)
	return _c
}

// SetFileExpiryType sets the "file_expiry_type" field.
func (_c *GrantCreate) SetFileExpiryType(v string) *GrantCreate {
	_c.mutation.SetFileExpiryType(v)
	return _c
}

// SetFileExpiryTotalDays sets the "file_expiry_total_days" field.
func (_c *GrantCreate) SetFileExpiryTotalDays(v uint8) *GrantCreate {
	_c.mutation.SetFileExpiryTotalDays(v)
	return _c
}

// SetFileExpiryDaysSinceLastDownload sets the "file_expiry_days_since_last_download" field.
func (_c *GrantCreate) SetFileExpiryDaysSinceLastDownload(v uint8) *GrantCreate {
	_c.mutation.SetFileExpiryDaysSinceLastDownload(v)
	return _c
}

// SetFileExpiryTotalDownloads sets the "file_expiry_total_downloads" field.
func (_c *GrantCreate) SetFileExpiryTotalDownloads(v uint8) *GrantCreate {
	_c.mutation.SetFileExpiryTotalDownloads(v)
	return _c
}

// SetLastUpload sets the "last_upload" field.
func (_c *GrantCreate) SetLastUpload(v time.Time) *GrantCreate {
	_c.mutation.SetLastUpload(v)
	return _c
}

// SetNillableLastUpload sets the "last_upload" field if the given value is not nil.
func (_c *GrantCreate) SetNillableLastUpload(v *time.Time) *GrantCreate {
	if v != nil {
		_c.SetLastUpload(*v)
	}
	return _c
}

// SetTimesUploaded sets the "times_uploaded" field.
func (_c *GrantCreate) SetTimesUploaded(v uint64) *GrantCreate {
	_c.mutation.SetTimesUploaded(v)
	return _c
}

// SetNillableTimesUploaded sets the "times_uploaded" field if the given value is not nil.
func (_c *GrantCreate) SetNillableTimesUploaded(v *uint64) *GrantCreate {
	if v != nil {
		_c.SetTimesUploaded(*v)
	}
	return _c
}

// SetEmailOnUpload sets the "email_on_upload" field.
func (_c *GrantCreate) SetEmailOnUpload(v string) *GrantCreate {
	_c.mutation.SetEmailOnUpload(v)
	return _c
}

// SetNillableEmailOnUpload sets the "email_on_upload" field if the given value is not nil.
func (_c *GrantCreate) SetNillableEmailOnUpload(v *string) *GrantCreate {
	if v != nil {
		_c.SetEmailOnUpload(*v)
	}
	return _c
}

// SetCreatorLang sets the "creator_lang" field.
func (_c *GrantCreate) SetCreatorLang(v string) *GrantCreate {
	_c.mutation.SetCreatorLang(v)
	return _c
}

// SetNillableCreatorLang sets the "creator_lang" field if the given value is not nil.
func (_c *GrantCreate) SetNillableCreatorLang(v *string) *GrantCreate {
	if v != nil {
		_c.SetCreatorLang(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *GrantCreate) SetID(v uuid.UUID) *GrantCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_c *GrantCreate) AddFileIDs(ids ...uuid.UUID) *GrantCreate {
	_c.mutation.AddFileIDs(ids...)
	return _c
}

// AddFiles adds the "files" edges to the File entity.
func (_c *GrantCreate) AddFiles(v ...*File) *GrantCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFileIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_c *GrantCreate) SetOwnerID(id uuid.UUID) *GrantCreate {
	_c.mutation.SetOwnerID(id)
	return _c
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (_c *GrantCreate) SetNillableOwnerID(id *uuid.UUID) *GrantCreate {
	if id != nil {
		_c = _c.SetOwnerID(*id)
	}
	return _c
}

// SetOwner sets the "owner" edge to the User entity.
func (_c *GrantCreate) SetOwner(v *User) *GrantCreate {
	return _c.SetOwnerID(v.ID)
}

// AddShareaccesstokenIDs adds the "shareaccesstokens" edge to the ShareAccessToken entity by IDs.
func (_c *GrantCreate) AddShareaccesstokenIDs(ids ...string) *GrantCreate {
	_c.mutation.AddShareaccesstokenIDs(ids...)
	return _c
}

// AddShareaccesstokens adds the "shareaccesstokens" edges to the ShareAccessToken entity.
func (_c *GrantCreate) AddShareaccesstokens(v ...*ShareAccessToken) *GrantCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddShareaccesstokenIDs(ids...)
}

// Mutation returns the GrantMutation object of the builder.
func (_c *GrantCreate) Mutation() *GrantMutation {
	return _c.mutation
}

// Save creates the Grant in the database.
func (_c *GrantCreate) Save(ctx context.Context) (*Grant, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *GrantCreate) SaveX(ctx context.Context) *Grant {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GrantCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GrantCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *GrantCreate) defaults() {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := grant.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.TimesUploaded(); !ok {
		v := grant.DefaultTimesUploaded
		_c.mutation.SetTimesUploaded(v)
	}
	if _, ok := _c.mutation.CreatorLang(); !ok {
		v := grant.DefaultCreatorLang
		_c.mutation.SetCreatorLang(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *GrantCreate) check() error {
	if _, ok := _c.mutation.ExpiryType(); !ok {
		return &ValidationError{Name: "expiry_type", err: errors.New(`ent: missing required field "Grant.expiry_type"`)}
	}
	if _, ok := _c.mutation.HashedPassword(); !ok {
		return &ValidationError{Name: "hashed_password", err: errors.New(`ent: missing required field "Grant.hashed_password"`)}
	}
	if _, ok := _c.mutation.Salt(); !ok {
		return &ValidationError{Name: "salt", err: errors.New(`ent: missing required field "Grant.salt"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Grant.created_at"`)}
	}
	if _, ok := _c.mutation.ExpiryTotalDays(); !ok {
		return &ValidationError{Name: "expiry_total_days", err: errors.New(`ent: missing required field "Grant.expiry_total_days"`)}
	}
	if _, ok := _c.mutation.ExpiryDaysSinceLastUpload(); !ok {
		return &ValidationError{Name: "expiry_days_since_last_upload", err: errors.New(`ent: missing required field "Grant.expiry_days_since_last_upload"`)}
	}
	if _, ok := _c.mutation.ExpiryTotalUploads(); !ok {
		return &ValidationError{Name: "expiry_total_uploads", err: errors.New(`ent: missing required field "Grant.expiry_total_uploads"`)}
	}
	if _, ok := _c.mutation.FileExpiryType(); !ok {
		return &ValidationError{Name: "file_expiry_type", err: errors.New(`ent: missing required field "Grant.file_expiry_type"`)}
	}
	if _, ok := _c.mutation.FileExpiryTotalDays(); !ok {
		return &ValidationError{Name: "file_expiry_total_days", err: errors.New(`ent: missing required field "Grant.file_expiry_total_days"`)}
	}
	if _, ok := _c.mutation.FileExpiryDaysSinceLastDownload(); !ok {
		return &ValidationError{Name: "file_expiry_days_since_last_download", err: errors.New(`ent: missing required field "Grant.file_expiry_days_since_last_download"`)}
	}
	if _, ok := _c.mutation.FileExpiryTotalDownloads(); !ok {
		return &ValidationError{Name: "file_expiry_total_downloads", err: errors.New(`ent: missing required field "Grant.file_expiry_total_downloads"`)}
	}
	if _, ok := _c.mutation.TimesUploaded(); !ok {
		return &ValidationError{Name: "times_uploaded", err: errors.New(`ent: missing required field "Grant.times_uploaded"`)}
	}
	if _, ok := _c.mutation.CreatorLang(); !ok {
		return &ValidationError{Name: "creator_lang", err: errors.New(`ent: missing required field "Grant.creator_lang"`)}
	}
	return nil
}

func (_c *GrantCreate) sqlSave(ctx context.Context) (*Grant, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *GrantCreate) createSpec() (*Grant, *sqlgraph.CreateSpec) {
	var (
		_node = &Grant{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(grant.Table, sqlgraph.NewFieldSpec(grant.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Comment(); ok {
		_spec.SetField(grant.FieldComment, field.TypeString, value)
		_node.Comment = &value
	}
	if value, ok := _c.mutation.ExpiryType(); ok {
		_spec.SetField(grant.FieldExpiryType, field.TypeString, value)
		_node.ExpiryType = value
	}
	if value, ok := _c.mutation.HashedPassword(); ok {
		_spec.SetField(grant.FieldHashedPassword, field.TypeString, value)
		_node.HashedPassword = value
	}
	if value, ok := _c.mutation.Salt(); ok {
		_spec.SetField(grant.FieldSalt, field.TypeString, value)
		_node.Salt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(grant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.ExpiryTotalDays(); ok {
		_spec.SetField(grant.FieldExpiryTotalDays, field.TypeUint8, value)
		_node.ExpiryTotalDays = value
	}
	if value, ok := _c.mutation.ExpiryDaysSinceLastUpload(); ok {
		_spec.SetField(grant.FieldExpiryDaysSinceLastUpload, field.TypeUint8, value)
		_node.ExpiryDaysSinceLastUpload = value
	}
	if value, ok := _c.mutation.ExpiryTotalUploads(); ok {
		_spec.SetField(grant.FieldExpiryTotalUploads, field.TypeUint8, value)
		_node.ExpiryTotalUploads = value
	}
	if value, ok := _c.mutation.FileExpiryType(); ok {
		_spec.SetField(grant.FieldFileExpiryType, field.TypeString, value)
		_node.FileExpiryType = value
	}
	if value, ok := _c.mutation.FileExpiryTotalDays(); ok {
		_spec.SetField(grant.FieldFileExpiryTotalDays, field.TypeUint8, value)
		_node.FileExpiryTotalDays = value
	}
	if value, ok := _c.mutation.FileExpiryDaysSinceLastDownload(); ok {
		_spec.SetField(grant.FieldFileExpiryDaysSinceLastDownload, field.TypeUint8, value)
		_node.FileExpiryDaysSinceLastDownload = value
	}
	if value, ok := _c.mutation.FileExpiryTotalDownloads(); ok {
		_spec.SetField(grant.FieldFileExpiryTotalDownloads, field.TypeUint8, value)
		_node.FileExpiryTotalDownloads = value
	}
	if value, ok := _c.mutation.LastUpload(); ok {
		_spec.SetField(grant.FieldLastUpload, field.TypeTime, value)
		_node.LastUpload = &value
	}
	if value, ok := _c.mutation.TimesUploaded(); ok {
		_spec.SetField(grant.FieldTimesUploaded, field.TypeUint64, value)
		_node.TimesUploaded = value
	}
	if value, ok := _c.mutation.EmailOnUpload(); ok {
		_spec.SetField(grant.FieldEmailOnUpload, field.TypeString, value)
		_node.EmailOnUpload = &value
	}
	if value, ok := _c.mutation.CreatorLang(); ok {
		_spec.SetField(grant.FieldCreatorLang, field.TypeString, value)
		_node.CreatorLang = value
	}
	if nodes := _c.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   grant.FilesTable,
			Columns: grant.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grant.OwnerTable,
			Columns: []string{grant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_grants = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ShareaccesstokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   grant.ShareaccesstokensTable,
			Columns: []string{grant.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GrantCreateBulk is the builder for creating many Grant entities in bulk.
type GrantCreateBulk struct {
	config
	err      error
	builders []*GrantCreate
}

// Save creates the Grant entities in the database.
func (_c *GrantCreateBulk) Save(ctx context.Context) ([]*Grant, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Grant, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GrantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *GrantCreateBulk) SaveX(ctx context.Context) []*Grant {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GrantCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GrantCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
