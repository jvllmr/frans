// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// FilesColumns holds the columns for the "files" table.
	FilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "last_download", Type: field.TypeTime, Nullable: true},
		{Name: "times_downloaded", Type: field.TypeUint64, Default: 0},
		{Name: "expiry_type", Type: field.TypeString},
		{Name: "expiry_total_days", Type: field.TypeUint8},
		{Name: "expiry_days_since_last_download", Type: field.TypeUint8},
		{Name: "expiry_total_downloads", Type: field.TypeUint8},
		{Name: "file_data", Type: field.TypeString},
	}
	// FilesTable holds the schema information for the "files" table.
	FilesTable = &schema.Table{
		Name:       "files",
		Columns:    FilesColumns,
		PrimaryKey: []*schema.Column{FilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "files_file_data_data",
				Columns:    []*schema.Column{FilesColumns[9]},
				RefColumns: []*schema.Column{FileDataColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// FileDataColumns holds the columns for the "file_data" table.
	FileDataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "size", Type: field.TypeUint64},
	}
	// FileDataTable holds the schema information for the "file_data" table.
	FileDataTable = &schema.Table{
		Name:       "file_data",
		Columns:    FileDataColumns,
		PrimaryKey: []*schema.Column{FileDataColumns[0]},
	}
	// GrantsColumns holds the columns for the "grants" table.
	GrantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "comment", Type: field.TypeString, Nullable: true},
		{Name: "expiry_type", Type: field.TypeString},
		{Name: "hashed_password", Type: field.TypeString},
		{Name: "salt", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "expiry_total_days", Type: field.TypeUint8},
		{Name: "expiry_days_since_last_upload", Type: field.TypeUint8},
		{Name: "expiry_total_uploads", Type: field.TypeUint8},
		{Name: "file_expiry_type", Type: field.TypeString},
		{Name: "file_expiry_total_days", Type: field.TypeUint8},
		{Name: "file_expiry_days_since_last_download", Type: field.TypeUint8},
		{Name: "file_expiry_total_downloads", Type: field.TypeUint8},
		{Name: "last_upload", Type: field.TypeTime, Nullable: true},
		{Name: "times_uploaded", Type: field.TypeUint64, Default: 0},
		{Name: "email_on_upload", Type: field.TypeString, Nullable: true},
		{Name: "creator_lang", Type: field.TypeString, Default: "en"},
		{Name: "user_grants", Type: field.TypeUUID, Nullable: true},
	}
	// GrantsTable holds the schema information for the "grants" table.
	GrantsTable = &schema.Table{
		Name:       "grants",
		Columns:    GrantsColumns,
		PrimaryKey: []*schema.Column{GrantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "grants_users_grants",
				Columns:    []*schema.Column{GrantsColumns[17]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SessionsColumns holds the columns for the "sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "id_token", Type: field.TypeString, Unique: true},
		{Name: "expire", Type: field.TypeTime},
		{Name: "refresh_token", Type: field.TypeString},
		{Name: "user_sessions", Type: field.TypeUUID, Nullable: true},
	}
	// SessionsTable holds the schema information for the "sessions" table.
	SessionsTable = &schema.Table{
		Name:       "sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sessions_users_sessions",
				Columns:    []*schema.Column{SessionsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ShareAccessTokensColumns holds the columns for the "share_access_tokens" table.
	ShareAccessTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "expiry", Type: field.TypeTime},
		{Name: "grant_shareaccesstokens", Type: field.TypeUUID, Nullable: true},
		{Name: "ticket_shareaccesstokens", Type: field.TypeUUID, Nullable: true},
	}
	// ShareAccessTokensTable holds the schema information for the "share_access_tokens" table.
	ShareAccessTokensTable = &schema.Table{
		Name:       "share_access_tokens",
		Columns:    ShareAccessTokensColumns,
		PrimaryKey: []*schema.Column{ShareAccessTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "share_access_tokens_grants_shareaccesstokens",
				Columns:    []*schema.Column{ShareAccessTokensColumns[2]},
				RefColumns: []*schema.Column{GrantsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "share_access_tokens_tickets_shareaccesstokens",
				Columns:    []*schema.Column{ShareAccessTokensColumns[3]},
				RefColumns: []*schema.Column{TicketsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TicketsColumns holds the columns for the "tickets" table.
	TicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "comment", Type: field.TypeString, Nullable: true},
		{Name: "expiry_type", Type: field.TypeString},
		{Name: "hashed_password", Type: field.TypeString},
		{Name: "salt", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "expiry_total_days", Type: field.TypeUint8},
		{Name: "expiry_days_since_last_download", Type: field.TypeUint8},
		{Name: "expiry_total_downloads", Type: field.TypeUint8},
		{Name: "email_on_download", Type: field.TypeString, Nullable: true},
		{Name: "creator_lang", Type: field.TypeString, Default: "en"},
		{Name: "user_tickets", Type: field.TypeUUID, Nullable: true},
	}
	// TicketsTable holds the schema information for the "tickets" table.
	TicketsTable = &schema.Table{
		Name:       "tickets",
		Columns:    TicketsColumns,
		PrimaryKey: []*schema.Column{TicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickets_users_tickets",
				Columns:    []*schema.Column{TicketsColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "username", Type: field.TypeString},
		{Name: "full_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "groups", Type: field.TypeJSON},
		{Name: "is_admin", Type: field.TypeBool},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "submitted_tickets", Type: field.TypeInt, Default: 0},
		{Name: "submitted_grants", Type: field.TypeInt, Default: 0},
		{Name: "total_data_size", Type: field.TypeInt64, Default: 0},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// GrantFilesColumns holds the columns for the "grant_files" table.
	GrantFilesColumns = []*schema.Column{
		{Name: "grant_id", Type: field.TypeUUID},
		{Name: "file_id", Type: field.TypeUUID},
	}
	// GrantFilesTable holds the schema information for the "grant_files" table.
	GrantFilesTable = &schema.Table{
		Name:       "grant_files",
		Columns:    GrantFilesColumns,
		PrimaryKey: []*schema.Column{GrantFilesColumns[0], GrantFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "grant_files_grant_id",
				Columns:    []*schema.Column{GrantFilesColumns[0]},
				RefColumns: []*schema.Column{GrantsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "grant_files_file_id",
				Columns:    []*schema.Column{GrantFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TicketFilesColumns holds the columns for the "ticket_files" table.
	TicketFilesColumns = []*schema.Column{
		{Name: "ticket_id", Type: field.TypeUUID},
		{Name: "file_id", Type: field.TypeUUID},
	}
	// TicketFilesTable holds the schema information for the "ticket_files" table.
	TicketFilesTable = &schema.Table{
		Name:       "ticket_files",
		Columns:    TicketFilesColumns,
		PrimaryKey: []*schema.Column{TicketFilesColumns[0], TicketFilesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "ticket_files_ticket_id",
				Columns:    []*schema.Column{TicketFilesColumns[0]},
				RefColumns: []*schema.Column{TicketsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "ticket_files_file_id",
				Columns:    []*schema.Column{TicketFilesColumns[1]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserFileinfosColumns holds the columns for the "user_fileinfos" table.
	UserFileinfosColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "file_data_id", Type: field.TypeString},
	}
	// UserFileinfosTable holds the schema information for the "user_fileinfos" table.
	UserFileinfosTable = &schema.Table{
		Name:       "user_fileinfos",
		Columns:    UserFileinfosColumns,
		PrimaryKey: []*schema.Column{UserFileinfosColumns[0], UserFileinfosColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_fileinfos_user_id",
				Columns:    []*schema.Column{UserFileinfosColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_fileinfos_file_data_id",
				Columns:    []*schema.Column{UserFileinfosColumns[1]},
				RefColumns: []*schema.Column{FileDataColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		FilesTable,
		FileDataTable,
		GrantsTable,
		SessionsTable,
		ShareAccessTokensTable,
		TicketsTable,
		UsersTable,
		GrantFilesTable,
		TicketFilesTable,
		UserFileinfosTable,
	}
)

func init() {
	FilesTable.ForeignKeys[0].RefTable = FileDataTable
	GrantsTable.ForeignKeys[0].RefTable = UsersTable
	SessionsTable.ForeignKeys[0].RefTable = UsersTable
	ShareAccessTokensTable.ForeignKeys[0].RefTable = GrantsTable
	ShareAccessTokensTable.ForeignKeys[1].RefTable = TicketsTable
	TicketsTable.ForeignKeys[0].RefTable = UsersTable
	GrantFilesTable.ForeignKeys[0].RefTable = GrantsTable
	GrantFilesTable.ForeignKeys[1].RefTable = FilesTable
	TicketFilesTable.ForeignKeys[0].RefTable = TicketsTable
	TicketFilesTable.ForeignKeys[1].RefTable = FilesTable
	UserFileinfosTable.ForeignKeys[0].RefTable = UsersTable
	UserFileinfosTable.ForeignKeys[1].RefTable = FileDataTable
}
