// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ticket type in the database.
	Label = "ticket"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldExpiryType holds the string denoting the expirytype field in the database.
	FieldExpiryType = "expiry_type"
	// FieldHashedPassword holds the string denoting the hashed_password field in the database.
	FieldHashedPassword = "hashed_password"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLastDownload holds the string denoting the last_download field in the database.
	FieldLastDownload = "last_download"
	// FieldTimesDownloaded holds the string denoting the times_downloaded field in the database.
	FieldTimesDownloaded = "times_downloaded"
	// FieldExpiryTotalDays holds the string denoting the expiry_total_days field in the database.
	FieldExpiryTotalDays = "expiry_total_days"
	// FieldExpiryDaysSinceLastDownload holds the string denoting the expiry_days_since_last_download field in the database.
	FieldExpiryDaysSinceLastDownload = "expiry_days_since_last_download"
	// FieldExpiryTotalDownloads holds the string denoting the expiry_total_downloads field in the database.
	FieldExpiryTotalDownloads = "expiry_total_downloads"
	// FieldEmailOnDownload holds the string denoting the email_on_download field in the database.
	FieldEmailOnDownload = "email_on_download"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the ticket in the database.
	Table = "tickets"
	// FilesTable is the table that holds the files relation/edge. The primary key declared below.
	FilesTable = "ticket_files"
	// FilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FilesInverseTable = "files"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "tickets"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_tickets"
)

// Columns holds all SQL columns for ticket fields.
var Columns = []string{
	FieldID,
	FieldComment,
	FieldExpiryType,
	FieldHashedPassword,
	FieldSalt,
	FieldCreatedAt,
	FieldLastDownload,
	FieldTimesDownloaded,
	FieldExpiryTotalDays,
	FieldExpiryDaysSinceLastDownload,
	FieldExpiryTotalDownloads,
	FieldEmailOnDownload,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tickets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_tickets",
}

var (
	// FilesPrimaryKey and FilesColumn2 are the table columns denoting the
	// primary key for the files relation (M2M).
	FilesPrimaryKey = []string{"ticket_id", "file_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultTimesDownloaded holds the default value on creation for the "times_downloaded" field.
	DefaultTimesDownloaded uint64
)

// OrderOption defines the ordering options for the Ticket queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByExpiryType orders the results by the expiryType field.
func ByExpiryType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryType, opts...).ToFunc()
}

// ByHashedPassword orders the results by the hashed_password field.
func ByHashedPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHashedPassword, opts...).ToFunc()
}

// BySalt orders the results by the salt field.
func BySalt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLastDownload orders the results by the last_download field.
func ByLastDownload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastDownload, opts...).ToFunc()
}

// ByTimesDownloaded orders the results by the times_downloaded field.
func ByTimesDownloaded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimesDownloaded, opts...).ToFunc()
}

// ByExpiryTotalDays orders the results by the expiry_total_days field.
func ByExpiryTotalDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryTotalDays, opts...).ToFunc()
}

// ByExpiryDaysSinceLastDownload orders the results by the expiry_days_since_last_download field.
func ByExpiryDaysSinceLastDownload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryDaysSinceLastDownload, opts...).ToFunc()
}

// ByExpiryTotalDownloads orders the results by the expiry_total_downloads field.
func ByExpiryTotalDownloads(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiryTotalDownloads, opts...).ToFunc()
}

// ByEmailOnDownload orders the results by the email_on_download field.
func ByEmailOnDownload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailOnDownload, opts...).ToFunc()
}

// ByFilesCount orders the results by files count.
func ByFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilesStep(), opts...)
	}
}

// ByFiles orders the results by files terms.
func ByFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
