// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/pkg/ent/predicate"
	"github.com/jvllmr/frans/pkg/ent/shareaccesstoken"
	"github.com/jvllmr/frans/pkg/ent/ticket"
)

// ShareAccessTokenUpdate is the builder for updating ShareAccessToken entities.
type ShareAccessTokenUpdate struct {
	config
	hooks    []Hook
	mutation *ShareAccessTokenMutation
}

// Where appends a list predicates to the ShareAccessTokenUpdate builder.
func (satu *ShareAccessTokenUpdate) Where(ps ...predicate.ShareAccessToken) *ShareAccessTokenUpdate {
	satu.mutation.Where(ps...)
	return satu
}

// SetExpiry sets the "expiry" field.
func (satu *ShareAccessTokenUpdate) SetExpiry(t time.Time) *ShareAccessTokenUpdate {
	satu.mutation.SetExpiry(t)
	return satu
}

// SetNillableExpiry sets the "expiry" field if the given value is not nil.
func (satu *ShareAccessTokenUpdate) SetNillableExpiry(t *time.Time) *ShareAccessTokenUpdate {
	if t != nil {
		satu.SetExpiry(*t)
	}
	return satu
}

// SetTicketID sets the "ticket" edge to the Ticket entity by ID.
func (satu *ShareAccessTokenUpdate) SetTicketID(id uuid.UUID) *ShareAccessTokenUpdate {
	satu.mutation.SetTicketID(id)
	return satu
}

// SetNillableTicketID sets the "ticket" edge to the Ticket entity by ID if the given value is not nil.
func (satu *ShareAccessTokenUpdate) SetNillableTicketID(id *uuid.UUID) *ShareAccessTokenUpdate {
	if id != nil {
		satu = satu.SetTicketID(*id)
	}
	return satu
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (satu *ShareAccessTokenUpdate) SetTicket(t *Ticket) *ShareAccessTokenUpdate {
	return satu.SetTicketID(t.ID)
}

// Mutation returns the ShareAccessTokenMutation object of the builder.
func (satu *ShareAccessTokenUpdate) Mutation() *ShareAccessTokenMutation {
	return satu.mutation
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (satu *ShareAccessTokenUpdate) ClearTicket() *ShareAccessTokenUpdate {
	satu.mutation.ClearTicket()
	return satu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (satu *ShareAccessTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, satu.sqlSave, satu.mutation, satu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (satu *ShareAccessTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := satu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (satu *ShareAccessTokenUpdate) Exec(ctx context.Context) error {
	_, err := satu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (satu *ShareAccessTokenUpdate) ExecX(ctx context.Context) {
	if err := satu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (satu *ShareAccessTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(shareaccesstoken.Table, shareaccesstoken.Columns, sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString))
	if ps := satu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := satu.mutation.Expiry(); ok {
		_spec.SetField(shareaccesstoken.FieldExpiry, field.TypeTime, value)
	}
	if satu.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shareaccesstoken.TicketTable,
			Columns: []string{shareaccesstoken.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := satu.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shareaccesstoken.TicketTable,
			Columns: []string{shareaccesstoken.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, satu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shareaccesstoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	satu.mutation.done = true
	return n, nil
}

// ShareAccessTokenUpdateOne is the builder for updating a single ShareAccessToken entity.
type ShareAccessTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShareAccessTokenMutation
}

// SetExpiry sets the "expiry" field.
func (satuo *ShareAccessTokenUpdateOne) SetExpiry(t time.Time) *ShareAccessTokenUpdateOne {
	satuo.mutation.SetExpiry(t)
	return satuo
}

// SetNillableExpiry sets the "expiry" field if the given value is not nil.
func (satuo *ShareAccessTokenUpdateOne) SetNillableExpiry(t *time.Time) *ShareAccessTokenUpdateOne {
	if t != nil {
		satuo.SetExpiry(*t)
	}
	return satuo
}

// SetTicketID sets the "ticket" edge to the Ticket entity by ID.
func (satuo *ShareAccessTokenUpdateOne) SetTicketID(id uuid.UUID) *ShareAccessTokenUpdateOne {
	satuo.mutation.SetTicketID(id)
	return satuo
}

// SetNillableTicketID sets the "ticket" edge to the Ticket entity by ID if the given value is not nil.
func (satuo *ShareAccessTokenUpdateOne) SetNillableTicketID(id *uuid.UUID) *ShareAccessTokenUpdateOne {
	if id != nil {
		satuo = satuo.SetTicketID(*id)
	}
	return satuo
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (satuo *ShareAccessTokenUpdateOne) SetTicket(t *Ticket) *ShareAccessTokenUpdateOne {
	return satuo.SetTicketID(t.ID)
}

// Mutation returns the ShareAccessTokenMutation object of the builder.
func (satuo *ShareAccessTokenUpdateOne) Mutation() *ShareAccessTokenMutation {
	return satuo.mutation
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (satuo *ShareAccessTokenUpdateOne) ClearTicket() *ShareAccessTokenUpdateOne {
	satuo.mutation.ClearTicket()
	return satuo
}

// Where appends a list predicates to the ShareAccessTokenUpdate builder.
func (satuo *ShareAccessTokenUpdateOne) Where(ps ...predicate.ShareAccessToken) *ShareAccessTokenUpdateOne {
	satuo.mutation.Where(ps...)
	return satuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (satuo *ShareAccessTokenUpdateOne) Select(field string, fields ...string) *ShareAccessTokenUpdateOne {
	satuo.fields = append([]string{field}, fields...)
	return satuo
}

// Save executes the query and returns the updated ShareAccessToken entity.
func (satuo *ShareAccessTokenUpdateOne) Save(ctx context.Context) (*ShareAccessToken, error) {
	return withHooks(ctx, satuo.sqlSave, satuo.mutation, satuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (satuo *ShareAccessTokenUpdateOne) SaveX(ctx context.Context) *ShareAccessToken {
	node, err := satuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (satuo *ShareAccessTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := satuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (satuo *ShareAccessTokenUpdateOne) ExecX(ctx context.Context) {
	if err := satuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (satuo *ShareAccessTokenUpdateOne) sqlSave(ctx context.Context) (_node *ShareAccessToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(shareaccesstoken.Table, shareaccesstoken.Columns, sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString))
	id, ok := satuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShareAccessToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := satuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shareaccesstoken.FieldID)
		for _, f := range fields {
			if !shareaccesstoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shareaccesstoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := satuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := satuo.mutation.Expiry(); ok {
		_spec.SetField(shareaccesstoken.FieldExpiry, field.TypeTime, value)
	}
	if satuo.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shareaccesstoken.TicketTable,
			Columns: []string{shareaccesstoken.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := satuo.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   shareaccesstoken.TicketTable,
			Columns: []string{shareaccesstoken.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ShareAccessToken{config: satuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, satuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shareaccesstoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	satuo.mutation.done = true
	return _node, nil
}
