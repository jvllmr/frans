// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jvllmr/frans/pkg/ent/predicate"
	"github.com/jvllmr/frans/pkg/ent/shareaccesstoken"
)

// ShareAccessTokenDelete is the builder for deleting a ShareAccessToken entity.
type ShareAccessTokenDelete struct {
	config
	hooks    []Hook
	mutation *ShareAccessTokenMutation
}

// Where appends a list predicates to the ShareAccessTokenDelete builder.
func (satd *ShareAccessTokenDelete) Where(ps ...predicate.ShareAccessToken) *ShareAccessTokenDelete {
	satd.mutation.Where(ps...)
	return satd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (satd *ShareAccessTokenDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, satd.sqlExec, satd.mutation, satd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (satd *ShareAccessTokenDelete) ExecX(ctx context.Context) int {
	n, err := satd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (satd *ShareAccessTokenDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(shareaccesstoken.Table, sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString))
	if ps := satd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, satd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	satd.mutation.done = true
	return affected, err
}

// ShareAccessTokenDeleteOne is the builder for deleting a single ShareAccessToken entity.
type ShareAccessTokenDeleteOne struct {
	satd *ShareAccessTokenDelete
}

// Where appends a list predicates to the ShareAccessTokenDelete builder.
func (satdo *ShareAccessTokenDeleteOne) Where(ps ...predicate.ShareAccessToken) *ShareAccessTokenDeleteOne {
	satdo.satd.mutation.Where(ps...)
	return satdo
}

// Exec executes the deletion query.
func (satdo *ShareAccessTokenDeleteOne) Exec(ctx context.Context) error {
	n, err := satdo.satd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{shareaccesstoken.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (satdo *ShareAccessTokenDeleteOne) ExecX(ctx context.Context) {
	if err := satdo.Exec(ctx); err != nil {
		panic(err)
	}
}
