// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// FullName applies equality check predicate on the "full_name" field. It's identical to FullNameEQ.
func FullName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFullName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// IsAdmin applies equality check predicate on the "is_admin" field. It's identical to IsAdminEQ.
func IsAdmin(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsAdmin, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// SubmittedTickets applies equality check predicate on the "submitted_tickets" field. It's identical to SubmittedTicketsEQ.
func SubmittedTickets(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSubmittedTickets, v))
}

// SubmittedGrants applies equality check predicate on the "submitted_grants" field. It's identical to SubmittedGrantsEQ.
func SubmittedGrants(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSubmittedGrants, v))
}

// TotalDataSize applies equality check predicate on the "totalDataSize" field. It's identical to TotalDataSizeEQ.
func TotalDataSize(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTotalDataSize, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// FullNameEQ applies the EQ predicate on the "full_name" field.
func FullNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFullName, v))
}

// FullNameNEQ applies the NEQ predicate on the "full_name" field.
func FullNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFullName, v))
}

// FullNameIn applies the In predicate on the "full_name" field.
func FullNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFullName, vs...))
}

// FullNameNotIn applies the NotIn predicate on the "full_name" field.
func FullNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFullName, vs...))
}

// FullNameGT applies the GT predicate on the "full_name" field.
func FullNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFullName, v))
}

// FullNameGTE applies the GTE predicate on the "full_name" field.
func FullNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFullName, v))
}

// FullNameLT applies the LT predicate on the "full_name" field.
func FullNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFullName, v))
}

// FullNameLTE applies the LTE predicate on the "full_name" field.
func FullNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFullName, v))
}

// FullNameContains applies the Contains predicate on the "full_name" field.
func FullNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFullName, v))
}

// FullNameHasPrefix applies the HasPrefix predicate on the "full_name" field.
func FullNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFullName, v))
}

// FullNameHasSuffix applies the HasSuffix predicate on the "full_name" field.
func FullNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFullName, v))
}

// FullNameEqualFold applies the EqualFold predicate on the "full_name" field.
func FullNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFullName, v))
}

// FullNameContainsFold applies the ContainsFold predicate on the "full_name" field.
func FullNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFullName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// IsAdminEQ applies the EQ predicate on the "is_admin" field.
func IsAdminEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsAdmin, v))
}

// IsAdminNEQ applies the NEQ predicate on the "is_admin" field.
func IsAdminNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsAdmin, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// SubmittedTicketsEQ applies the EQ predicate on the "submitted_tickets" field.
func SubmittedTicketsEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSubmittedTickets, v))
}

// SubmittedTicketsNEQ applies the NEQ predicate on the "submitted_tickets" field.
func SubmittedTicketsNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSubmittedTickets, v))
}

// SubmittedTicketsIn applies the In predicate on the "submitted_tickets" field.
func SubmittedTicketsIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldSubmittedTickets, vs...))
}

// SubmittedTicketsNotIn applies the NotIn predicate on the "submitted_tickets" field.
func SubmittedTicketsNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSubmittedTickets, vs...))
}

// SubmittedTicketsGT applies the GT predicate on the "submitted_tickets" field.
func SubmittedTicketsGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldSubmittedTickets, v))
}

// SubmittedTicketsGTE applies the GTE predicate on the "submitted_tickets" field.
func SubmittedTicketsGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSubmittedTickets, v))
}

// SubmittedTicketsLT applies the LT predicate on the "submitted_tickets" field.
func SubmittedTicketsLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldSubmittedTickets, v))
}

// SubmittedTicketsLTE applies the LTE predicate on the "submitted_tickets" field.
func SubmittedTicketsLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSubmittedTickets, v))
}

// SubmittedGrantsEQ applies the EQ predicate on the "submitted_grants" field.
func SubmittedGrantsEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSubmittedGrants, v))
}

// SubmittedGrantsNEQ applies the NEQ predicate on the "submitted_grants" field.
func SubmittedGrantsNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSubmittedGrants, v))
}

// SubmittedGrantsIn applies the In predicate on the "submitted_grants" field.
func SubmittedGrantsIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldSubmittedGrants, vs...))
}

// SubmittedGrantsNotIn applies the NotIn predicate on the "submitted_grants" field.
func SubmittedGrantsNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSubmittedGrants, vs...))
}

// SubmittedGrantsGT applies the GT predicate on the "submitted_grants" field.
func SubmittedGrantsGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldSubmittedGrants, v))
}

// SubmittedGrantsGTE applies the GTE predicate on the "submitted_grants" field.
func SubmittedGrantsGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSubmittedGrants, v))
}

// SubmittedGrantsLT applies the LT predicate on the "submitted_grants" field.
func SubmittedGrantsLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldSubmittedGrants, v))
}

// SubmittedGrantsLTE applies the LTE predicate on the "submitted_grants" field.
func SubmittedGrantsLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSubmittedGrants, v))
}

// TotalDataSizeEQ applies the EQ predicate on the "totalDataSize" field.
func TotalDataSizeEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTotalDataSize, v))
}

// TotalDataSizeNEQ applies the NEQ predicate on the "totalDataSize" field.
func TotalDataSizeNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTotalDataSize, v))
}

// TotalDataSizeIn applies the In predicate on the "totalDataSize" field.
func TotalDataSizeIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldTotalDataSize, vs...))
}

// TotalDataSizeNotIn applies the NotIn predicate on the "totalDataSize" field.
func TotalDataSizeNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTotalDataSize, vs...))
}

// TotalDataSizeGT applies the GT predicate on the "totalDataSize" field.
func TotalDataSizeGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldTotalDataSize, v))
}

// TotalDataSizeGTE applies the GTE predicate on the "totalDataSize" field.
func TotalDataSizeGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTotalDataSize, v))
}

// TotalDataSizeLT applies the LT predicate on the "totalDataSize" field.
func TotalDataSizeLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldTotalDataSize, v))
}

// TotalDataSizeLTE applies the LTE predicate on the "totalDataSize" field.
func TotalDataSizeLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTotalDataSize, v))
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.Session) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTickets applies the HasEdge predicate on the "tickets" edge.
func HasTickets() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TicketsTable, TicketsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTicketsWith applies the HasEdge predicate on the "tickets" edge with a given conditions (other predicates).
func HasTicketsWith(preds ...predicate.Ticket) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTicketsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
