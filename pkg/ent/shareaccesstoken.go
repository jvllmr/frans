// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/pkg/ent/shareaccesstoken"
	"github.com/jvllmr/frans/pkg/ent/ticket"
)

// ShareAccessToken is the model entity for the ShareAccessToken schema.
type ShareAccessToken struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Expiry holds the value of the "expiry" field.
	Expiry time.Time `json:"expiry,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShareAccessTokenQuery when eager-loading is set.
	Edges                    ShareAccessTokenEdges `json:"edges"`
	ticket_shareaccesstokens *uuid.UUID
	selectValues             sql.SelectValues
}

// ShareAccessTokenEdges holds the relations/edges for other nodes in the graph.
type ShareAccessTokenEdges struct {
	// Ticket holds the value of the ticket edge.
	Ticket *Ticket `json:"ticket,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TicketOrErr returns the Ticket value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ShareAccessTokenEdges) TicketOrErr() (*Ticket, error) {
	if e.Ticket != nil {
		return e.Ticket, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: ticket.Label}
	}
	return nil, &NotLoadedError{edge: "ticket"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShareAccessToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case shareaccesstoken.FieldID:
			values[i] = new(sql.NullString)
		case shareaccesstoken.FieldExpiry:
			values[i] = new(sql.NullTime)
		case shareaccesstoken.ForeignKeys[0]: // ticket_shareaccesstokens
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShareAccessToken fields.
func (sat *ShareAccessToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shareaccesstoken.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sat.ID = value.String
			}
		case shareaccesstoken.FieldExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry", values[i])
			} else if value.Valid {
				sat.Expiry = value.Time
			}
		case shareaccesstoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_shareaccesstokens", values[i])
			} else if value.Valid {
				sat.ticket_shareaccesstokens = new(uuid.UUID)
				*sat.ticket_shareaccesstokens = *value.S.(*uuid.UUID)
			}
		default:
			sat.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ShareAccessToken.
// This includes values selected through modifiers, order, etc.
func (sat *ShareAccessToken) Value(name string) (ent.Value, error) {
	return sat.selectValues.Get(name)
}

// QueryTicket queries the "ticket" edge of the ShareAccessToken entity.
func (sat *ShareAccessToken) QueryTicket() *TicketQuery {
	return NewShareAccessTokenClient(sat.config).QueryTicket(sat)
}

// Update returns a builder for updating this ShareAccessToken.
// Note that you need to call ShareAccessToken.Unwrap() before calling this method if this ShareAccessToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (sat *ShareAccessToken) Update() *ShareAccessTokenUpdateOne {
	return NewShareAccessTokenClient(sat.config).UpdateOne(sat)
}

// Unwrap unwraps the ShareAccessToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sat *ShareAccessToken) Unwrap() *ShareAccessToken {
	_tx, ok := sat.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShareAccessToken is not a transactional entity")
	}
	sat.config.driver = _tx.drv
	return sat
}

// String implements the fmt.Stringer.
func (sat *ShareAccessToken) String() string {
	var builder strings.Builder
	builder.WriteString("ShareAccessToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sat.ID))
	builder.WriteString("expiry=")
	builder.WriteString(sat.Expiry.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ShareAccessTokens is a parsable slice of ShareAccessToken.
type ShareAccessTokens []*ShareAccessToken
