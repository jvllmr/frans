// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/pkg/ent/file"
	"github.com/jvllmr/frans/pkg/ent/ticket"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	mutation *FileMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *FileCreate) SetName(v string) *FileCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetSize sets the "size" field.
func (_c *FileCreate) SetSize(v uint64) *FileCreate {
	_c.mutation.SetSize(v)
	return _c
}

// SetSha512 sets the "sha512" field.
func (_c *FileCreate) SetSha512(v string) *FileCreate {
	_c.mutation.SetSha512(v)
	return _c
}

// SetLastDownload sets the "last_download" field.
func (_c *FileCreate) SetLastDownload(v time.Time) *FileCreate {
	_c.mutation.SetLastDownload(v)
	return _c
}

// SetNillableLastDownload sets the "last_download" field if the given value is not nil.
func (_c *FileCreate) SetNillableLastDownload(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetLastDownload(*v)
	}
	return _c
}

// SetTimesDownloaded sets the "times_downloaded" field.
func (_c *FileCreate) SetTimesDownloaded(v uint64) *FileCreate {
	_c.mutation.SetTimesDownloaded(v)
	return _c
}

// SetNillableTimesDownloaded sets the "times_downloaded" field if the given value is not nil.
func (_c *FileCreate) SetNillableTimesDownloaded(v *uint64) *FileCreate {
	if v != nil {
		_c.SetTimesDownloaded(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *FileCreate) SetID(v uuid.UUID) *FileCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (_c *FileCreate) AddTicketIDs(ids ...uuid.UUID) *FileCreate {
	_c.mutation.AddTicketIDs(ids...)
	return _c
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (_c *FileCreate) AddTickets(v ...*Ticket) *FileCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTicketIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (_c *FileCreate) Mutation() *FileMutation {
	return _c.mutation
}

// Save creates the File in the database.
func (_c *FileCreate) Save(ctx context.Context) (*File, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *FileCreate) SaveX(ctx context.Context) *File {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *FileCreate) defaults() {
	if _, ok := _c.mutation.TimesDownloaded(); !ok {
		v := file.DefaultTimesDownloaded
		_c.mutation.SetTimesDownloaded(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *FileCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "File.name"`)}
	}
	if _, ok := _c.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "File.size"`)}
	}
	if _, ok := _c.mutation.Sha512(); !ok {
		return &ValidationError{Name: "sha512", err: errors.New(`ent: missing required field "File.sha512"`)}
	}
	if _, ok := _c.mutation.TimesDownloaded(); !ok {
		return &ValidationError{Name: "times_downloaded", err: errors.New(`ent: missing required field "File.times_downloaded"`)}
	}
	return nil
}

func (_c *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *FileCreate) createSpec() (*File, *sqlgraph.CreateSpec) {
	var (
		_node = &File{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(file.Table, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(file.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeUint64, value)
		_node.Size = value
	}
	if value, ok := _c.mutation.Sha512(); ok {
		_spec.SetField(file.FieldSha512, field.TypeString, value)
		_node.Sha512 = value
	}
	if value, ok := _c.mutation.LastDownload(); ok {
		_spec.SetField(file.FieldLastDownload, field.TypeTime, value)
		_node.LastDownload = &value
	}
	if value, ok := _c.mutation.TimesDownloaded(); ok {
		_spec.SetField(file.FieldTimesDownloaded, field.TypeUint64, value)
		_node.TimesDownloaded = value
	}
	if nodes := _c.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TicketsTable,
			Columns: file.TicketsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FileCreateBulk is the builder for creating many File entities in bulk.
type FileCreateBulk struct {
	config
	err      error
	builders []*FileCreate
}

// Save creates the File entities in the database.
func (_c *FileCreateBulk) Save(ctx context.Context) ([]*File, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*File, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *FileCreateBulk) SaveX(ctx context.Context) []*File {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
