// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/pkg/ent/file"
	"github.com/jvllmr/frans/pkg/ent/predicate"
	"github.com/jvllmr/frans/pkg/ent/ticket"
	"github.com/jvllmr/frans/pkg/ent/user"
)

// TicketUpdate is the builder for updating Ticket entities.
type TicketUpdate struct {
	config
	hooks    []Hook
	mutation *TicketMutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (tu *TicketUpdate) Where(ps ...predicate.Ticket) *TicketUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetComment sets the "comment" field.
func (tu *TicketUpdate) SetComment(s string) *TicketUpdate {
	tu.mutation.SetComment(s)
	return tu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableComment(s *string) *TicketUpdate {
	if s != nil {
		tu.SetComment(*s)
	}
	return tu
}

// ClearComment clears the value of the "comment" field.
func (tu *TicketUpdate) ClearComment() *TicketUpdate {
	tu.mutation.ClearComment()
	return tu
}

// SetExpiryType sets the "expiryType" field.
func (tu *TicketUpdate) SetExpiryType(s string) *TicketUpdate {
	tu.mutation.SetExpiryType(s)
	return tu
}

// SetNillableExpiryType sets the "expiryType" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableExpiryType(s *string) *TicketUpdate {
	if s != nil {
		tu.SetExpiryType(*s)
	}
	return tu
}

// SetHashedPassword sets the "hashed_password" field.
func (tu *TicketUpdate) SetHashedPassword(s string) *TicketUpdate {
	tu.mutation.SetHashedPassword(s)
	return tu
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableHashedPassword(s *string) *TicketUpdate {
	if s != nil {
		tu.SetHashedPassword(*s)
	}
	return tu
}

// SetSalt sets the "salt" field.
func (tu *TicketUpdate) SetSalt(s string) *TicketUpdate {
	tu.mutation.SetSalt(s)
	return tu
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableSalt(s *string) *TicketUpdate {
	if s != nil {
		tu.SetSalt(*s)
	}
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TicketUpdate) SetCreatedAt(t time.Time) *TicketUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableCreatedAt(t *time.Time) *TicketUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (tu *TicketUpdate) SetExpiryTotalDays(u uint8) *TicketUpdate {
	tu.mutation.ResetExpiryTotalDays()
	tu.mutation.SetExpiryTotalDays(u)
	return tu
}

// SetNillableExpiryTotalDays sets the "expiry_total_days" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableExpiryTotalDays(u *uint8) *TicketUpdate {
	if u != nil {
		tu.SetExpiryTotalDays(*u)
	}
	return tu
}

// AddExpiryTotalDays adds u to the "expiry_total_days" field.
func (tu *TicketUpdate) AddExpiryTotalDays(u int8) *TicketUpdate {
	tu.mutation.AddExpiryTotalDays(u)
	return tu
}

// SetExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field.
func (tu *TicketUpdate) SetExpiryDaysSinceLastDownload(u uint8) *TicketUpdate {
	tu.mutation.ResetExpiryDaysSinceLastDownload()
	tu.mutation.SetExpiryDaysSinceLastDownload(u)
	return tu
}

// SetNillableExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableExpiryDaysSinceLastDownload(u *uint8) *TicketUpdate {
	if u != nil {
		tu.SetExpiryDaysSinceLastDownload(*u)
	}
	return tu
}

// AddExpiryDaysSinceLastDownload adds u to the "expiry_days_since_last_download" field.
func (tu *TicketUpdate) AddExpiryDaysSinceLastDownload(u int8) *TicketUpdate {
	tu.mutation.AddExpiryDaysSinceLastDownload(u)
	return tu
}

// SetExpiryTotalDownloads sets the "expiry_total_downloads" field.
func (tu *TicketUpdate) SetExpiryTotalDownloads(u uint8) *TicketUpdate {
	tu.mutation.ResetExpiryTotalDownloads()
	tu.mutation.SetExpiryTotalDownloads(u)
	return tu
}

// SetNillableExpiryTotalDownloads sets the "expiry_total_downloads" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableExpiryTotalDownloads(u *uint8) *TicketUpdate {
	if u != nil {
		tu.SetExpiryTotalDownloads(*u)
	}
	return tu
}

// AddExpiryTotalDownloads adds u to the "expiry_total_downloads" field.
func (tu *TicketUpdate) AddExpiryTotalDownloads(u int8) *TicketUpdate {
	tu.mutation.AddExpiryTotalDownloads(u)
	return tu
}

// SetEmailOnDownload sets the "email_on_download" field.
func (tu *TicketUpdate) SetEmailOnDownload(s string) *TicketUpdate {
	tu.mutation.SetEmailOnDownload(s)
	return tu
}

// SetNillableEmailOnDownload sets the "email_on_download" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableEmailOnDownload(s *string) *TicketUpdate {
	if s != nil {
		tu.SetEmailOnDownload(*s)
	}
	return tu
}

// ClearEmailOnDownload clears the value of the "email_on_download" field.
func (tu *TicketUpdate) ClearEmailOnDownload() *TicketUpdate {
	tu.mutation.ClearEmailOnDownload()
	return tu
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (tu *TicketUpdate) AddFileIDs(ids ...uuid.UUID) *TicketUpdate {
	tu.mutation.AddFileIDs(ids...)
	return tu
}

// AddFiles adds the "files" edges to the File entity.
func (tu *TicketUpdate) AddFiles(f ...*File) *TicketUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.AddFileIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tu *TicketUpdate) SetOwnerID(id uuid.UUID) *TicketUpdate {
	tu.mutation.SetOwnerID(id)
	return tu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tu *TicketUpdate) SetNillableOwnerID(id *uuid.UUID) *TicketUpdate {
	if id != nil {
		tu = tu.SetOwnerID(*id)
	}
	return tu
}

// SetOwner sets the "owner" edge to the User entity.
func (tu *TicketUpdate) SetOwner(u *User) *TicketUpdate {
	return tu.SetOwnerID(u.ID)
}

// Mutation returns the TicketMutation object of the builder.
func (tu *TicketUpdate) Mutation() *TicketMutation {
	return tu.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (tu *TicketUpdate) ClearFiles() *TicketUpdate {
	tu.mutation.ClearFiles()
	return tu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (tu *TicketUpdate) RemoveFileIDs(ids ...uuid.UUID) *TicketUpdate {
	tu.mutation.RemoveFileIDs(ids...)
	return tu
}

// RemoveFiles removes "files" edges to File entities.
func (tu *TicketUpdate) RemoveFiles(f ...*File) *TicketUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tu.RemoveFileIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (tu *TicketUpdate) ClearOwner() *TicketUpdate {
	tu.mutation.ClearOwner()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TicketUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TicketUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TicketUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TicketUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Comment(); ok {
		_spec.SetField(ticket.FieldComment, field.TypeString, value)
	}
	if tu.mutation.CommentCleared() {
		_spec.ClearField(ticket.FieldComment, field.TypeString)
	}
	if value, ok := tu.mutation.ExpiryType(); ok {
		_spec.SetField(ticket.FieldExpiryType, field.TypeString, value)
	}
	if value, ok := tu.mutation.HashedPassword(); ok {
		_spec.SetField(ticket.FieldHashedPassword, field.TypeString, value)
	}
	if value, ok := tu.mutation.Salt(); ok {
		_spec.SetField(ticket.FieldSalt, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(ticket.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.ExpiryTotalDays(); ok {
		_spec.SetField(ticket.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := tu.mutation.AddedExpiryTotalDays(); ok {
		_spec.AddField(ticket.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := tu.mutation.ExpiryDaysSinceLastDownload(); ok {
		_spec.SetField(ticket.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := tu.mutation.AddedExpiryDaysSinceLastDownload(); ok {
		_spec.AddField(ticket.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := tu.mutation.ExpiryTotalDownloads(); ok {
		_spec.SetField(ticket.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := tu.mutation.AddedExpiryTotalDownloads(); ok {
		_spec.AddField(ticket.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := tu.mutation.EmailOnDownload(); ok {
		_spec.SetField(ticket.FieldEmailOnDownload, field.TypeString, value)
	}
	if tu.mutation.EmailOnDownloadCleared() {
		_spec.ClearField(ticket.FieldEmailOnDownload, field.TypeString)
	}
	if tu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !tu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.OwnerTable,
			Columns: []string{ticket.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.OwnerTable,
			Columns: []string{ticket.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TicketUpdateOne is the builder for updating a single Ticket entity.
type TicketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketMutation
}

// SetComment sets the "comment" field.
func (tuo *TicketUpdateOne) SetComment(s string) *TicketUpdateOne {
	tuo.mutation.SetComment(s)
	return tuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableComment(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetComment(*s)
	}
	return tuo
}

// ClearComment clears the value of the "comment" field.
func (tuo *TicketUpdateOne) ClearComment() *TicketUpdateOne {
	tuo.mutation.ClearComment()
	return tuo
}

// SetExpiryType sets the "expiryType" field.
func (tuo *TicketUpdateOne) SetExpiryType(s string) *TicketUpdateOne {
	tuo.mutation.SetExpiryType(s)
	return tuo
}

// SetNillableExpiryType sets the "expiryType" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableExpiryType(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetExpiryType(*s)
	}
	return tuo
}

// SetHashedPassword sets the "hashed_password" field.
func (tuo *TicketUpdateOne) SetHashedPassword(s string) *TicketUpdateOne {
	tuo.mutation.SetHashedPassword(s)
	return tuo
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableHashedPassword(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetHashedPassword(*s)
	}
	return tuo
}

// SetSalt sets the "salt" field.
func (tuo *TicketUpdateOne) SetSalt(s string) *TicketUpdateOne {
	tuo.mutation.SetSalt(s)
	return tuo
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableSalt(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetSalt(*s)
	}
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TicketUpdateOne) SetCreatedAt(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableCreatedAt(t *time.Time) *TicketUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (tuo *TicketUpdateOne) SetExpiryTotalDays(u uint8) *TicketUpdateOne {
	tuo.mutation.ResetExpiryTotalDays()
	tuo.mutation.SetExpiryTotalDays(u)
	return tuo
}

// SetNillableExpiryTotalDays sets the "expiry_total_days" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableExpiryTotalDays(u *uint8) *TicketUpdateOne {
	if u != nil {
		tuo.SetExpiryTotalDays(*u)
	}
	return tuo
}

// AddExpiryTotalDays adds u to the "expiry_total_days" field.
func (tuo *TicketUpdateOne) AddExpiryTotalDays(u int8) *TicketUpdateOne {
	tuo.mutation.AddExpiryTotalDays(u)
	return tuo
}

// SetExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field.
func (tuo *TicketUpdateOne) SetExpiryDaysSinceLastDownload(u uint8) *TicketUpdateOne {
	tuo.mutation.ResetExpiryDaysSinceLastDownload()
	tuo.mutation.SetExpiryDaysSinceLastDownload(u)
	return tuo
}

// SetNillableExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableExpiryDaysSinceLastDownload(u *uint8) *TicketUpdateOne {
	if u != nil {
		tuo.SetExpiryDaysSinceLastDownload(*u)
	}
	return tuo
}

// AddExpiryDaysSinceLastDownload adds u to the "expiry_days_since_last_download" field.
func (tuo *TicketUpdateOne) AddExpiryDaysSinceLastDownload(u int8) *TicketUpdateOne {
	tuo.mutation.AddExpiryDaysSinceLastDownload(u)
	return tuo
}

// SetExpiryTotalDownloads sets the "expiry_total_downloads" field.
func (tuo *TicketUpdateOne) SetExpiryTotalDownloads(u uint8) *TicketUpdateOne {
	tuo.mutation.ResetExpiryTotalDownloads()
	tuo.mutation.SetExpiryTotalDownloads(u)
	return tuo
}

// SetNillableExpiryTotalDownloads sets the "expiry_total_downloads" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableExpiryTotalDownloads(u *uint8) *TicketUpdateOne {
	if u != nil {
		tuo.SetExpiryTotalDownloads(*u)
	}
	return tuo
}

// AddExpiryTotalDownloads adds u to the "expiry_total_downloads" field.
func (tuo *TicketUpdateOne) AddExpiryTotalDownloads(u int8) *TicketUpdateOne {
	tuo.mutation.AddExpiryTotalDownloads(u)
	return tuo
}

// SetEmailOnDownload sets the "email_on_download" field.
func (tuo *TicketUpdateOne) SetEmailOnDownload(s string) *TicketUpdateOne {
	tuo.mutation.SetEmailOnDownload(s)
	return tuo
}

// SetNillableEmailOnDownload sets the "email_on_download" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableEmailOnDownload(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetEmailOnDownload(*s)
	}
	return tuo
}

// ClearEmailOnDownload clears the value of the "email_on_download" field.
func (tuo *TicketUpdateOne) ClearEmailOnDownload() *TicketUpdateOne {
	tuo.mutation.ClearEmailOnDownload()
	return tuo
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (tuo *TicketUpdateOne) AddFileIDs(ids ...uuid.UUID) *TicketUpdateOne {
	tuo.mutation.AddFileIDs(ids...)
	return tuo
}

// AddFiles adds the "files" edges to the File entity.
func (tuo *TicketUpdateOne) AddFiles(f ...*File) *TicketUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.AddFileIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tuo *TicketUpdateOne) SetOwnerID(id uuid.UUID) *TicketUpdateOne {
	tuo.mutation.SetOwnerID(id)
	return tuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableOwnerID(id *uuid.UUID) *TicketUpdateOne {
	if id != nil {
		tuo = tuo.SetOwnerID(*id)
	}
	return tuo
}

// SetOwner sets the "owner" edge to the User entity.
func (tuo *TicketUpdateOne) SetOwner(u *User) *TicketUpdateOne {
	return tuo.SetOwnerID(u.ID)
}

// Mutation returns the TicketMutation object of the builder.
func (tuo *TicketUpdateOne) Mutation() *TicketMutation {
	return tuo.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (tuo *TicketUpdateOne) ClearFiles() *TicketUpdateOne {
	tuo.mutation.ClearFiles()
	return tuo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (tuo *TicketUpdateOne) RemoveFileIDs(ids ...uuid.UUID) *TicketUpdateOne {
	tuo.mutation.RemoveFileIDs(ids...)
	return tuo
}

// RemoveFiles removes "files" edges to File entities.
func (tuo *TicketUpdateOne) RemoveFiles(f ...*File) *TicketUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return tuo.RemoveFileIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (tuo *TicketUpdateOne) ClearOwner() *TicketUpdateOne {
	tuo.mutation.ClearOwner()
	return tuo
}

// Where appends a list predicates to the TicketUpdate builder.
func (tuo *TicketUpdateOne) Where(ps ...predicate.Ticket) *TicketUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TicketUpdateOne) Select(field string, fields ...string) *TicketUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Ticket entity.
func (tuo *TicketUpdateOne) Save(ctx context.Context) (*Ticket, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TicketUpdateOne) SaveX(ctx context.Context) *Ticket {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TicketUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TicketUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TicketUpdateOne) sqlSave(ctx context.Context) (_node *Ticket, err error) {
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ticket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticket.FieldID)
		for _, f := range fields {
			if !ticket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Comment(); ok {
		_spec.SetField(ticket.FieldComment, field.TypeString, value)
	}
	if tuo.mutation.CommentCleared() {
		_spec.ClearField(ticket.FieldComment, field.TypeString)
	}
	if value, ok := tuo.mutation.ExpiryType(); ok {
		_spec.SetField(ticket.FieldExpiryType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.HashedPassword(); ok {
		_spec.SetField(ticket.FieldHashedPassword, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Salt(); ok {
		_spec.SetField(ticket.FieldSalt, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(ticket.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.ExpiryTotalDays(); ok {
		_spec.SetField(ticket.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := tuo.mutation.AddedExpiryTotalDays(); ok {
		_spec.AddField(ticket.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := tuo.mutation.ExpiryDaysSinceLastDownload(); ok {
		_spec.SetField(ticket.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := tuo.mutation.AddedExpiryDaysSinceLastDownload(); ok {
		_spec.AddField(ticket.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := tuo.mutation.ExpiryTotalDownloads(); ok {
		_spec.SetField(ticket.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := tuo.mutation.AddedExpiryTotalDownloads(); ok {
		_spec.AddField(ticket.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := tuo.mutation.EmailOnDownload(); ok {
		_spec.SetField(ticket.FieldEmailOnDownload, field.TypeString, value)
	}
	if tuo.mutation.EmailOnDownloadCleared() {
		_spec.ClearField(ticket.FieldEmailOnDownload, field.TypeString)
	}
	if tuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !tuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.OwnerTable,
			Columns: []string{ticket.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.OwnerTable,
			Columns: []string{ticket.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ticket{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
