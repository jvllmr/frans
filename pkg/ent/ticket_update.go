// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/pkg/ent/file"
	"github.com/jvllmr/frans/pkg/ent/predicate"
	"github.com/jvllmr/frans/pkg/ent/shareaccesstoken"
	"github.com/jvllmr/frans/pkg/ent/ticket"
	"github.com/jvllmr/frans/pkg/ent/user"
)

// TicketUpdate is the builder for updating Ticket entities.
type TicketUpdate struct {
	config
	hooks    []Hook
	mutation *TicketMutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (_u *TicketUpdate) Where(ps ...predicate.Ticket) *TicketUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetComment sets the "comment" field.
func (_u *TicketUpdate) SetComment(v string) *TicketUpdate {
	_u.mutation.SetComment(v)
	return _u
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (_u *TicketUpdate) SetNillableComment(v *string) *TicketUpdate {
	if v != nil {
		_u.SetComment(*v)
	}
	return _u
}

// ClearComment clears the value of the "comment" field.
func (_u *TicketUpdate) ClearComment() *TicketUpdate {
	_u.mutation.ClearComment()
	return _u
}

// SetExpiryType sets the "expiryType" field.
func (_u *TicketUpdate) SetExpiryType(v string) *TicketUpdate {
	_u.mutation.SetExpiryType(v)
	return _u
}

// SetNillableExpiryType sets the "expiryType" field if the given value is not nil.
func (_u *TicketUpdate) SetNillableExpiryType(v *string) *TicketUpdate {
	if v != nil {
		_u.SetExpiryType(*v)
	}
	return _u
}

// SetHashedPassword sets the "hashed_password" field.
func (_u *TicketUpdate) SetHashedPassword(v string) *TicketUpdate {
	_u.mutation.SetHashedPassword(v)
	return _u
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (_u *TicketUpdate) SetNillableHashedPassword(v *string) *TicketUpdate {
	if v != nil {
		_u.SetHashedPassword(*v)
	}
	return _u
}

// SetSalt sets the "salt" field.
func (_u *TicketUpdate) SetSalt(v string) *TicketUpdate {
	_u.mutation.SetSalt(v)
	return _u
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (_u *TicketUpdate) SetNillableSalt(v *string) *TicketUpdate {
	if v != nil {
		_u.SetSalt(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *TicketUpdate) SetCreatedAt(v time.Time) *TicketUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *TicketUpdate) SetNillableCreatedAt(v *time.Time) *TicketUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (_u *TicketUpdate) SetExpiryTotalDays(v uint8) *TicketUpdate {
	_u.mutation.ResetExpiryTotalDays()
	_u.mutation.SetExpiryTotalDays(v)
	return _u
}

// SetNillableExpiryTotalDays sets the "expiry_total_days" field if the given value is not nil.
func (_u *TicketUpdate) SetNillableExpiryTotalDays(v *uint8) *TicketUpdate {
	if v != nil {
		_u.SetExpiryTotalDays(*v)
	}
	return _u
}

// AddExpiryTotalDays adds value to the "expiry_total_days" field.
func (_u *TicketUpdate) AddExpiryTotalDays(v int8) *TicketUpdate {
	_u.mutation.AddExpiryTotalDays(v)
	return _u
}

// SetExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field.
func (_u *TicketUpdate) SetExpiryDaysSinceLastDownload(v uint8) *TicketUpdate {
	_u.mutation.ResetExpiryDaysSinceLastDownload()
	_u.mutation.SetExpiryDaysSinceLastDownload(v)
	return _u
}

// SetNillableExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field if the given value is not nil.
func (_u *TicketUpdate) SetNillableExpiryDaysSinceLastDownload(v *uint8) *TicketUpdate {
	if v != nil {
		_u.SetExpiryDaysSinceLastDownload(*v)
	}
	return _u
}

// AddExpiryDaysSinceLastDownload adds value to the "expiry_days_since_last_download" field.
func (_u *TicketUpdate) AddExpiryDaysSinceLastDownload(v int8) *TicketUpdate {
	_u.mutation.AddExpiryDaysSinceLastDownload(v)
	return _u
}

// SetExpiryTotalDownloads sets the "expiry_total_downloads" field.
func (_u *TicketUpdate) SetExpiryTotalDownloads(v uint8) *TicketUpdate {
	_u.mutation.ResetExpiryTotalDownloads()
	_u.mutation.SetExpiryTotalDownloads(v)
	return _u
}

// SetNillableExpiryTotalDownloads sets the "expiry_total_downloads" field if the given value is not nil.
func (_u *TicketUpdate) SetNillableExpiryTotalDownloads(v *uint8) *TicketUpdate {
	if v != nil {
		_u.SetExpiryTotalDownloads(*v)
	}
	return _u
}

// AddExpiryTotalDownloads adds value to the "expiry_total_downloads" field.
func (_u *TicketUpdate) AddExpiryTotalDownloads(v int8) *TicketUpdate {
	_u.mutation.AddExpiryTotalDownloads(v)
	return _u
}

// SetEmailOnDownload sets the "email_on_download" field.
func (_u *TicketUpdate) SetEmailOnDownload(v string) *TicketUpdate {
	_u.mutation.SetEmailOnDownload(v)
	return _u
}

// SetNillableEmailOnDownload sets the "email_on_download" field if the given value is not nil.
func (_u *TicketUpdate) SetNillableEmailOnDownload(v *string) *TicketUpdate {
	if v != nil {
		_u.SetEmailOnDownload(*v)
	}
	return _u
}

// ClearEmailOnDownload clears the value of the "email_on_download" field.
func (_u *TicketUpdate) ClearEmailOnDownload() *TicketUpdate {
	_u.mutation.ClearEmailOnDownload()
	return _u
}

// SetCreatorLang sets the "creator_lang" field.
func (_u *TicketUpdate) SetCreatorLang(v string) *TicketUpdate {
	_u.mutation.SetCreatorLang(v)
	return _u
}

// SetNillableCreatorLang sets the "creator_lang" field if the given value is not nil.
func (_u *TicketUpdate) SetNillableCreatorLang(v *string) *TicketUpdate {
	if v != nil {
		_u.SetCreatorLang(*v)
	}
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *TicketUpdate) AddFileIDs(ids ...uuid.UUID) *TicketUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *TicketUpdate) AddFiles(v ...*File) *TicketUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *TicketUpdate) SetOwnerID(id uuid.UUID) *TicketUpdate {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (_u *TicketUpdate) SetNillableOwnerID(id *uuid.UUID) *TicketUpdate {
	if id != nil {
		_u = _u.SetOwnerID(*id)
	}
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *TicketUpdate) SetOwner(v *User) *TicketUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddShareaccesstokenIDs adds the "shareaccesstokens" edge to the ShareAccessToken entity by IDs.
func (_u *TicketUpdate) AddShareaccesstokenIDs(ids ...string) *TicketUpdate {
	_u.mutation.AddShareaccesstokenIDs(ids...)
	return _u
}

// AddShareaccesstokens adds the "shareaccesstokens" edges to the ShareAccessToken entity.
func (_u *TicketUpdate) AddShareaccesstokens(v ...*ShareAccessToken) *TicketUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddShareaccesstokenIDs(ids...)
}

// Mutation returns the TicketMutation object of the builder.
func (_u *TicketUpdate) Mutation() *TicketMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *TicketUpdate) ClearFiles() *TicketUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *TicketUpdate) RemoveFileIDs(ids ...uuid.UUID) *TicketUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *TicketUpdate) RemoveFiles(v ...*File) *TicketUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *TicketUpdate) ClearOwner() *TicketUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearShareaccesstokens clears all "shareaccesstokens" edges to the ShareAccessToken entity.
func (_u *TicketUpdate) ClearShareaccesstokens() *TicketUpdate {
	_u.mutation.ClearShareaccesstokens()
	return _u
}

// RemoveShareaccesstokenIDs removes the "shareaccesstokens" edge to ShareAccessToken entities by IDs.
func (_u *TicketUpdate) RemoveShareaccesstokenIDs(ids ...string) *TicketUpdate {
	_u.mutation.RemoveShareaccesstokenIDs(ids...)
	return _u
}

// RemoveShareaccesstokens removes "shareaccesstokens" edges to ShareAccessToken entities.
func (_u *TicketUpdate) RemoveShareaccesstokens(v ...*ShareAccessToken) *TicketUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveShareaccesstokenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TicketUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TicketUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TicketUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TicketUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TicketUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Comment(); ok {
		_spec.SetField(ticket.FieldComment, field.TypeString, value)
	}
	if _u.mutation.CommentCleared() {
		_spec.ClearField(ticket.FieldComment, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiryType(); ok {
		_spec.SetField(ticket.FieldExpiryType, field.TypeString, value)
	}
	if value, ok := _u.mutation.HashedPassword(); ok {
		_spec.SetField(ticket.FieldHashedPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Salt(); ok {
		_spec.SetField(ticket.FieldSalt, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(ticket.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ExpiryTotalDays(); ok {
		_spec.SetField(ticket.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalDays(); ok {
		_spec.AddField(ticket.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryDaysSinceLastDownload(); ok {
		_spec.SetField(ticket.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryDaysSinceLastDownload(); ok {
		_spec.AddField(ticket.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryTotalDownloads(); ok {
		_spec.SetField(ticket.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalDownloads(); ok {
		_spec.AddField(ticket.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.EmailOnDownload(); ok {
		_spec.SetField(ticket.FieldEmailOnDownload, field.TypeString, value)
	}
	if _u.mutation.EmailOnDownloadCleared() {
		_spec.ClearField(ticket.FieldEmailOnDownload, field.TypeString)
	}
	if value, ok := _u.mutation.CreatorLang(); ok {
		_spec.SetField(ticket.FieldCreatorLang, field.TypeString, value)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.OwnerTable,
			Columns: []string{ticket.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.OwnerTable,
			Columns: []string{ticket.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ShareaccesstokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ShareaccesstokensTable,
			Columns: []string{ticket.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedShareaccesstokensIDs(); len(nodes) > 0 && !_u.mutation.ShareaccesstokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ShareaccesstokensTable,
			Columns: []string{ticket.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ShareaccesstokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ShareaccesstokensTable,
			Columns: []string{ticket.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TicketUpdateOne is the builder for updating a single Ticket entity.
type TicketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketMutation
}

// SetComment sets the "comment" field.
func (_u *TicketUpdateOne) SetComment(v string) *TicketUpdateOne {
	_u.mutation.SetComment(v)
	return _u
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (_u *TicketUpdateOne) SetNillableComment(v *string) *TicketUpdateOne {
	if v != nil {
		_u.SetComment(*v)
	}
	return _u
}

// ClearComment clears the value of the "comment" field.
func (_u *TicketUpdateOne) ClearComment() *TicketUpdateOne {
	_u.mutation.ClearComment()
	return _u
}

// SetExpiryType sets the "expiryType" field.
func (_u *TicketUpdateOne) SetExpiryType(v string) *TicketUpdateOne {
	_u.mutation.SetExpiryType(v)
	return _u
}

// SetNillableExpiryType sets the "expiryType" field if the given value is not nil.
func (_u *TicketUpdateOne) SetNillableExpiryType(v *string) *TicketUpdateOne {
	if v != nil {
		_u.SetExpiryType(*v)
	}
	return _u
}

// SetHashedPassword sets the "hashed_password" field.
func (_u *TicketUpdateOne) SetHashedPassword(v string) *TicketUpdateOne {
	_u.mutation.SetHashedPassword(v)
	return _u
}

// SetNillableHashedPassword sets the "hashed_password" field if the given value is not nil.
func (_u *TicketUpdateOne) SetNillableHashedPassword(v *string) *TicketUpdateOne {
	if v != nil {
		_u.SetHashedPassword(*v)
	}
	return _u
}

// SetSalt sets the "salt" field.
func (_u *TicketUpdateOne) SetSalt(v string) *TicketUpdateOne {
	_u.mutation.SetSalt(v)
	return _u
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (_u *TicketUpdateOne) SetNillableSalt(v *string) *TicketUpdateOne {
	if v != nil {
		_u.SetSalt(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *TicketUpdateOne) SetCreatedAt(v time.Time) *TicketUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *TicketUpdateOne) SetNillableCreatedAt(v *time.Time) *TicketUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetExpiryTotalDays sets the "expiry_total_days" field.
func (_u *TicketUpdateOne) SetExpiryTotalDays(v uint8) *TicketUpdateOne {
	_u.mutation.ResetExpiryTotalDays()
	_u.mutation.SetExpiryTotalDays(v)
	return _u
}

// SetNillableExpiryTotalDays sets the "expiry_total_days" field if the given value is not nil.
func (_u *TicketUpdateOne) SetNillableExpiryTotalDays(v *uint8) *TicketUpdateOne {
	if v != nil {
		_u.SetExpiryTotalDays(*v)
	}
	return _u
}

// AddExpiryTotalDays adds value to the "expiry_total_days" field.
func (_u *TicketUpdateOne) AddExpiryTotalDays(v int8) *TicketUpdateOne {
	_u.mutation.AddExpiryTotalDays(v)
	return _u
}

// SetExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field.
func (_u *TicketUpdateOne) SetExpiryDaysSinceLastDownload(v uint8) *TicketUpdateOne {
	_u.mutation.ResetExpiryDaysSinceLastDownload()
	_u.mutation.SetExpiryDaysSinceLastDownload(v)
	return _u
}

// SetNillableExpiryDaysSinceLastDownload sets the "expiry_days_since_last_download" field if the given value is not nil.
func (_u *TicketUpdateOne) SetNillableExpiryDaysSinceLastDownload(v *uint8) *TicketUpdateOne {
	if v != nil {
		_u.SetExpiryDaysSinceLastDownload(*v)
	}
	return _u
}

// AddExpiryDaysSinceLastDownload adds value to the "expiry_days_since_last_download" field.
func (_u *TicketUpdateOne) AddExpiryDaysSinceLastDownload(v int8) *TicketUpdateOne {
	_u.mutation.AddExpiryDaysSinceLastDownload(v)
	return _u
}

// SetExpiryTotalDownloads sets the "expiry_total_downloads" field.
func (_u *TicketUpdateOne) SetExpiryTotalDownloads(v uint8) *TicketUpdateOne {
	_u.mutation.ResetExpiryTotalDownloads()
	_u.mutation.SetExpiryTotalDownloads(v)
	return _u
}

// SetNillableExpiryTotalDownloads sets the "expiry_total_downloads" field if the given value is not nil.
func (_u *TicketUpdateOne) SetNillableExpiryTotalDownloads(v *uint8) *TicketUpdateOne {
	if v != nil {
		_u.SetExpiryTotalDownloads(*v)
	}
	return _u
}

// AddExpiryTotalDownloads adds value to the "expiry_total_downloads" field.
func (_u *TicketUpdateOne) AddExpiryTotalDownloads(v int8) *TicketUpdateOne {
	_u.mutation.AddExpiryTotalDownloads(v)
	return _u
}

// SetEmailOnDownload sets the "email_on_download" field.
func (_u *TicketUpdateOne) SetEmailOnDownload(v string) *TicketUpdateOne {
	_u.mutation.SetEmailOnDownload(v)
	return _u
}

// SetNillableEmailOnDownload sets the "email_on_download" field if the given value is not nil.
func (_u *TicketUpdateOne) SetNillableEmailOnDownload(v *string) *TicketUpdateOne {
	if v != nil {
		_u.SetEmailOnDownload(*v)
	}
	return _u
}

// ClearEmailOnDownload clears the value of the "email_on_download" field.
func (_u *TicketUpdateOne) ClearEmailOnDownload() *TicketUpdateOne {
	_u.mutation.ClearEmailOnDownload()
	return _u
}

// SetCreatorLang sets the "creator_lang" field.
func (_u *TicketUpdateOne) SetCreatorLang(v string) *TicketUpdateOne {
	_u.mutation.SetCreatorLang(v)
	return _u
}

// SetNillableCreatorLang sets the "creator_lang" field if the given value is not nil.
func (_u *TicketUpdateOne) SetNillableCreatorLang(v *string) *TicketUpdateOne {
	if v != nil {
		_u.SetCreatorLang(*v)
	}
	return _u
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *TicketUpdateOne) AddFileIDs(ids ...uuid.UUID) *TicketUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *TicketUpdateOne) AddFiles(v ...*File) *TicketUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *TicketUpdateOne) SetOwnerID(id uuid.UUID) *TicketUpdateOne {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (_u *TicketUpdateOne) SetNillableOwnerID(id *uuid.UUID) *TicketUpdateOne {
	if id != nil {
		_u = _u.SetOwnerID(*id)
	}
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *TicketUpdateOne) SetOwner(v *User) *TicketUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddShareaccesstokenIDs adds the "shareaccesstokens" edge to the ShareAccessToken entity by IDs.
func (_u *TicketUpdateOne) AddShareaccesstokenIDs(ids ...string) *TicketUpdateOne {
	_u.mutation.AddShareaccesstokenIDs(ids...)
	return _u
}

// AddShareaccesstokens adds the "shareaccesstokens" edges to the ShareAccessToken entity.
func (_u *TicketUpdateOne) AddShareaccesstokens(v ...*ShareAccessToken) *TicketUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddShareaccesstokenIDs(ids...)
}

// Mutation returns the TicketMutation object of the builder.
func (_u *TicketUpdateOne) Mutation() *TicketMutation {
	return _u.mutation
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *TicketUpdateOne) ClearFiles() *TicketUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *TicketUpdateOne) RemoveFileIDs(ids ...uuid.UUID) *TicketUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *TicketUpdateOne) RemoveFiles(v ...*File) *TicketUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *TicketUpdateOne) ClearOwner() *TicketUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearShareaccesstokens clears all "shareaccesstokens" edges to the ShareAccessToken entity.
func (_u *TicketUpdateOne) ClearShareaccesstokens() *TicketUpdateOne {
	_u.mutation.ClearShareaccesstokens()
	return _u
}

// RemoveShareaccesstokenIDs removes the "shareaccesstokens" edge to ShareAccessToken entities by IDs.
func (_u *TicketUpdateOne) RemoveShareaccesstokenIDs(ids ...string) *TicketUpdateOne {
	_u.mutation.RemoveShareaccesstokenIDs(ids...)
	return _u
}

// RemoveShareaccesstokens removes "shareaccesstokens" edges to ShareAccessToken entities.
func (_u *TicketUpdateOne) RemoveShareaccesstokens(v ...*ShareAccessToken) *TicketUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveShareaccesstokenIDs(ids...)
}

// Where appends a list predicates to the TicketUpdate builder.
func (_u *TicketUpdateOne) Where(ps ...predicate.Ticket) *TicketUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TicketUpdateOne) Select(field string, fields ...string) *TicketUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Ticket entity.
func (_u *TicketUpdateOne) Save(ctx context.Context) (*Ticket, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TicketUpdateOne) SaveX(ctx context.Context) *Ticket {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TicketUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TicketUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *TicketUpdateOne) sqlSave(ctx context.Context) (_node *Ticket, err error) {
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ticket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticket.FieldID)
		for _, f := range fields {
			if !ticket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Comment(); ok {
		_spec.SetField(ticket.FieldComment, field.TypeString, value)
	}
	if _u.mutation.CommentCleared() {
		_spec.ClearField(ticket.FieldComment, field.TypeString)
	}
	if value, ok := _u.mutation.ExpiryType(); ok {
		_spec.SetField(ticket.FieldExpiryType, field.TypeString, value)
	}
	if value, ok := _u.mutation.HashedPassword(); ok {
		_spec.SetField(ticket.FieldHashedPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.Salt(); ok {
		_spec.SetField(ticket.FieldSalt, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(ticket.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.ExpiryTotalDays(); ok {
		_spec.SetField(ticket.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalDays(); ok {
		_spec.AddField(ticket.FieldExpiryTotalDays, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryDaysSinceLastDownload(); ok {
		_spec.SetField(ticket.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryDaysSinceLastDownload(); ok {
		_spec.AddField(ticket.FieldExpiryDaysSinceLastDownload, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.ExpiryTotalDownloads(); ok {
		_spec.SetField(ticket.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.AddedExpiryTotalDownloads(); ok {
		_spec.AddField(ticket.FieldExpiryTotalDownloads, field.TypeUint8, value)
	}
	if value, ok := _u.mutation.EmailOnDownload(); ok {
		_spec.SetField(ticket.FieldEmailOnDownload, field.TypeString, value)
	}
	if _u.mutation.EmailOnDownloadCleared() {
		_spec.ClearField(ticket.FieldEmailOnDownload, field.TypeString)
	}
	if value, ok := _u.mutation.CreatorLang(); ok {
		_spec.SetField(ticket.FieldCreatorLang, field.TypeString, value)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ticket.FilesTable,
			Columns: ticket.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.OwnerTable,
			Columns: []string{ticket.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.OwnerTable,
			Columns: []string{ticket.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ShareaccesstokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ShareaccesstokensTable,
			Columns: []string{ticket.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedShareaccesstokensIDs(); len(nodes) > 0 && !_u.mutation.ShareaccesstokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ShareaccesstokensTable,
			Columns: []string{ticket.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ShareaccesstokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ticket.ShareaccesstokensTable,
			Columns: []string{ticket.ShareaccesstokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ticket{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
