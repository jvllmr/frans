// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/pkg/ent/predicate"
	"github.com/jvllmr/frans/pkg/ent/shareaccesstoken"
	"github.com/jvllmr/frans/pkg/ent/ticket"
)

// ShareAccessTokenQuery is the builder for querying ShareAccessToken entities.
type ShareAccessTokenQuery struct {
	config
	ctx        *QueryContext
	order      []shareaccesstoken.OrderOption
	inters     []Interceptor
	predicates []predicate.ShareAccessToken
	withTicket *TicketQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ShareAccessTokenQuery builder.
func (satq *ShareAccessTokenQuery) Where(ps ...predicate.ShareAccessToken) *ShareAccessTokenQuery {
	satq.predicates = append(satq.predicates, ps...)
	return satq
}

// Limit the number of records to be returned by this query.
func (satq *ShareAccessTokenQuery) Limit(limit int) *ShareAccessTokenQuery {
	satq.ctx.Limit = &limit
	return satq
}

// Offset to start from.
func (satq *ShareAccessTokenQuery) Offset(offset int) *ShareAccessTokenQuery {
	satq.ctx.Offset = &offset
	return satq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (satq *ShareAccessTokenQuery) Unique(unique bool) *ShareAccessTokenQuery {
	satq.ctx.Unique = &unique
	return satq
}

// Order specifies how the records should be ordered.
func (satq *ShareAccessTokenQuery) Order(o ...shareaccesstoken.OrderOption) *ShareAccessTokenQuery {
	satq.order = append(satq.order, o...)
	return satq
}

// QueryTicket chains the current query on the "ticket" edge.
func (satq *ShareAccessTokenQuery) QueryTicket() *TicketQuery {
	query := (&TicketClient{config: satq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := satq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := satq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(shareaccesstoken.Table, shareaccesstoken.FieldID, selector),
			sqlgraph.To(ticket.Table, ticket.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, shareaccesstoken.TicketTable, shareaccesstoken.TicketColumn),
		)
		fromU = sqlgraph.SetNeighbors(satq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ShareAccessToken entity from the query.
// Returns a *NotFoundError when no ShareAccessToken was found.
func (satq *ShareAccessTokenQuery) First(ctx context.Context) (*ShareAccessToken, error) {
	nodes, err := satq.Limit(1).All(setContextOp(ctx, satq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{shareaccesstoken.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (satq *ShareAccessTokenQuery) FirstX(ctx context.Context) *ShareAccessToken {
	node, err := satq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ShareAccessToken ID from the query.
// Returns a *NotFoundError when no ShareAccessToken ID was found.
func (satq *ShareAccessTokenQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = satq.Limit(1).IDs(setContextOp(ctx, satq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{shareaccesstoken.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (satq *ShareAccessTokenQuery) FirstIDX(ctx context.Context) string {
	id, err := satq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ShareAccessToken entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ShareAccessToken entity is found.
// Returns a *NotFoundError when no ShareAccessToken entities are found.
func (satq *ShareAccessTokenQuery) Only(ctx context.Context) (*ShareAccessToken, error) {
	nodes, err := satq.Limit(2).All(setContextOp(ctx, satq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{shareaccesstoken.Label}
	default:
		return nil, &NotSingularError{shareaccesstoken.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (satq *ShareAccessTokenQuery) OnlyX(ctx context.Context) *ShareAccessToken {
	node, err := satq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ShareAccessToken ID in the query.
// Returns a *NotSingularError when more than one ShareAccessToken ID is found.
// Returns a *NotFoundError when no entities are found.
func (satq *ShareAccessTokenQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = satq.Limit(2).IDs(setContextOp(ctx, satq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{shareaccesstoken.Label}
	default:
		err = &NotSingularError{shareaccesstoken.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (satq *ShareAccessTokenQuery) OnlyIDX(ctx context.Context) string {
	id, err := satq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ShareAccessTokens.
func (satq *ShareAccessTokenQuery) All(ctx context.Context) ([]*ShareAccessToken, error) {
	ctx = setContextOp(ctx, satq.ctx, ent.OpQueryAll)
	if err := satq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ShareAccessToken, *ShareAccessTokenQuery]()
	return withInterceptors[[]*ShareAccessToken](ctx, satq, qr, satq.inters)
}

// AllX is like All, but panics if an error occurs.
func (satq *ShareAccessTokenQuery) AllX(ctx context.Context) []*ShareAccessToken {
	nodes, err := satq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ShareAccessToken IDs.
func (satq *ShareAccessTokenQuery) IDs(ctx context.Context) (ids []string, err error) {
	if satq.ctx.Unique == nil && satq.path != nil {
		satq.Unique(true)
	}
	ctx = setContextOp(ctx, satq.ctx, ent.OpQueryIDs)
	if err = satq.Select(shareaccesstoken.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (satq *ShareAccessTokenQuery) IDsX(ctx context.Context) []string {
	ids, err := satq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (satq *ShareAccessTokenQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, satq.ctx, ent.OpQueryCount)
	if err := satq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, satq, querierCount[*ShareAccessTokenQuery](), satq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (satq *ShareAccessTokenQuery) CountX(ctx context.Context) int {
	count, err := satq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (satq *ShareAccessTokenQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, satq.ctx, ent.OpQueryExist)
	switch _, err := satq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (satq *ShareAccessTokenQuery) ExistX(ctx context.Context) bool {
	exist, err := satq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ShareAccessTokenQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (satq *ShareAccessTokenQuery) Clone() *ShareAccessTokenQuery {
	if satq == nil {
		return nil
	}
	return &ShareAccessTokenQuery{
		config:     satq.config,
		ctx:        satq.ctx.Clone(),
		order:      append([]shareaccesstoken.OrderOption{}, satq.order...),
		inters:     append([]Interceptor{}, satq.inters...),
		predicates: append([]predicate.ShareAccessToken{}, satq.predicates...),
		withTicket: satq.withTicket.Clone(),
		// clone intermediate query.
		sql:  satq.sql.Clone(),
		path: satq.path,
	}
}

// WithTicket tells the query-builder to eager-load the nodes that are connected to
// the "ticket" edge. The optional arguments are used to configure the query builder of the edge.
func (satq *ShareAccessTokenQuery) WithTicket(opts ...func(*TicketQuery)) *ShareAccessTokenQuery {
	query := (&TicketClient{config: satq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	satq.withTicket = query
	return satq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Expiry time.Time `json:"expiry,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ShareAccessToken.Query().
//		GroupBy(shareaccesstoken.FieldExpiry).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (satq *ShareAccessTokenQuery) GroupBy(field string, fields ...string) *ShareAccessTokenGroupBy {
	satq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ShareAccessTokenGroupBy{build: satq}
	grbuild.flds = &satq.ctx.Fields
	grbuild.label = shareaccesstoken.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Expiry time.Time `json:"expiry,omitempty"`
//	}
//
//	client.ShareAccessToken.Query().
//		Select(shareaccesstoken.FieldExpiry).
//		Scan(ctx, &v)
func (satq *ShareAccessTokenQuery) Select(fields ...string) *ShareAccessTokenSelect {
	satq.ctx.Fields = append(satq.ctx.Fields, fields...)
	sbuild := &ShareAccessTokenSelect{ShareAccessTokenQuery: satq}
	sbuild.label = shareaccesstoken.Label
	sbuild.flds, sbuild.scan = &satq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ShareAccessTokenSelect configured with the given aggregations.
func (satq *ShareAccessTokenQuery) Aggregate(fns ...AggregateFunc) *ShareAccessTokenSelect {
	return satq.Select().Aggregate(fns...)
}

func (satq *ShareAccessTokenQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range satq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, satq); err != nil {
				return err
			}
		}
	}
	for _, f := range satq.ctx.Fields {
		if !shareaccesstoken.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if satq.path != nil {
		prev, err := satq.path(ctx)
		if err != nil {
			return err
		}
		satq.sql = prev
	}
	return nil
}

func (satq *ShareAccessTokenQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ShareAccessToken, error) {
	var (
		nodes       = []*ShareAccessToken{}
		withFKs     = satq.withFKs
		_spec       = satq.querySpec()
		loadedTypes = [1]bool{
			satq.withTicket != nil,
		}
	)
	if satq.withTicket != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, shareaccesstoken.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ShareAccessToken).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ShareAccessToken{config: satq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, satq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := satq.withTicket; query != nil {
		if err := satq.loadTicket(ctx, query, nodes, nil,
			func(n *ShareAccessToken, e *Ticket) { n.Edges.Ticket = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (satq *ShareAccessTokenQuery) loadTicket(ctx context.Context, query *TicketQuery, nodes []*ShareAccessToken, init func(*ShareAccessToken), assign func(*ShareAccessToken, *Ticket)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ShareAccessToken)
	for i := range nodes {
		if nodes[i].ticket_shareaccesstokens == nil {
			continue
		}
		fk := *nodes[i].ticket_shareaccesstokens
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(ticket.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "ticket_shareaccesstokens" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (satq *ShareAccessTokenQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := satq.querySpec()
	_spec.Node.Columns = satq.ctx.Fields
	if len(satq.ctx.Fields) > 0 {
		_spec.Unique = satq.ctx.Unique != nil && *satq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, satq.driver, _spec)
}

func (satq *ShareAccessTokenQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(shareaccesstoken.Table, shareaccesstoken.Columns, sqlgraph.NewFieldSpec(shareaccesstoken.FieldID, field.TypeString))
	_spec.From = satq.sql
	if unique := satq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if satq.path != nil {
		_spec.Unique = true
	}
	if fields := satq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shareaccesstoken.FieldID)
		for i := range fields {
			if fields[i] != shareaccesstoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := satq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := satq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := satq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := satq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (satq *ShareAccessTokenQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(satq.driver.Dialect())
	t1 := builder.Table(shareaccesstoken.Table)
	columns := satq.ctx.Fields
	if len(columns) == 0 {
		columns = shareaccesstoken.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if satq.sql != nil {
		selector = satq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if satq.ctx.Unique != nil && *satq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range satq.predicates {
		p(selector)
	}
	for _, p := range satq.order {
		p(selector)
	}
	if offset := satq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := satq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ShareAccessTokenGroupBy is the group-by builder for ShareAccessToken entities.
type ShareAccessTokenGroupBy struct {
	selector
	build *ShareAccessTokenQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (satgb *ShareAccessTokenGroupBy) Aggregate(fns ...AggregateFunc) *ShareAccessTokenGroupBy {
	satgb.fns = append(satgb.fns, fns...)
	return satgb
}

// Scan applies the selector query and scans the result into the given value.
func (satgb *ShareAccessTokenGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, satgb.build.ctx, ent.OpQueryGroupBy)
	if err := satgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShareAccessTokenQuery, *ShareAccessTokenGroupBy](ctx, satgb.build, satgb, satgb.build.inters, v)
}

func (satgb *ShareAccessTokenGroupBy) sqlScan(ctx context.Context, root *ShareAccessTokenQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(satgb.fns))
	for _, fn := range satgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*satgb.flds)+len(satgb.fns))
		for _, f := range *satgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*satgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := satgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ShareAccessTokenSelect is the builder for selecting fields of ShareAccessToken entities.
type ShareAccessTokenSelect struct {
	*ShareAccessTokenQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sats *ShareAccessTokenSelect) Aggregate(fns ...AggregateFunc) *ShareAccessTokenSelect {
	sats.fns = append(sats.fns, fns...)
	return sats
}

// Scan applies the selector query and scans the result into the given value.
func (sats *ShareAccessTokenSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sats.ctx, ent.OpQuerySelect)
	if err := sats.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ShareAccessTokenQuery, *ShareAccessTokenSelect](ctx, sats.ShareAccessTokenQuery, sats, sats.inters, v)
}

func (sats *ShareAccessTokenSelect) sqlScan(ctx context.Context, root *ShareAccessTokenQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sats.fns))
	for _, fn := range sats.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sats.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sats.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
