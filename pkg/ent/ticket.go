// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jvllmr/frans/pkg/ent/ticket"
	"github.com/jvllmr/frans/pkg/ent/user"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment *string `json:"comment,omitempty"`
	// ExpiryType holds the value of the "expiryType" field.
	ExpiryType string `json:"expiryType,omitempty"`
	// HashedPassword holds the value of the "hashed_password" field.
	HashedPassword string `json:"hashed_password,omitempty"`
	// Salt holds the value of the "salt" field.
	Salt string `json:"salt,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ExpiryTotalDays holds the value of the "expiry_total_days" field.
	ExpiryTotalDays uint8 `json:"expiry_total_days,omitempty"`
	// ExpiryDaysSinceLastDownload holds the value of the "expiry_days_since_last_download" field.
	ExpiryDaysSinceLastDownload uint8 `json:"expiry_days_since_last_download,omitempty"`
	// ExpiryTotalDownloads holds the value of the "expiry_total_downloads" field.
	ExpiryTotalDownloads uint8 `json:"expiry_total_downloads,omitempty"`
	// EmailOnDownload holds the value of the "email_on_download" field.
	EmailOnDownload *string `json:"email_on_download,omitempty"`
	// CreatorLang holds the value of the "creator_lang" field.
	CreatorLang string `json:"creator_lang,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketQuery when eager-loading is set.
	Edges        TicketEdges `json:"edges"`
	user_tickets *uuid.UUID
	selectValues sql.SelectValues
}

// TicketEdges holds the relations/edges for other nodes in the graph.
type TicketEdges struct {
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Shareaccesstokens holds the value of the shareaccesstokens edge.
	Shareaccesstokens []*ShareAccessToken `json:"shareaccesstokens,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e TicketEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[0] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ShareaccesstokensOrErr returns the Shareaccesstokens value or an error if the edge
// was not loaded in eager-loading.
func (e TicketEdges) ShareaccesstokensOrErr() ([]*ShareAccessToken, error) {
	if e.loadedTypes[2] {
		return e.Shareaccesstokens, nil
	}
	return nil, &NotLoadedError{edge: "shareaccesstokens"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldExpiryTotalDays, ticket.FieldExpiryDaysSinceLastDownload, ticket.FieldExpiryTotalDownloads:
			values[i] = new(sql.NullInt64)
		case ticket.FieldComment, ticket.FieldExpiryType, ticket.FieldHashedPassword, ticket.FieldSalt, ticket.FieldEmailOnDownload, ticket.FieldCreatorLang:
			values[i] = new(sql.NullString)
		case ticket.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case ticket.FieldID:
			values[i] = new(uuid.UUID)
		case ticket.ForeignKeys[0]: // user_tickets
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case ticket.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				t.Comment = new(string)
				*t.Comment = value.String
			}
		case ticket.FieldExpiryType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field expiryType", values[i])
			} else if value.Valid {
				t.ExpiryType = value.String
			}
		case ticket.FieldHashedPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hashed_password", values[i])
			} else if value.Valid {
				t.HashedPassword = value.String
			}
		case ticket.FieldSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value.Valid {
				t.Salt = value.String
			}
		case ticket.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case ticket.FieldExpiryTotalDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expiry_total_days", values[i])
			} else if value.Valid {
				t.ExpiryTotalDays = uint8(value.Int64)
			}
		case ticket.FieldExpiryDaysSinceLastDownload:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expiry_days_since_last_download", values[i])
			} else if value.Valid {
				t.ExpiryDaysSinceLastDownload = uint8(value.Int64)
			}
		case ticket.FieldExpiryTotalDownloads:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field expiry_total_downloads", values[i])
			} else if value.Valid {
				t.ExpiryTotalDownloads = uint8(value.Int64)
			}
		case ticket.FieldEmailOnDownload:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_on_download", values[i])
			} else if value.Valid {
				t.EmailOnDownload = new(string)
				*t.EmailOnDownload = value.String
			}
		case ticket.FieldCreatorLang:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator_lang", values[i])
			} else if value.Valid {
				t.CreatorLang = value.String
			}
		case ticket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_tickets", values[i])
			} else if value.Valid {
				t.user_tickets = new(uuid.UUID)
				*t.user_tickets = *value.S.(*uuid.UUID)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ticket.
// This includes values selected through modifiers, order, etc.
func (t *Ticket) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryFiles queries the "files" edge of the Ticket entity.
func (t *Ticket) QueryFiles() *FileQuery {
	return NewTicketClient(t.config).QueryFiles(t)
}

// QueryOwner queries the "owner" edge of the Ticket entity.
func (t *Ticket) QueryOwner() *UserQuery {
	return NewTicketClient(t.config).QueryOwner(t)
}

// QueryShareaccesstokens queries the "shareaccesstokens" edge of the Ticket entity.
func (t *Ticket) QueryShareaccesstokens() *ShareAccessTokenQuery {
	return NewTicketClient(t.config).QueryShareaccesstokens(t)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return NewTicketClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	if v := t.Comment; v != nil {
		builder.WriteString("comment=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("expiryType=")
	builder.WriteString(t.ExpiryType)
	builder.WriteString(", ")
	builder.WriteString("hashed_password=")
	builder.WriteString(t.HashedPassword)
	builder.WriteString(", ")
	builder.WriteString("salt=")
	builder.WriteString(t.Salt)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expiry_total_days=")
	builder.WriteString(fmt.Sprintf("%v", t.ExpiryTotalDays))
	builder.WriteString(", ")
	builder.WriteString("expiry_days_since_last_download=")
	builder.WriteString(fmt.Sprintf("%v", t.ExpiryDaysSinceLastDownload))
	builder.WriteString(", ")
	builder.WriteString("expiry_total_downloads=")
	builder.WriteString(fmt.Sprintf("%v", t.ExpiryTotalDownloads))
	builder.WriteString(", ")
	if v := t.EmailOnDownload; v != nil {
		builder.WriteString("email_on_download=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("creator_lang=")
	builder.WriteString(t.CreatorLang)
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket
